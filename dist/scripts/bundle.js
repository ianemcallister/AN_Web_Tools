function aProductController(t,e,r,o){var n=this;n.product=o,n.returnHome=function(){r.path("/")}}function accountsController(t,e,r){var o=this;o.registeredUser=!1,o.forgotPassword=!1,t.info("in the accounts controller"),function(t){"CreateProfile"==t||"ForgotPassword"==t?"ForgotPassword"==t&&(o.forgotPassword=!0):o.registeredUser=!0}(e.param)}function allProductsController(t,e,r,o){var n=this;n.allProducts=o,void 0!=e.filter&&(n.selectedProducts=e.filter),n.selectAProuct=function(t){var e="/product/"+t;r.path(e).search("filter",null)}}function cartController(t,e,r,o){var n=this;n.cart=o,t.info("in the cart controller",n.cart),n.cart.calcTotalCost()}function checkoutController(t,e,r,o,n){var i=this;i.cart=n,i.squareCreds=o,t.info("in the checkout controller"),i.backBtn=function(){r.path("/cart")},i.submitOrder=function(){r.path("/order-confirmation/TESTING")}}function internalActtsController(t,e,r,o){var n=this,i=o;t.info("in the internal controller"),n.submit=function(){console.log("submitting"),i.post("/api/shiftEarnings",{test:"test"}).then(function(t){console.log("got this response",t)})}}function landingController(t,e,r,o,n){}function locationsController(t,e,r){t.info("in the locations controller")}function loginController(t,e,r,o){var n=this,i=o;t.info("in the login controller"),n.email="",n.password="",n.login=function(){i.post("/api/authenticate",{email:n.email,pass:n.password},"").then(function(e){var o="#/teamMember/"+e;t.info("got this token back",o),r.path("/")})}}function mainController(t,e,r,o){t.teamMember=!1}function orderConfirmationController(t,e,r,o){e.info("in the order confirmation controller")}function productGettingController(t,e,r,o,n,i,c){var l=this;l.product=r.item,l.cart=n,l.usps=i,l.usps._uspsUsername=c,l.usps.priceCalculator({l:5,w:5,h:5,zipcode:"49001",pounds:1,ounces:8,container:"VARIABLE"}).then(function(e){console.log("got this back",e),l.uspsOptions=e,t.$apply()}).catch(function(t){console.log("error",t)}),l.order=function(){l.cart.updateAquisitionMethod(),l.cart.aquisitionMethod="delivery",o.path("/cart")},l.cityStateLookup=function(){i.cityStateLookup(l.cart.aquisitionDetails.deliveryLocation.zip).then(function(t){l.cart.aquisitionDetails.deliveryLocation.city=t.city,l.cart.aquisitionDetails.deliveryLocation.state=t.state}).catch(function(t){console.log("error:",t)})}}function registerAcctController(t,e,r){console.log("in the registerAcctController ")}function ahHeader(){function t(t,e,r,o){}function e(t,e,r,o){var n=this;n.cart=o,n.navbnt=function(t){e.info("clicked",t),"menu"!=t&&r.path("/"+t)}}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/ah.header.directive.htm",replace:!0,scope:{},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log","$location","shoppingCart"],r}function ahFooter(){function t(t,e,r,o){}function e(t,e){}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/ah.footer.directive.htm",replace:!0,scope:{},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],r}function cartItemsList(){function t(t,e,r,o){}function e(t,e,r){var o=this,n=r;e.info("in the cartItemsListController directive",o.cartItems),o.removeItem=function(t){console.log("removing itemId",t),n.removeItem(t)},o.updateQty=function(t,e){n.updateItemQty(t,e)}}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/cartItemsList.directive.htm",replace:!0,scope:{cartItems:"="},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log","shoppingCart"],r}function cartNavigation(){function t(t,e,r,o){}function e(t,e,r){var o=this;e.info("in the cart navigation directive"),o.shopMore=function(){r.path("/all-products")},o.checkout=function(){r.path("/checkout")}}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/cartNavigation.directive.htm",replace:!0,scope:{},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log","$location"],r}function cartSummary(){function t(t,e,r,o){}function e(t,e){e.info("in the cart summary directive")}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/cartSummary.directive.htm",replace:!0,scope:{noItems:"=",subtotal:"="},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],r}function checkoutBilling(){function t(t,e,r,o){}function e(t,e){var r=this;r.payDet={name:{first:"",last:""},street1:"",street2:"",street3:"",city:"",state:"",zip:"",phone:"",po:"",email:""},e.info("in the checkoutBilling directive",r.aquDet,r.payDet),r.copyDelAdd=function(){r.payDet.name.first=r.aquDet.deliveryLocation.receiver.first,r.payDet.name.last=r.aquDet.deliveryLocation.receiver.last,r.payDet.street1=r.aquDet.deliveryLocation.street1,r.payDet.street2=r.aquDet.deliveryLocation.street2,r.payDet.street3=r.aquDet.deliveryLocation.street3,r.payDet.city=r.aquDet.deliveryLocation.city,r.payDet.state=r.aquDet.deliveryLocation.state,r.payDet.zip=r.aquDet.deliveryLocation.zip}}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/checkoutBilling.directive.htm",replace:!0,scope:{aquDet:"=",payDet:"="},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],r}function checkoutFollowup(){function t(t,e,r,o){}function e(t,e){e.info("in the checkoutFollowupController directive")}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/checkoutFollowup.directive.htm",replace:!0,scope:{},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],r}function checkoutPayment(){function t(t,e,r,o){}function e(t,e,r){var o=this;o.data=r;e.info("in the checkoutPayment directive");var n=new SqPaymentForm({applicationId:"REPLACE_ME",locationId:"REPLACE_ME",inputClass:"sq-input",inputStyles:[{fontSize:"15px"}],cardNumber:{elementId:"sq-card-number",placeholder:"•••• •••• •••• ••••"},cvv:{elementId:"sq-cvv",placeholder:"CVV"},expirationDate:{elementId:"sq-expiration-date",placeholder:"MM/YY"},postalCode:{elementId:"sq-postal-code"},applePay:{elementId:"sq-apple-pay"},callbacks:{methodsSupported:function(t){!0===t.applePay&&(document.getElementById("sq-apple-pay").style.display="inline-block")},createPaymentRequest:function(){return{requestShippingAddress:!0,currencyCode:"USD",countryCode:"US",total:{label:"{{ MERCHANT NAME }}",amount:"{{TOTAL AMOUNT}}",pending:!1},lineItems:[{label:"Subtotal",amount:"{{SUBTOTAL AMOUNT}}",pending:!1},{label:"Shipping",amount:"{{SHIPPING AMOUNT}}",pending:!0},{label:"Tax",amount:"{{TAX AMOUNT}}",pending:!1}]}},cardNonceResponseReceived:function(t,e,r){if(t)return console.log("Encountered errors:"),void t.forEach(function(t){console.log("  "+t.message)});document.getElementById("card-nonce").value=e,document.getElementById("nonce-form").submit(),o.data.post("/process-card",{nonce:e})},unsupportedBrowserDetected:function(){},inputEventReceived:function(t){t.eventType},paymentFormLoaded:function(){}}});o.requestCardNonce=function(t){console.log("requestion card Nonce"),t.preventDefault(),n.requestCardNonce()},n.build()}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/checkoutPayment.directive.htm",replace:!0,scope:{squareCreds:"="},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log","dataServices"],r}function couponSubmission(){function t(t,e,r,o){}function e(t,e){e.info("in the coupon-submission directive")}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/couponSubmission.directive.htm",replace:!0,scope:{},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],r}function createNewAccount(){function t(t,e,r,o){}function e(t,e,r){e.info("in the create new account directive")}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/createNewAccount.directive.htm",replace:!0,scope:{},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log","$location"],r}function defineDeliveryAddress(){function t(t,e,r,o){}function e(t,e){}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/defineDeliveryAddress.directive.htm",replace:!0,scope:{deliverTo:"="},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],r}function deliveryDetails(){function t(t,e,r,o){}function e(t,e,r){var o=this;e.info("in the deliveryDetails directive",o.deliverTo),o.changeDetails=function(){r.path("/getting-the-product/10")}}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/deliveryDetails.directive.htm",replace:!0,scope:{deliverTo:"="},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log","$location"],r}function featuredProducts(){function t(t,e,r,o){}function e(t,e,r){var o=this;o.mrPrdctsBtn=function(){r.path("/all-products")},o.productSelectionBtn=function(t){r.path("/all-products").search("filter",t)}}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/featuredProducts.directive.htm",replace:!0,scope:{},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log","$location"],r}function fedexOptions(){function t(t,e,r,o){}function e(t,e){}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/fedexOptions.directive.htm",replace:!0,scope:{},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],r}function fullProductProfile(){function t(t,e,r,o){}function e(t,e,r,o){var n=this;n.cart=o,n.itemSelections=n.product.sizes,n.addToCart=function(t){n.itemSelections.forEach(function(t){t.qty>0&&n.cart.addItem(t)}),n.cart.acqMethIsDefined()?r.path("/cart"):r.path("/getting-the-product/10")}}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/fullProductProfile.directive.htm",replace:!0,scope:{product:"="},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log","$location","shoppingCart"],r}function heroBanner(){function t(t,e,r,o){}function e(t,e){}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/heroBanner.directive.htm",replace:!0,scope:{},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],r}function passwordReset(){function t(t,e,r,o){}function e(t,e,r){var o=this;e.info("in the passwordReset directive"),o.email="",o.back=function(){r.path("/login")},o.submit=function(){e.info("submitting email",o.email)}}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/passwordReset.directive.htm",replace:!0,scope:{},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log","$location"],r}function pickupOrDelivery(){function t(t,e,r,o){}function e(t,e){var r=this;e.info("in the pickup-or-delivery directive",r.method,r.details)}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/pickupOrDelivery.directive.htm",replace:!0,scope:{method:"=",details:"="},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],r}function primaryContent(){function t(t,e,r,o){}function e(t,e){e.info("in the header directive")}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/primaryContent.directive.htm",replace:!0,scope:{},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],r}function productSizePicker(){function t(t,e,r,o){}function e(t,e){}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/productSizePicker.directive.htm",replace:!0,scope:{sizes:"="},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],r}function prdctThmbnl(){function t(t,e,r,o){}function e(t,e){}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/prdctThmbnl.directive.htm",replace:!0,scope:{product:"="},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],r}function selectDeliveryMethod(){function t(t,e,r,o){}function e(t,e){}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/selectDeliveryMethod.directive.htm",replace:!0,scope:{usps:"="},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],r}function selectPOrD(){function t(t,e,r,o){}function e(t,e){}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/selectPOrD.directive.htm",replace:!0,scope:{},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],r}function selectPickupLocation(){function t(t,e,r,o){}function e(t,e){}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/selectPickupLocation.directive.htm",replace:!0,scope:{},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],r}function sizeQtySelector(){function t(t,e,r,o){}function e(t,e){var r=this;r.incriment=function(){r.size.qty++},r.decriment=function(){r.size.qty>=1&&r.size.qty--}}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/sizeQtySelector.directive.htm",replace:!0,scope:{size:"="},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],r}function toZipOnDate(){function t(t,e,r,o){t.$watch("form.zipcode.$valid",function(e,r){console.log("$valid",e),e&&""!=t.zipcode?t.completed=!0:t.completed=!1})}function e(t,e,r){var o=this;o.zipcodeFinder=function(){alert("finding zipcode")},o.submitZip=function(){},o.checkzipcode=function(){r.cityStateLookup(o.goingTo.zip).then(function(e){o.goingTo.city=e.city,o.goingTo.state=e.state,t.$apply()}).catch(function(t){})}}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/toZipOnDate.directive.htm",replace:!0,scope:{goingTo:"=",vipIdentified:"="},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log","uspsServices"],r}function upsOptions(){function t(t,e,r,o){}function e(t,e){}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/upsOptions.directive.htm",replace:!0,scope:{},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],r}function userDashboard(){function t(t,e,r,o){}function e(t,e,r){e.info("in the userDashboard directive")}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/userDashboard.directive.htm",replace:!0,scope:{},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log","$location"],r}function uspsOptions(){function t(t,e,r,o){}function e(t,e){}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/uspsOptions.directive.htm",replace:!0,scope:{options:"="},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],r}function config(t){t.when("/",{templateUrl:"views/landingPage.htm",controller:"landingController",controllerAs:"vm"}).when("/all-products",{templateUrl:"views/allProductsPage.htm",controller:"allProductsController",controllerAs:"vm",resolve:{productList:productList}}).when("/product/:prdctId",{templateUrl:"views/aProductPage.htm",controller:"aProductController",controllerAs:"vm",resolve:{aProduct:aProduct}}).when("/getting-the-product/:itemId",{templateUrl:"views/productGettingPage.htm",controller:"productGettingController",controllerAs:"vm",resolve:{uspsUsername:uspsUsername}}).when("/locations",{templateUrl:"views/locationsPage.htm",controller:"locationsController",controllerAs:"vm"}).when("/login",{templateUrl:"views/loginPage.htm",controller:"loginController",controllerAs:"vm"}).when("/cart",{templateUrl:"views/cartPage.htm",controller:"cartController",controllerAs:"vm"}).when("/checkout",{templateUrl:"views/checkoutPage.htm",controller:"checkoutController",controllerAs:"vm",resolve:{squareCreds:squareCreds}}).when("/order-confirmation/:confId",{templateUrl:"views/orderConfirmationPage.htm",controller:"orderConfirmationController",controllerAs:"vm"}).when("/registerUser",{templateUrl:"views/registrationPage.htm",controller:"registerAcctController",controllerAs:"vm"}).when("/MyAccount/:param",{templateUrl:"views/accountsPage.htm",controller:"accountsController",controllerAs:"vm"}).when("/teamMember/:param",{templateUrl:"views/internalActtsPage.htm",controller:"internalActtsController",controllerAs:"vm",resolve:{authentication:authentication}})}function authentication(){console.log("authenticating")}function squareCreds(t){var e=t;return console.log("getting square creds"),new Promise(function(t,r){e.post("/api/square-creds",{key:"owine91n-sn#bsinwi#k"}).then(function(e){console.log("got this",e),t(e)}).catch(function(e){t(e)})})}function productList(t,e){var r=t,o="/api/productlist";return void 0!=e.current.params&&(o+="?filter="+e.current.params.filter),new Promise(function(t,e){r.get(o).then(function(e){t(e)}).catch(function(t){e(t)})})}function aProduct(t,e){var r=t,o="/api/productlist?select="+e.current.params.prdctId;return console.log("path",o),new Promise(function(t,e){r.get(o).then(function(e){t(e)}).catch(function(t){e(t)})})}function uspsUsername(t){var e=t;return new Promise(function(t,r){e.get("/api/secrets/usps-username").then(function(e){console.log("got this secret",e),t(e)}).catch(function(t){r(t)})})}function dataServices(t,e){return{get:function(t,r){return new Promise(function(o,n){e.get(t,r).then(function(t){o(t.data)},function(t){n(t)})})},post:function(t,r,o){return new Promise(function(n,i){e.post(t,r,o).then(function(t){n(t.data)},function(t){i(t)})})}}}function shoppingCart(t,e,r){function o(t){var e={};return Object.keys(t).forEach(function(r){e[r]=t[r]}),console.log("adding this new item",e),e}function n(t){var e=this,r=0;return console.log("allItems",t),Object.keys(t).forEach(function(e){r+=t[e].qty}),console.log("_countNoItems",r),0==r&&(e.isEmpty=!0),r}function i(t){var e=0;return Object.keys(t).forEach(function(r){e+=t[r].qty*t[r].price}),e}return{isEmpty:!0,orderNumber:void 0,aquisitionMethod:void 0,noOfItems:0,subtotal:0,shippingPrice:0,discounts:0,totalCost:0,aquisitionDetails:{delZipIdentified:!1,delDateIdentified:!1,shippedOrPUSelected:!1,willShippp:!1,willPU:!1,puLocSelected:!1,delMthSelected:!1,pickupLocation:{},deliveryLocation:{receiver:{first:"",last:""},street1:"",street2:"",street3:"",city:"",state:"",zip:""},deliveryMethod:{}},paymentDetails:{},items:{},_saveToBrowser:function(){var t=this,e={isEmpty:t.isEmpty,orderNumber:t.orderNumber,aquisitionMethod:t.aquisitionMethod,noOfItems:t.noOfItems,subtotal:t.subtotal,shippingPrice:t.shippingPrice,discounts:t.discounts,totalCost:t.totalCost,aquisitionDetails:t.aquisitionDetails,items:t.items};r.sessionStorage.setItem("ah-nuts-cart",JSON.stringify(e))},_getCart:function(){return r.sessionStorage["ah-nuts-cart"]},_removeCart:function(){r.sessionStorage.removeItem("ah-nuts-cart")},_addNewItem:o,_countNoItems:n,_calcSubtotal:i,init:function(){var t=this;if(null!=r.sessionStorage.getItem("ah-nuts-cart")){var e=JSON.parse(r.sessionStorage.getItem("ah-nuts-cart"));t.isEmpty=e.isEmpty,t.orderNumber=e.orderNumber,t.aquisitionMethod=e.aquisitionMethod,t.noOfItems=e.noOfItems,t.subtotal=e.subtotal,t.shippingPrice=e.shippingPrice,t.discounts=e.discounts,t.totalCost=e.totalCost,t.aquisitionDetails=e.aquisitionDetails,t.items=e.items}console.log(t)},addItem:function(t){var e=this,r=t.code;return e.isEmpty=!1,void 0==e.items[r]?(console.log("adding a new item"),e.items[r]=o(t),e.noOfItems=n(e.items),e.subtotal=i(e.items)):console.log("updating a new qty"),e._saveToBrowser(),!0},removeItem:function(t){var e=this;Object.keys(e.items).forEach(function(r){console.log(r,t),r==t&&delete e.items[r]}),e.noOfItems=e._countNoItems(e.items),e.subtotal=e._calcSubtotal(e.items),e.calcTotalCost(),e._saveToBrowser()},updateAquisitionMethod:function(){this._saveToBrowser()},calcTotalCost:function(){var t=this;t.totalCost=t.subtotal+t.shippingPrice+t.discounts},updateItemQty:function(t,e){var r=this;if(0==parseInt(e))return r.removeItem(t),0;r.items[t].qty=parseInt(e),r.noOfItems=r._countNoItems(r.items),r.subtotal=r._calcSubtotal(r.items),r.calcTotalCost(),r._saveToBrowser()},acqMethIsDefined:function(){return void 0!=this.aquisitionMethod}}}function testObject(t){return{image:void 0,code:1203,rating:void 0,name:"Specialty Cones",sizes:[{code:1203001,title:"Impressive",oz:16,price:1800},{code:1203002,title:"Average",oz:8,price:1300},{code:1203003,title:"Small",oz:4,price:700}],description:"The most amazing pecans you've ever taste",ingredients:["Pecans","Sugar","Vanilla","Salt"]}}function userAuthentication(t,e){}function uspsServices(t,e){return{_shippingRequest:{PackageID:"",Service:"",ZipOrigination:"",ZipDestination:"",Pounds:0,Ounces:0,Container:"",Size:"",Width:0,Length:0,Height:0,Girth:0,Value:0},_shippingOptions:{zones:[],postage:[]},_uspsUsername:"",_generalParse:function(t){var e=(new X2JS).xml_str2json(t);return console.log(e),e},_filterPostageOptions:function(t){var e={},r=t.RateV4Response.Package,o={zip:"",zone:100};return Object.keys(r).forEach(function(t){var o=r[t].ZipOrigination;void 0==e[o]&&(e[o]={zone:0,services:[]}),e[o].zone=r[t].Zone;var n={mailService:r[t].Postage.MailService,rate:r[t].Postage.Rate};e[o].services.push(n)}),Object.keys(e).forEach(function(t){e[t].zone<o.zone&&(o={zip:t,zone:e[t].zone})}),Object.keys(e).forEach(function(t){t!=o.zip&&delete e[t]}),Object.keys(e).forEach(function(t){e=e[t].services}),e},_parseCityStateResponse:function(t){console.log(t,typeof t);var e=t.split("<City>")[1].split("</City>"),r=t.split("<State>")[1].split("</State>");return{city:e[0],state:r[0]}},getShippingRequest:function(){return this._shippingRequest},cityStateLookup:function(t){var r=this,o='http://production.shippingapis.com/ShippingAPI.dll?API= CityStateLookup&XML=<CityStateLookupRequest%20USERID="'+r._uspsUsername+'"><ZipCode ID= "0"><Zip5>'+t+"</Zip5></ZipCode></CityStateLookupRequest>";return console.log(t),new Promise(function(t,n){e.get(o,"").then(function(e){var o=r._parseCityStateResponse(e.data);console.log(o),t(o)},function(t){n(t)})})},priceCalculator:function(t){var r=this,o=(r._shippingOptions,r._postage,["97005","84015"]),n=["EXPRESS","PRIORITY"],i="",c=0,l='http://production.shippingapis.com/ShippingApi.dll?API=RateV4&XML=<RateV4Request USERID="'+r._uspsUsername+'">';return i=t.l>12||t.w>12||t.h>12?"LARGE":"REGULAR",o.forEach(function(e){n.forEach(function(r){l+='<Package ID="'+ ++c+'">',l+="<Service>"+r+"</Service>",l+="<ZipOrigination>"+e+"</ZipOrigination>",l+="<ZipDestination>"+t.zipcode+"</ZipDestination>",l+="<Pounds>"+t.pounds+"</Pounds>",l+="<Ounces>"+t.ounces+"</Ounces>",l+="<Container>"+t.container+"</Container>",l+="<Size>"+i+"</Size>",l+="<Width>"+t.w+"</Width>",l+="<Length>"+t.l+"</Length>",l+="<Height>"+t.h+"</Height>",l+="</Package>"})}),l+="</RateV4Request> ",new Promise(function(t,o){e.get(l,config).then(function(e){var o=r._generalParse(e.data),n=r._filterPostageOptions(o);t(n)},function(t){o(t)})})}}}config.$inject=["$routeProvider"],productList.$inject=["dataServices","$route"],aProduct.$inject=["dataServices","$route"],uspsUsername.$inject=["dataServices"],squareCreds.$inject=["dataServices"];var ahNuts=angular.module("ahNuts",["ngRoute"]);angular.module("ahNuts").run(["shoppingCart",function(t){t.init()}]),function(t,e){"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?module.exports=e():t.X2JS=e()}(this,function(){return function(t){"use strict";function e(t){var e=t.localName;return null==e&&(e=t.baseName),null!=e&&""!=e||(e=t.nodeName),e}function r(t){return t.prefix}function o(t){return"string"==typeof t?t.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&apos;"):t}function n(t,e,r,o){for(var n=0;n<t.length;n++){var i=t[n];if("string"==typeof i){if(i==o)break}else if(i instanceof RegExp){if(i.test(o))break}else if("function"==typeof i&&i(e,r,o))break}return n!=t.length}function i(e,r,o){switch(t.arrayAccessForm){case"property":e[r]instanceof Array?e[r+"_asArray"]=e[r]:e[r+"_asArray"]=[e[r]]}!(e[r]instanceof Array)&&t.arrayAccessFormPaths.length>0&&n(t.arrayAccessFormPaths,e,r,o)&&(e[r]=[e[r]])}function c(t){var e=t.split(/[-T:+Z]/g),r=new Date(e[0],e[1]-1,e[2]),o=e[5].split(".");if(r.setHours(e[3],e[4],o[0]),o.length>1&&r.setMilliseconds(o[1]),e[6]&&e[7]){var n=60*e[6]+Number(e[7]);n=0+("-"==(/\d\d-\d\d:\d\d$/.test(t)?"-":"+")?-1*n:n),r.setMinutes(r.getMinutes()-n-r.getTimezoneOffset())}else-1!==t.indexOf("Z",t.length-1)&&(r=new Date(Date.UTC(r.getFullYear(),r.getMonth(),r.getDate(),r.getHours(),r.getMinutes(),r.getSeconds(),r.getMilliseconds())));return r}function l(e,r,o){if(t.datetimeAccessFormPaths.length>0){var i=o.split(".#")[0];return n(t.datetimeAccessFormPaths,e,r,i)?c(e):e}return e}function a(e,r,o,i){return!(r==_.ELEMENT_NODE&&t.xmlElementsFilter.length>0)||n(t.xmlElementsFilter,e,o,i)}function s(o,n){if(o.nodeType==_.DOCUMENT_NODE){for(var c=new Object,u=o.childNodes,p=0;p<u.length;p++)(d=u.item(p)).nodeType==_.ELEMENT_NODE&&(c[m=e(d)]=s(d,m));return c}if(o.nodeType==_.ELEMENT_NODE){(c=new Object).__cnt=0;for(var u=o.childNodes,p=0;p<u.length;p++){var d=u.item(p),m=e(d);if(d.nodeType!=_.COMMENT_NODE){var f=n+"."+m;a(c,d.nodeType,m,f)&&(c.__cnt++,null==c[m]?(c[m]=s(d,f),i(c,m,f)):(null!=c[m]&&(c[m]instanceof Array||(c[m]=[c[m]],i(c,m,f))),c[m][c[m].length]=s(d,f)))}}for(var v=0;v<o.attributes.length;v++){var h=o.attributes.item(v);c.__cnt++,c[t.attributePrefix+h.name]=h.value}var g=r(o);return null!=g&&""!=g&&(c.__cnt++,c.__prefix=g),null!=c["#text"]&&(c.__text=c["#text"],c.__text instanceof Array&&(c.__text=c.__text.join("\n")),t.stripWhitespaces&&(c.__text=c.__text.trim()),delete c["#text"],"property"==t.arrayAccessForm&&delete c["#text_asArray"],c.__text=l(c.__text,m,n+"."+m)),null!=c["#cdata-section"]&&(c.__cdata=c["#cdata-section"],delete c["#cdata-section"],"property"==t.arrayAccessForm&&delete c["#cdata-section_asArray"]),0==c.__cnt&&"text"==t.emptyNodeForm?c="":1==c.__cnt&&null!=c.__text?c=c.__text:1!=c.__cnt||null==c.__cdata||t.keepCData?c.__cnt>1&&null!=c.__text&&t.skipEmptyTextNodesForObj&&(t.stripWhitespaces&&""==c.__text||""==c.__text.trim())&&delete c.__text:c=c.__cdata,delete c.__cnt,!t.enableToStringFunc||null==c.__text&&null==c.__cdata||(c.toString=function(){return(null!=this.__text?this.__text:"")+(null!=this.__cdata?this.__cdata:"")}),c}if(o.nodeType==_.TEXT_NODE||o.nodeType==_.CDATA_SECTION_NODE)return o.nodeValue}function u(e,r,n,i){var c="<"+(null!=e&&null!=e.__prefix?e.__prefix+":":"")+r;if(null!=n)for(var l=0;l<n.length;l++){var a=n[l],s=e[a];t.escapeMode&&(s=o(s)),c+=" "+a.substr(t.attributePrefix.length)+"=",t.useDoubleQuotes?c+='"'+s+'"':c+="'"+s+"'"}return c+=i?"/>":">"}function p(t,e){return"</"+(null!=t.__prefix?t.__prefix+":":"")+e+">"}function d(t,e){return-1!==t.indexOf(e,t.length-e.length)}function m(e,r){return!!("property"==t.arrayAccessForm&&d(r.toString(),"_asArray")||0==r.toString().indexOf(t.attributePrefix)||0==r.toString().indexOf("__")||e[r]instanceof Function)}function f(t){var e=0;if(t instanceof Object)for(var r in t)m(t,r)||e++;return e}function v(e,r,o){return 0==t.jsonPropertiesFilter.length||""==o||n(t.jsonPropertiesFilter,e,r,o)}function h(e){var r=[];if(e instanceof Object)for(var o in e)-1==o.toString().indexOf("__")&&0==o.toString().indexOf(t.attributePrefix)&&r.push(o);return r}function g(e){var r="";return null!=e.__cdata&&(r+="<![CDATA["+e.__cdata+"]]>"),null!=e.__text&&(t.escapeMode?r+=o(e.__text):r+=e.__text),r}function $(e){var r="";return e instanceof Object?r+=g(e):null!=e&&(t.escapeMode?r+=o(e):r+=e),r}function C(t,e){return""===t?e:t+"."+e}function y(t,e,r,o){var n="";if(0==t.length)n+=u(t,e,r,!0);else for(var i=0;i<t.length;i++)n+=u(t[i],e,h(t[i]),!1),n+=A(t[i],C(o,e)),n+=p(t[i],e);return n}function A(t,e){var r="";if(f(t)>0)for(var o in t)if(!m(t,o)&&(""==e||v(t,o,C(e,o)))){var n=t[o],i=h(n);null==n||void 0==n?r+=u(n,o,i,!0):n instanceof Object?n instanceof Array?r+=y(n,o,i,e):n instanceof Date?(r+=u(n,o,i,!1),r+=n.toISOString(),r+=p(n,o)):f(n)>0||null!=n.__text||null!=n.__cdata?(r+=u(n,o,i,!1),r+=A(n,C(e,o)),r+=p(n,o)):r+=u(n,o,i,!0):(r+=u(n,o,i,!1),r+=$(n),r+=p(n,o))}return r+=$(t)}void 0===(t=t||{}).escapeMode&&(t.escapeMode=!0),t.attributePrefix=t.attributePrefix||"_",t.arrayAccessForm=t.arrayAccessForm||"none",t.emptyNodeForm=t.emptyNodeForm||"text",void 0===t.enableToStringFunc&&(t.enableToStringFunc=!0),t.arrayAccessFormPaths=t.arrayAccessFormPaths||[],void 0===t.skipEmptyTextNodesForObj&&(t.skipEmptyTextNodesForObj=!0),void 0===t.stripWhitespaces&&(t.stripWhitespaces=!0),t.datetimeAccessFormPaths=t.datetimeAccessFormPaths||[],void 0===t.useDoubleQuotes&&(t.useDoubleQuotes=!1),t.xmlElementsFilter=t.xmlElementsFilter||[],t.jsonPropertiesFilter=t.jsonPropertiesFilter||[],void 0===t.keepCData&&(t.keepCData=!1);var _={ELEMENT_NODE:1,TEXT_NODE:3,CDATA_SECTION_NODE:4,COMMENT_NODE:8,DOCUMENT_NODE:9};this.parseXmlString=function(t){var e=window.ActiveXObject||"ActiveXObject"in window;if(void 0===t)return null;var r;if(window.DOMParser){var o=new window.DOMParser,n=null;if(!e)try{n=o.parseFromString("INVALID","text/xml").getElementsByTagName("parsererror")[0].namespaceURI}catch(t){n=null}try{r=o.parseFromString(t,"text/xml"),null!=n&&r.getElementsByTagNameNS(n,"parsererror").length>0&&(r=null)}catch(t){r=null}}else 0==t.indexOf("<?")&&(t=t.substr(t.indexOf("?>")+2)),(r=new ActiveXObject("Microsoft.XMLDOM")).async="false",r.loadXML(t);return r},this.asArray=function(t){return void 0===t||null==t?[]:t instanceof Array?t:[t]},this.toXmlDateTime=function(t){return t instanceof Date?t.toISOString():"number"==typeof t?new Date(t).toISOString():null},this.asDateTime=function(t){return"string"==typeof t?c(t):t},this.xml2json=function(t){return s(t)},this.xml_str2json=function(t){var e=this.parseXmlString(t);return null!=e?this.xml2json(e):null},this.json2xml_str=function(t){return A(t,"")},this.json2xml=function(t){var e=this.json2xml_str(t);return this.parseXmlString(e)},this.getVersion=function(){return"1.2.0"}}}),angular.module("ahNuts").controller("aProductController",aProductController),aProductController.$inject=["$log","$routeParams","$location","aProduct"],angular.module("ahNuts").controller("accountsController",accountsController),accountsController.$inject=["$log","$routeParams","$location"],angular.module("ahNuts").controller("allProductsController",allProductsController),allProductsController.$inject=["$log","$routeParams","$location","productList"],angular.module("ahNuts").controller("cartController",cartController),cartController.$inject=["$log","$routeParams","$location","shoppingCart"],angular.module("ahNuts").controller("checkoutController",checkoutController),checkoutController.$inject=["$log","$routeParams","$location","squareCreds","shoppingCart"],angular.module("ahNuts").controller("internalActtsController",internalActtsController),internalActtsController.$inject=["$log","$routeParams","$location","dataServices"],angular.module("ahNuts").controller("landingController",landingController),landingController.$inject=["$scope","$log","$routeParams","$location","dataServices"],angular.module("ahNuts").controller("locationsController",locationsController),locationsController.$inject=["$log","$routeParams","$location"],angular.module("ahNuts").controller("loginController",loginController),loginController.$inject=["$log","$routeParams","$location","dataServices"],angular.module("ahNuts").controller("mainController",mainController),mainController.$inject=["$scope","$log","$routeParams","$location"],angular.module("ahNuts").controller("orderConfirmationController",orderConfirmationController),orderConfirmationController.$inject=["$scope","$log","$routeParams","$location"],angular.module("ahNuts").controller("productGettingController",productGettingController),productGettingController.$inject=["$scope","$log","$routeParams","$location","shoppingCart","uspsServices","uspsUsername"],angular.module("ahNuts").controller("registerAcctController",registerAcctController),registerAcctController.$inject=["$log","$routeParams","$location"],angular.module("ahNuts").directive("ahHeader",ahHeader),angular.module("ahNuts").directive("ahFooter",ahFooter),angular.module("ahNuts").directive("cartItemsList",cartItemsList),angular.module("ahNuts").directive("cartNavigation",cartNavigation),angular.module("ahNuts").directive("cartSummary",cartSummary),angular.module("ahNuts").directive("checkoutBilling",checkoutBilling),angular.module("ahNuts").directive("checkoutFollowup",checkoutFollowup),angular.module("ahNuts").directive("checkoutPayment",checkoutPayment),angular.module("ahNuts").directive("couponSubmission",couponSubmission),angular.module("ahNuts").directive("createNewAccount",createNewAccount),angular.module("ahNuts").directive("defineDeliveryAddress",defineDeliveryAddress),angular.module("ahNuts").directive("deliveryDetails",deliveryDetails),angular.module("ahNuts").directive("featuredProducts",featuredProducts),angular.module("ahNuts").directive("fedexOptions",fedexOptions),angular.module("ahNuts").directive("fullProductProfile",fullProductProfile),angular.module("ahNuts").directive("heroBanner",heroBanner),angular.module("ahNuts").directive("passwordReset",passwordReset),angular.module("ahNuts").directive("pickupOrDelivery",pickupOrDelivery),angular.module("ahNuts").directive("primaryContent",primaryContent),angular.module("ahNuts").directive("productSizePicker",productSizePicker),angular.module("ahNuts").directive("prdctThmbnl",prdctThmbnl),angular.module("ahNuts").directive("selectDeliveryMethod",selectDeliveryMethod),angular.module("ahNuts").directive("selectPOrD",selectPOrD),angular.module("ahNuts").directive("selectPickupLocation",selectPickupLocation),angular.module("ahNuts").directive("sizeQtySelector",sizeQtySelector),angular.module("ahNuts").directive("toZipOnDate",toZipOnDate),angular.module("ahNuts").directive("upsOptions",upsOptions),angular.module("ahNuts").directive("userDashboard",userDashboard),angular.module("ahNuts").directive("uspsOptions",uspsOptions),angular.module("ahNuts").config(config),angular.module("ahNuts").factory("dataServices",dataServices),dataServices.$inject=["$log","$http"],angular.module("ahNuts").factory("shoppingCart",shoppingCart),shoppingCart.$inject=["$log","$http","$window"],angular.module("ahNuts").factory("testObject",testObject),testObject.$inject=["$log"],angular.module("ahNuts").service("userAuthentication",userAuthentication),userAuthentication.$inject=["$http","$window"],angular.module("ahNuts").factory("uspsServices",uspsServices),uspsServices.$inject=["$log","$http"];
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNjcmlwdHMvY29udHJvbGxlcnMvYVByb2R1Y3QuY29udHJvbGxlci5qcyIsInNjcmlwdHMvY29udHJvbGxlcnMvYWNjb3VudHMuY29udHJvbGxlci5qcyIsInNjcmlwdHMvY29udHJvbGxlcnMvYWxsUHJvZHVjdHMuY29udHJvbGxlci5qcyIsInNjcmlwdHMvY29udHJvbGxlcnMvY2FydC5jb250cm9sbGVyLmpzIiwic2NyaXB0cy9jb250cm9sbGVycy9jaGVja291dC5jb250cm9sbGVyLmpzIiwic2NyaXB0cy9jb250cm9sbGVycy9pbnRlcm5hbC5hY2NvdW50cy5jb250cm9sbGVyLmpzIiwic2NyaXB0cy9jb250cm9sbGVycy9sYW5kaW5nLmNvbnRyb2xsZXIuanMiLCJzY3JpcHRzL2NvbnRyb2xsZXJzL2xvY2F0aW9ucy5jb250cm9sbGVyLmpzIiwic2NyaXB0cy9jb250cm9sbGVycy9sb2dpbi5jb250cm9sbGVyLmpzIiwic2NyaXB0cy9jb250cm9sbGVycy9tYWluLmNvbnRyb2xsZXIuanMiLCJzY3JpcHRzL2NvbnRyb2xsZXJzL29yZGVyQ29uZmlybWF0aW9uLmNvbnRyb2xsZXIuanMiLCJzY3JpcHRzL2NvbnRyb2xsZXJzL3Byb2R1Y3RHZXR0aW5nLmNvbnRyb2xsZXIuanMiLCJzY3JpcHRzL2NvbnRyb2xsZXJzL3JlZ2lzdGVyQWNjdC5jb250cm9sbGVyLmpzIiwic2NyaXB0cy9kaXJlY3RpdmVzL2FoLmhlYWRlci5kaXJlY3RpdmUuanMiLCJzY3JpcHRzL2RpcmVjdGl2ZXMvYWhGb290ZXIuZGlyZWN0aXZlLmpzIiwic2NyaXB0cy9kaXJlY3RpdmVzL2NhcnRJdGVtc0xpc3QuZGlyZWN0aXZlLmpzIiwic2NyaXB0cy9kaXJlY3RpdmVzL2NhcnROYXZpZ2F0aW9uLmRpcmVjdGl2ZS5qcyIsInNjcmlwdHMvZGlyZWN0aXZlcy9jYXJ0U3VtbWFyeS5kaXJlY3RpdmUuanMiLCJzY3JpcHRzL2RpcmVjdGl2ZXMvY2hlY2tvdXRCaWxsaW5nLmRpcmVjdGl2ZS5qcyIsInNjcmlwdHMvZGlyZWN0aXZlcy9jaGVja291dEZvbGxvd3VwLmRpcmVjdGl2ZS5qcyIsInNjcmlwdHMvZGlyZWN0aXZlcy9jaGVja291dFBheW1lbnQuZGlyZWN0aXZlLmpzIiwic2NyaXB0cy9kaXJlY3RpdmVzL2NvdXBvblN1Ym1pc3Npb24uZGlyZWN0aXZlLmpzIiwic2NyaXB0cy9kaXJlY3RpdmVzL2NyZWF0ZU5ld0FjY291bnQuZGlyZWN0aXZlLmpzIiwic2NyaXB0cy9kaXJlY3RpdmVzL2RlZmluZURlbGl2ZXJ5QWRkcmVzcy5kaXJlY3RpdmUuanMiLCJzY3JpcHRzL2RpcmVjdGl2ZXMvZGVsaXZlcnlEZXRhaWxzLmRpcmVjdGl2ZS5qcyIsInNjcmlwdHMvZGlyZWN0aXZlcy9mZWF0dXJlZFByb2R1Y3RzLmRpcmVjdGl2ZS5qcyIsInNjcmlwdHMvZGlyZWN0aXZlcy9mZWRleE9wdGlvbnMuZGlyZWN0aXZlLmpzIiwic2NyaXB0cy9kaXJlY3RpdmVzL2Z1bGxQcm9kdWN0UHJvZmlsZS5kaXJlY3RpdmUuanMiLCJzY3JpcHRzL2RpcmVjdGl2ZXMvaGVyb0Jhbm5lci5kaXJlY3RpdmUuanMiLCJzY3JpcHRzL2RpcmVjdGl2ZXMvcGFzc3dvcmRSZXNldC5kaXJlY3RpdmUuanMiLCJzY3JpcHRzL2RpcmVjdGl2ZXMvcGlja3VwT3JEZWxpdmVyeS5kaXJlY3RpdmUuanMiLCJzY3JpcHRzL2RpcmVjdGl2ZXMvcHJpbWFyeUNvbnRlbnRDb250cm9sbGVyLmRpcmVjdGl2ZS5qcyIsInNjcmlwdHMvZGlyZWN0aXZlcy9wcm9kdWN0U2l6ZVBpY2tlci5kaXJlY3RpdmUuanMiLCJzY3JpcHRzL2RpcmVjdGl2ZXMvcHJvZHVjdFRodW1ibmFpbHMuZGlyZWN0aXZlLmpzIiwic2NyaXB0cy9kaXJlY3RpdmVzL3NlbGVjdERlbGl2ZXJ5TWV0aG9kLmRpcmVjdGl2ZS5qcyIsInNjcmlwdHMvZGlyZWN0aXZlcy9zZWxlY3RQT3JELmRpcmVjdGl2ZS5qcyIsInNjcmlwdHMvZGlyZWN0aXZlcy9zZWxlY3RQaWNrdXBMb2NhdGlvbi5kaXJlY3RpdmUuanMiLCJzY3JpcHRzL2RpcmVjdGl2ZXMvc2l6ZVF0eVNlbGVjdG9yLmRpcmVjdGl2ZS5qcyIsInNjcmlwdHMvZGlyZWN0aXZlcy90b1ppcE9uRGF0ZS5kaXJlY3RpdmUuanMiLCJzY3JpcHRzL2RpcmVjdGl2ZXMvdXBzT3B0aW9ucy5kaXJlY3RpdmUuanMiLCJzY3JpcHRzL2RpcmVjdGl2ZXMvdXNlckRhc2hib2FyZC5kaXJlY3RpdmUuanMiLCJzY3JpcHRzL2RpcmVjdGl2ZXMvdXNwc09wdGlvbnMuZGlyZWN0aXZlLmpzIiwic2NyaXB0cy9yb3V0ZXMvcm91dGVzLWNvbmZpZy5qcyIsInNjcmlwdHMvZmFjdG9yaWVzL2RhdGEuc2VydmljZXMuZmFjdG9yeS5qcyIsInNjcmlwdHMvZmFjdG9yaWVzL3Nob3BwaW5nQ2FydC5zZXJ2aWNlcy5mYWN0b3J5LmpzIiwic2NyaXB0cy9mYWN0b3JpZXMvdGVzdE9iamVjdC5zZXJ2aWNlcy5mYWN0b3J5LmpzIiwic2NyaXB0cy9mYWN0b3JpZXMvdXNlckF1dGhlbnRpY2F0aW9uLnNlcnZpY2UuanMiLCJzY3JpcHRzL2ZhY3Rvcmllcy91c3BzU2VydmljZXMuc2VydmljZS5qcyIsInNjcmlwdHMvYXBwLmpzIiwic2NyaXB0cy9ydW4uanMiLCJzY3JpcHRzLzNyZF9wYXJ0eS94bWwyanNvbi5qcyJdLCJuYW1lcyI6WyJhUHJvZHVjdENvbnRyb2xsZXIiLCIkbG9nIiwiJHJvdXRlUGFyYW1zIiwiJGxvY2F0aW9uIiwiYVByb2R1Y3QiLCJ2bSIsInRoaXMiLCJwcm9kdWN0IiwicmV0dXJuSG9tZSIsInBhdGgiLCJhY2NvdW50c0NvbnRyb2xsZXIiLCJyZWdpc3RlcmVkVXNlciIsImZvcmdvdFBhc3N3b3JkIiwiaW5mbyIsInVzZXJJZCIsInVzZXJDaGVjayIsInBhcmFtIiwiYWxsUHJvZHVjdHNDb250cm9sbGVyIiwicHJvZHVjdExpc3QiLCJhbGxQcm9kdWN0cyIsInVuZGVmaW5lZCIsImZpbHRlciIsInNlbGVjdGVkUHJvZHVjdHMiLCJzZWxlY3RBUHJvdWN0IiwicHJkY3RDb2RlIiwic2VhcmNoIiwiY2FydENvbnRyb2xsZXIiLCJzaG9wcGluZ0NhcnQiLCJjYXJ0IiwiY2FsY1RvdGFsQ29zdCIsImNoZWNrb3V0Q29udHJvbGxlciIsInNxdWFyZUNyZWRzIiwiYmFja0J0biIsInN1Ym1pdE9yZGVyIiwiaW50ZXJuYWxBY3R0c0NvbnRyb2xsZXIiLCJkYXRhU2VydmljZXMiLCJkYXRhIiwic3VibWl0IiwiY29uc29sZSIsImxvZyIsInBvc3QiLCJ0ZXN0IiwidGhlbiIsInJlc3BvbnNlIiwibGFuZGluZ0NvbnRyb2xsZXIiLCIkc2NvcGUiLCJsb2NhdGlvbnNDb250cm9sbGVyIiwibG9naW5Db250cm9sbGVyIiwiZW1haWwiLCJwYXNzd29yZCIsImxvZ2luIiwicGFzcyIsInRva2VuIiwibWFpbkNvbnRyb2xsZXIiLCJ0ZWFtTWVtYmVyIiwib3JkZXJDb25maXJtYXRpb25Db250cm9sbGVyIiwicHJvZHVjdEdldHRpbmdDb250cm9sbGVyIiwidXNwc1NlcnZpY2VzIiwidXNwc1VzZXJuYW1lIiwiaXRlbSIsInVzcHMiLCJfdXNwc1VzZXJuYW1lIiwicHJpY2VDYWxjdWxhdG9yIiwibCIsInciLCJoIiwiemlwY29kZSIsInBvdW5kcyIsIm91bmNlcyIsImNvbnRhaW5lciIsInMiLCJ1c3BzT3B0aW9ucyIsIiRhcHBseSIsImNhdGNoIiwiZSIsIm9yZGVyIiwidXBkYXRlQXF1aXNpdGlvbk1ldGhvZCIsImFxdWlzaXRpb25NZXRob2QiLCJjaXR5U3RhdGVMb29rdXAiLCJhcXVpc2l0aW9uRGV0YWlscyIsImRlbGl2ZXJ5TG9jYXRpb24iLCJ6aXAiLCJjaXR5U3RhdGVPYmplY3QiLCJjaXR5Iiwic3RhdGUiLCJyZWdpc3RlckFjY3RDb250cm9sbGVyIiwibGlua0Z1bmMiLCJzY29wZSIsImVsIiwiYXR0ciIsImN0cmwiLCJhaEhlYWRlckNvbnRyb2xsZXIiLCJuYXZibnQiLCJidXR0b24iLCJkaXJlY3RpdmUiLCJyZXN0cmljdCIsInRlbXBsYXRlVXJsIiwicmVwbGFjZSIsImxpbmsiLCJjb250cm9sbGVyIiwiY29udHJvbGxlckFzIiwiYmluZFRvQ29udHJvbGxlciIsIiRpbmplY3QiLCJhaEZvb3RlckNvbnRyb2xsZXIiLCJjYXJ0SXRlbXNMaXN0Q29udHJvbGxlciIsImNhcnRJdGVtcyIsInJlbW92ZUl0ZW0iLCJpdGVtSWQiLCJ1cGRhdGVRdHkiLCJxdHkiLCJ1cGRhdGVJdGVtUXR5IiwiY2FydE5hdmlnYXRpb25Db250cm9sbGVyIiwic2hvcE1vcmUiLCJjaGVja291dCIsImNhcnRTdW1tYXJ5Q29udHJvbGxlciIsIm5vSXRlbXMiLCJzdWJ0b3RhbCIsImNoZWNrb3V0QmlsbGluZ0NvbnRyb2xsZXIiLCJwYXlEZXQiLCJuYW1lIiwiZmlyc3QiLCJsYXN0Iiwic3RyZWV0MSIsInN0cmVldDIiLCJzdHJlZXQzIiwicGhvbmUiLCJwbyIsImFxdURldCIsImNvcHlEZWxBZGQiLCJyZWNlaXZlciIsImNoZWNrb3V0Rm9sbG93dXBDb250cm9sbGVyIiwiY2hlY2tvdXRQYXltZW50Q29udHJvbGxlciIsInBheW1lbnRGb3JtIiwiU3FQYXltZW50Rm9ybSIsImFwcGxpY2F0aW9uSWQiLCJsb2NhdGlvbklkIiwiaW5wdXRDbGFzcyIsImlucHV0U3R5bGVzIiwiZm9udFNpemUiLCJjYXJkTnVtYmVyIiwiZWxlbWVudElkIiwicGxhY2Vob2xkZXIiLCJjdnYiLCJleHBpcmF0aW9uRGF0ZSIsInBvc3RhbENvZGUiLCJhcHBsZVBheSIsImNhbGxiYWNrcyIsIm1ldGhvZHNTdXBwb3J0ZWQiLCJtZXRob2RzIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsInN0eWxlIiwiZGlzcGxheSIsImNyZWF0ZVBheW1lbnRSZXF1ZXN0IiwicmVxdWVzdFNoaXBwaW5nQWRkcmVzcyIsImN1cnJlbmN5Q29kZSIsImNvdW50cnlDb2RlIiwidG90YWwiLCJsYWJlbCIsImFtb3VudCIsInBlbmRpbmciLCJsaW5lSXRlbXMiLCJjYXJkTm9uY2VSZXNwb25zZVJlY2VpdmVkIiwiZXJyb3JzIiwibm9uY2UiLCJjYXJkRGF0YSIsImZvckVhY2giLCJlcnJvciIsIm1lc3NhZ2UiLCJ2YWx1ZSIsInVuc3VwcG9ydGVkQnJvd3NlckRldGVjdGVkIiwiaW5wdXRFdmVudFJlY2VpdmVkIiwiaW5wdXRFdmVudCIsImV2ZW50VHlwZSIsInBheW1lbnRGb3JtTG9hZGVkIiwicmVxdWVzdENhcmROb25jZSIsImV2ZW50IiwicHJldmVudERlZmF1bHQiLCJidWlsZCIsImNvdXBvblN1Ym1pc3Npb25Db250cm9sbGVyIiwiY3JlYXRlTmV3QWNjb3VudENvbnRyb2xsZXIiLCJkZWZpbmVEZWxpdmVyeUFkZHJlc3NDb250cm9sbGVyIiwiZGVsaXZlclRvIiwiZGVsaXZlcnlEZXRhaWxzQ29udHJvbGxlciIsImNoYW5nZURldGFpbHMiLCJmZWF0dXJlZFByb2R1Y3RzQ29udHJvbGxlciIsIm1yUHJkY3RzQnRuIiwicHJvZHVjdFNlbGVjdGlvbkJ0biIsInByb2R1Y3ROYW1lIiwiZmVkZXhPcHRpb25zQ29udHJvbGxlciIsImZ1bGxQcm9kdWN0UHJvZmlsZUNvbnRyb2xsZXIiLCJpdGVtU2VsZWN0aW9ucyIsInNpemVzIiwiYWRkVG9DYXJ0Iiwic2l6ZSIsImFkZEl0ZW0iLCJhY3FNZXRoSXNEZWZpbmVkIiwiaGVyb0Jhbm5lckNvbnRyb2xsZXIiLCJwYXNzd29yZFJlc2V0Q29udHJvbGxlciIsImJhY2siLCJwaWNrdXBPckRlbGl2ZXJ5Q29udHJvbGxlciIsIm1ldGhvZCIsImRldGFpbHMiLCJwcmltYXJ5Q29udGVudENvbnRyb2xsZXIiLCJwcm9kdWN0U2l6ZVBpY2tlckNvbnRyb2xsZXIiLCJwcmRjdFRobWJubENvbnRyb2xsZXIiLCJzZWxlY3REZWxpdmVyeU1ldGhvZENvbnRyb2xsZXIiLCJzZWxlY3RQT3JEQ29udHJvbGxlciIsInNlbGVjdFBpY2t1cExvY2F0aW9uQ29udHJvbGxlciIsInNpemVRdHlTZWxlY3RvckNvbnRyb2xsZXIiLCJpbmNyaW1lbnQiLCJkZWNyaW1lbnQiLCIkd2F0Y2giLCJuZXdWYWx1ZSIsIm9sZFZhbHVlIiwiY29tcGxldGVkIiwidG9aaXBPbkRhdGVDb250cm9sbGVyIiwiemlwY29kZUZpbmRlciIsImFsZXJ0Iiwic3VibWl0WmlwIiwiY2hlY2t6aXBjb2RlIiwiZ29pbmdUbyIsInZpcElkZW50aWZpZWQiLCJ1cHNPcHRpb25zQ29udHJvbGxlciIsInVzZXJEYXNoYm9hcmRDb250cm9sbGVyIiwidXNwc09wdGlvbnNDb250cm9sbGVyIiwib3B0aW9ucyIsImNvbmZpZyIsIiRyb3V0ZVByb3ZpZGVyIiwid2hlbiIsInJlc29sdmUiLCJhdXRoZW50aWNhdGlvbiIsIlByb21pc2UiLCJyZWplY3QiLCJrZXkiLCIkcm91dGUiLCJjdXJyZW50IiwicGFyYW1zIiwiZ2V0IiwicHJkY3RJZCIsIiRodHRwIiwidXJsIiwiJHdpbmRvdyIsIl9hZGROZXdJdGVtIiwibmV3SXRlbSIsInJldHVybk9iamVjdCIsIk9iamVjdCIsImtleXMiLCJfY291bnROb0l0ZW1zIiwiYWxsSXRlbXMiLCJzZWxmIiwibmV3VG90YWwiLCJpc0VtcHR5IiwiX2NhbGNTdWJ0b3RhbCIsInByaWNlIiwib3JkZXJOdW1iZXIiLCJub09mSXRlbXMiLCJzaGlwcGluZ1ByaWNlIiwiZGlzY291bnRzIiwidG90YWxDb3N0IiwiZGVsWmlwSWRlbnRpZmllZCIsImRlbERhdGVJZGVudGlmaWVkIiwic2hpcHBlZE9yUFVTZWxlY3RlZCIsIndpbGxTaGlwcHAiLCJ3aWxsUFUiLCJwdUxvY1NlbGVjdGVkIiwiZGVsTXRoU2VsZWN0ZWQiLCJwaWNrdXBMb2NhdGlvbiIsImRlbGl2ZXJ5TWV0aG9kIiwicGF5bWVudERldGFpbHMiLCJpdGVtcyIsIl9zYXZlVG9Ccm93c2VyIiwic2Vzc2lvblN0b3JhZ2UiLCJzZXRJdGVtIiwiSlNPTiIsInN0cmluZ2lmeSIsIl9nZXRDYXJ0IiwiX3JlbW92ZUNhcnQiLCJpbml0IiwiZ2V0SXRlbSIsInNhdmVkQ2FydCIsInBhcnNlIiwiaXRtQ29kZSIsImNvZGUiLCJwcm9kdWN0SWQiLCJwYXJzZUludCIsInRlc3RPYmplY3QiLCJpbWFnZSIsInJhdGluZyIsInRpdGxlIiwib3oiLCJkZXNjcmlwdGlvbiIsImluZ3JlZGllbnRzIiwidXNlckF1dGhlbnRpY2F0aW9uIiwiX3NoaXBwaW5nUmVxdWVzdCIsIlBhY2thZ2VJRCIsIlNlcnZpY2UiLCJaaXBPcmlnaW5hdGlvbiIsIlppcERlc3RpbmF0aW9uIiwiUG91bmRzIiwiT3VuY2VzIiwiQ29udGFpbmVyIiwiU2l6ZSIsIldpZHRoIiwiTGVuZ3RoIiwiSGVpZ2h0IiwiR2lydGgiLCJWYWx1ZSIsIl9zaGlwcGluZ09wdGlvbnMiLCJ6b25lcyIsInBvc3RhZ2UiLCJfZ2VuZXJhbFBhcnNlIiwieG1sIiwiYWZ0ZXJDbnYiLCJYMkpTIiwieG1sX3N0cjJqc29uIiwiX2ZpbHRlclBvc3RhZ2VPcHRpb25zIiwiYWxsT3B0aW9ucyIsImZpbHRlcmVkT3B0aW9ucyIsInBhY2thZ2VMaXN0IiwiUmF0ZVY0UmVzcG9uc2UiLCJQYWNrYWdlIiwiY2xvc2VzdFppcCIsInpvbmUiLCJzZXJ2aWNlcyIsIlpvbmUiLCJtYWlsU2VydmljZSIsIlBvc3RhZ2UiLCJNYWlsU2VydmljZSIsInJhdGUiLCJSYXRlIiwicHVzaCIsIl9wYXJzZUNpdHlTdGF0ZVJlc3BvbnNlIiwiY2l0eVN0YXRlWE1MIiwiZW5kQ2l0eVNwbGl0Iiwic3BsaXQiLCJlbmRTdGF0ZVNwbGl0IiwiZ2V0U2hpcHBpbmdSZXF1ZXN0Iiwic2hpcHBpbmdSZXF1ZXN0IiwiX3Bvc3RhZ2UiLCJwYWNrYWdlU2l6ZSIsIm9wdGlvbkNvdW50Iiwic2VydmljZVR5cGUiLCJkYXRhSnNvbk9iamVjdCIsImFsbFBvc3RhZ2VPcHRpb25zIiwiYWhOdXRzIiwiYW5ndWxhciIsIm1vZHVsZSIsInJ1biIsInJvb3QiLCJmYWN0b3J5IiwiZGVmaW5lIiwiYW1kIiwiZXhwb3J0cyIsImdldE5vZGVMb2NhbE5hbWUiLCJub2RlIiwibm9kZUxvY2FsTmFtZSIsImxvY2FsTmFtZSIsImJhc2VOYW1lIiwibm9kZU5hbWUiLCJnZXROb2RlUHJlZml4IiwicHJlZml4IiwiZXNjYXBlWG1sQ2hhcnMiLCJzdHIiLCJjaGVja0luU3RkRmlsdGVyc0FycmF5Rm9ybSIsInN0ZEZpbHRlcnNBcnJheUZvcm0iLCJvYmoiLCJpZHgiLCJsZW5ndGgiLCJmaWx0ZXJQYXRoIiwiUmVnRXhwIiwidG9BcnJheUFjY2Vzc0Zvcm0iLCJjaGlsZE5hbWUiLCJhcnJheUFjY2Vzc0Zvcm0iLCJBcnJheSIsImFycmF5QWNjZXNzRm9ybVBhdGhzIiwiZnJvbVhtbERhdGVUaW1lIiwicHJvcCIsImJpdHMiLCJkIiwiRGF0ZSIsInNlY29uZEJpdHMiLCJzZXRIb3VycyIsInNldE1pbGxpc2Vjb25kcyIsIm9mZnNldE1pbnV0ZXMiLCJOdW1iZXIiLCJzZXRNaW51dGVzIiwiZ2V0TWludXRlcyIsImdldFRpbWV6b25lT2Zmc2V0IiwiaW5kZXhPZiIsIlVUQyIsImdldEZ1bGxZZWFyIiwiZ2V0TW9udGgiLCJnZXREYXRlIiwiZ2V0SG91cnMiLCJnZXRTZWNvbmRzIiwiZ2V0TWlsbGlzZWNvbmRzIiwiY2hlY2tGcm9tWG1sRGF0ZVRpbWVQYXRocyIsImZ1bGxQYXRoIiwiZGF0ZXRpbWVBY2Nlc3NGb3JtUGF0aHMiLCJjaGVja1htbEVsZW1lbnRzRmlsdGVyIiwiY2hpbGRUeXBlIiwiY2hpbGRQYXRoIiwiRE9NTm9kZVR5cGVzIiwiRUxFTUVOVF9OT0RFIiwieG1sRWxlbWVudHNGaWx0ZXIiLCJwYXJzZURPTUNoaWxkcmVuIiwibm9kZVR5cGUiLCJET0NVTUVOVF9OT0RFIiwicmVzdWx0Iiwibm9kZUNoaWxkcmVuIiwiY2hpbGROb2RlcyIsImNpZHgiLCJjaGlsZCIsIl9fY250IiwiQ09NTUVOVF9OT0RFIiwiYWlkeCIsImF0dHJpYnV0ZXMiLCJhdHRyaWJ1dGVQcmVmaXgiLCJub2RlUHJlZml4IiwiX19wcmVmaXgiLCJfX3RleHQiLCJqb2luIiwic3RyaXBXaGl0ZXNwYWNlcyIsInRyaW0iLCJfX2NkYXRhIiwiZW1wdHlOb2RlRm9ybSIsImtlZXBDRGF0YSIsInNraXBFbXB0eVRleHROb2Rlc0Zvck9iaiIsImVuYWJsZVRvU3RyaW5nRnVuYyIsInRvU3RyaW5nIiwiVEVYVF9OT0RFIiwiQ0RBVEFfU0VDVElPTl9OT0RFIiwibm9kZVZhbHVlIiwic3RhcnRUYWciLCJqc29uT2JqIiwiZWxlbWVudCIsImF0dHJMaXN0IiwiY2xvc2VkIiwicmVzdWx0U3RyIiwiYXR0ck5hbWUiLCJhdHRyVmFsIiwiZXNjYXBlTW9kZSIsInN1YnN0ciIsInVzZURvdWJsZVF1b3RlcyIsImVuZFRhZyIsImVsZW1lbnROYW1lIiwiZW5kc1dpdGgiLCJzdWZmaXgiLCJqc29uWG1sU3BlY2lhbEVsZW0iLCJqc29uT2JqRmllbGQiLCJGdW5jdGlvbiIsImpzb25YbWxFbGVtQ291bnQiLCJlbGVtZW50c0NudCIsIml0IiwiY2hlY2tKc29uT2JqUHJvcGVydGllc0ZpbHRlciIsInByb3BlcnR5TmFtZSIsImpzb25PYmpQYXRoIiwianNvblByb3BlcnRpZXNGaWx0ZXIiLCJwYXJzZUpTT05BdHRyaWJ1dGVzIiwiYWl0IiwicGFyc2VKU09OVGV4dEF0dHJzIiwianNvblR4dE9iaiIsInBhcnNlSlNPTlRleHRPYmplY3QiLCJnZXRKc29uUHJvcGVydHlQYXRoIiwianNvblByb3BOYW1lIiwicGFyc2VKU09OQXJyYXkiLCJqc29uQXJyUm9vdCIsImpzb25BcnJPYmoiLCJhcklkeCIsInBhcnNlSlNPTk9iamVjdCIsInN1Yk9iaiIsInRvSVNPU3RyaW5nIiwicGFyc2VYbWxTdHJpbmciLCJ4bWxEb2NTdHIiLCJpc0lFUGFyc2VyIiwid2luZG93IiwiQWN0aXZlWE9iamVjdCIsInhtbERvYyIsIkRPTVBhcnNlciIsInBhcnNlciIsInBhcnNlcmVycm9yTlMiLCJwYXJzZUZyb21TdHJpbmciLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsIm5hbWVzcGFjZVVSSSIsImVyciIsImdldEVsZW1lbnRzQnlUYWdOYW1lTlMiLCJhc3luYyIsImxvYWRYTUwiLCJhc0FycmF5IiwidG9YbWxEYXRlVGltZSIsImR0IiwiYXNEYXRlVGltZSIsInhtbDJqc29uIiwianNvbjJ4bWxfc3RyIiwianNvbjJ4bWwiLCJnZXRWZXJzaW9uIiwiYWhIZWFkZXIiLCJhaEZvb3RlciIsImNhcnRJdGVtc0xpc3QiLCJjYXJ0TmF2aWdhdGlvbiIsImNhcnRTdW1tYXJ5IiwiY2hlY2tvdXRCaWxsaW5nIiwiY2hlY2tvdXRGb2xsb3d1cCIsImNoZWNrb3V0UGF5bWVudCIsImNvdXBvblN1Ym1pc3Npb24iLCJjcmVhdGVOZXdBY2NvdW50IiwiZGVmaW5lRGVsaXZlcnlBZGRyZXNzIiwiZGVsaXZlcnlEZXRhaWxzIiwiZmVhdHVyZWRQcm9kdWN0cyIsImZlZGV4T3B0aW9ucyIsImZ1bGxQcm9kdWN0UHJvZmlsZSIsImhlcm9CYW5uZXIiLCJwYXNzd29yZFJlc2V0IiwicGlja3VwT3JEZWxpdmVyeSIsInByaW1hcnlDb250ZW50IiwicHJvZHVjdFNpemVQaWNrZXIiLCJwcmRjdFRobWJubCIsInNlbGVjdERlbGl2ZXJ5TWV0aG9kIiwic2VsZWN0UE9yRCIsInNlbGVjdFBpY2t1cExvY2F0aW9uIiwic2l6ZVF0eVNlbGVjdG9yIiwidG9aaXBPbkRhdGUiLCJ1cHNPcHRpb25zIiwidXNlckRhc2hib2FyZCIsInNlcnZpY2UiXSwibWFwcGluZ3MiOiJBQU9BLFNBQUFBLG1CQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxHQUdBLElBQUFDLEVBQUFDLEtBQ0FELEVBQUFFLFFBQUFILEVBS0FDLEVBQUFHLFdBQUEsV0FDQUwsRUFBQU0sS0FBQSxNQ1ZBLFNBQUFDLG1CQUFBVCxFQUFBQyxFQUFBQyxHQUdBLElBQUFFLEVBQUFDLEtBR0FELEVBQUFNLGdCQUFBLEVBQ0FOLEVBQUFPLGdCQUFBLEVBR0FYLEVBQUFZLEtBQUEsOEJBR0EsU0FBQUMsR0FHQSxpQkFBQUEsR0FBQSxrQkFBQUEsRUFHQSxrQkFBQUEsSUFBQVQsRUFBQU8sZ0JBQUEsR0FLQVAsRUFBQU0sZ0JBQUEsRUFNQUksQ0FBQWIsRUFBQWMsT0M5QkEs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QUNBQyxPQUFBLFVBQ0E3UCxVQUFBLGdCQUFBbWEsZUNGQXZLLFFBQ0FDLE9BQUEsVUFDQTdQLFVBQUEsbUJBQUFvYSxrQkNGQXhLLFFBQ0FDLE9BQUEsVUFDQTdQLFVBQUEsaUJBQUFxYSxnQkNGQXpLLFFBQ0FDLE9BQUEsVUFDQTdQLFVBQUEsb0JBQUFzYSxtQkNGQTFLLFFBQ0FDLE9BQUEsVUFDQTdQLFVBQUEsY0FBQXVhLGFDRkEzSyxRQUNBQyxPQUFBLFVBQ0E3UCxVQUFBLHVCQUFBd2Esc0JDRkE1SyxRQUNBQyxPQUFBLFVBQ0E3UCxVQUFBLGFBQUF5YSxZQ0ZBN0ssUUFDQUMsT0FBQSxVQUNBN1AsVUFBQSx1QkFBQTBhLHNCQ0ZBOUssUUFDQUMsT0FBQSxVQUNBN1AsVUFBQSxrQkFBQTJhLGlCQ0ZBL0ssUUFDQUMsT0FBQSxVQUNBN1AsVUFBQSxjQUFBNGEsYUNGQWhMLFFBQ0FDLE9BQUEsVUFDQTdQLFVBQUEsYUFBQTZhLFlDRkFqTCxRQUNBQyxPQUFBLFVBQ0E3UCxVQUFBLGdCQUFBOGEsZUNGQWxMLFFBQ0FDLE9BQUEsVUFDQTdQLFVBQUEsY0FBQXZCLGFDVEFtUixRQUNBQyxPQUFBLFVBQ0F4SCxPQUFBQSxRQ0ZBdUgsUUFDQUMsT0FBQSxVQUNBRyxRQUFBLGVBQUEzVCxjQUVBQSxhQUFBbUUsU0FBQSxPQUFBLFNDSkFvUCxRQUNBQyxPQUFBLFVBQ0FHLFFBQUEsZUFBQW5VLGNBRUFBLGFBQUEyRSxTQUFBLE9BQUEsUUFBQSxXQ0pBb1AsUUFDQUMsT0FBQSxVQUNBRyxRQUFBLGFBQUFoRSxZQUVBQSxXQUFBeEwsU0FBQSxRQ0pBb1AsUUFDQUMsT0FBQSxVQUNBa0wsUUFBQSxxQkFBQXhPLG9CQUVBQSxtQkFBQS9MLFNBQUEsUUFBQSxXQ0pBb1AsUUFDQUMsT0FBQSxVQUNBRyxRQUFBLGVBQUFyUyxjQUVBQSxhQUFBNkMsU0FBQSxPQUFBIiwiZmlsZSI6ImJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImFuZ3VsYXJcbiAgICAubW9kdWxlKCdhaE51dHMnKVxuICAgIC5jb250cm9sbGVyKCdhUHJvZHVjdENvbnRyb2xsZXInLCBhUHJvZHVjdENvbnRyb2xsZXIpO1xuXG5hUHJvZHVjdENvbnRyb2xsZXIuJGluamVjdCA9IFsnJGxvZycsICckcm91dGVQYXJhbXMnLCAnJGxvY2F0aW9uJywgJ2FQcm9kdWN0J107XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gYVByb2R1Y3RDb250cm9sbGVyKCRsb2csICRyb3V0ZVBhcmFtcywgJGxvY2F0aW9uLCBhUHJvZHVjdCkge1xuXG5cdC8vZGVmaW5lIHZpZXcgbW9kZWwgdmFyaWFibGVcblx0dmFyIHZtID0gdGhpcztcblx0dm0ucHJvZHVjdCA9IGFQcm9kdWN0O1xuXHQvL3ZtLnByZGN0SWQgPSAkcm91dGVQYXJhbXMucHJkY3RJZDtcblxuXHQvLyRsb2cuaW5mbygnaW4gdGhlIFByb2R1Y3QgY29udHJvbGxlcicsIHZtLnByZGN0SWQpO1x0Ly9UT0RPOiBUQUtFIFRISVMgT1VUIExBVEVSXG5cblx0dm0ucmV0dXJuSG9tZSA9IGZ1bmN0aW9uKCkge1xuXHRcdCRsb2NhdGlvbi5wYXRoKCcvJyk7XG5cdH07XG59IiwiYW5ndWxhclxuICAgIC5tb2R1bGUoJ2FoTnV0cycpXG4gICAgLmNvbnRyb2xsZXIoJ2FjY291bnRzQ29udHJvbGxlcicsIGFjY291bnRzQ29udHJvbGxlcik7XG5cbmFjY291bnRzQ29udHJvbGxlci4kaW5qZWN0ID0gWyckbG9nJywgJyRyb3V0ZVBhcmFtcycsICckbG9jYXRpb24nXTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBhY2NvdW50c0NvbnRyb2xsZXIoJGxvZywgJHJvdXRlUGFyYW1zLCAkbG9jYXRpb24pIHtcblxuXHQvL2RlZmluZSB2aWV3IG1vZGVsIHZhcmlhYmxlXG5cdHZhciB2bSA9IHRoaXM7XG5cblx0Ly9kZWZpbmUgdmlldyBtb2RlbCB2YXJpYWJsZVxuXHR2bS5yZWdpc3RlcmVkVXNlciA9IGZhbHNlO1x0Ly9kZWZhdWx0IHRvIGZhbHNlXG5cdHZtLmZvcmdvdFBhc3N3b3JkID0gZmFsc2U7XHQvL2RlZmF1bHQgdG8gZmFsc2VcblxuXHQvL25vdGlmeSB1cyBvZiB0aGUgbG9jYXRpb25cblx0JGxvZy5pbmZvKCdpbiB0aGUgYWNjb3VudHMgY29udHJvbGxlcicpO1x0Ly9UT0RPOiBUQUtFIFRISVMgT1VUIExBVEVSXG5cblx0Ly9jaGVjayB0aGUgcGFyYW1zXG5cdGZ1bmN0aW9uIHVzZXJDaGVjayh1c2VySWQpIHtcblxuXHRcdC8vY2hlY2sgdGhlIGNyZWRlbnRpYWxzXG5cdFx0aWYodXNlcklkID09ICdDcmVhdGVQcm9maWxlJyB8fCB1c2VySWQgPT0gJ0ZvcmdvdFBhc3N3b3JkJykge1xuXG5cdFx0XHQvL2lmIGl0J3MganVzdCBhIGZvcmdvdHRlbiBwYXNzd29yZCBnbyB0aGVyZVxuXHRcdFx0aWYodXNlcklkID09ICdGb3Jnb3RQYXNzd29yZCcpIHZtLmZvcmdvdFBhc3N3b3JkID0gdHJ1ZTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vaWYgdGhleSBhcmUgbm90IGNyZWF0aW5nIGEgbmV3IHByb2ZpbGUsIGNoZWNrIGNyZWRlbnRpYWxzXG5cdFx0XHR2bS5yZWdpc3RlcmVkVXNlciA9IHRydWU7XG5cblx0XHR9O1xuXG5cdH07XG5cblx0dXNlckNoZWNrKCRyb3V0ZVBhcmFtcy5wYXJhbSk7XG59IiwiYW5ndWxhclxuICAgIC5tb2R1bGUoJ2FoTnV0cycpXG4gICAgLmNvbnRyb2xsZXIoJ2FsbFByb2R1Y3RzQ29udHJvbGxlcicsIGFsbFByb2R1Y3RzQ29udHJvbGxlcik7XG5cbmFsbFByb2R1Y3RzQ29udHJvbGxlci4kaW5qZWN0ID0gWyckbG9nJywgJyRyb3V0ZVBhcmFtcycsICckbG9jYXRpb24nLCAncHJvZHVjdExpc3QnXTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBhbGxQcm9kdWN0c0NvbnRyb2xsZXIoJGxvZywgJHJvdXRlUGFyYW1zLCAkbG9jYXRpb24sIHByb2R1Y3RMaXN0KSB7XG5cblx0Ly9kZWZpbmUgdmlldyBtb2RlbCB2YXJpYWJsZVxuXHR2YXIgdm0gPSB0aGlzO1xuXHR2bS5hbGxQcm9kdWN0cyA9IHByb2R1Y3RMaXN0O1xuXHRcblx0aWYoJHJvdXRlUGFyYW1zLmZpbHRlciAhPSB1bmRlZmluZWQpIHZtLnNlbGVjdGVkUHJvZHVjdHMgPSAkcm91dGVQYXJhbXMuZmlsdGVyO1xuXG5cdC8vJGxvZy5pbmZvKCdpbiB0aGUgYWxsIFByb2R1Y3RzIGNvbnRyb2xsZXInLCAkcm91dGVQYXJhbXMpO1x0Ly9UT0RPOiBUQUtFIFRISVMgT1VUIExBVEVSXG5cdC8vJGxvZy5pbmZvKCdnb3QgdGhpcyBwcmR1Y3QgbGlzdCcsIHByb2R1Y3RMaXN0KTtcblxuXHQvL3NvbWV0aGluZ1xuXHR2bS5zZWxlY3RBUHJvdWN0ID0gZnVuY3Rpb24ocHJkY3RDb2RlKSB7XG5cdFx0dmFyIHBhdGggPSAnL3Byb2R1Y3QvJyArIHByZGN0Q29kZTtcblxuXHRcdCRsb2NhdGlvbi5wYXRoKHBhdGgpLnNlYXJjaCgnZmlsdGVyJywgbnVsbCk7XG5cdH07XG5cbn0iLCJhbmd1bGFyXG4gICAgLm1vZHVsZSgnYWhOdXRzJylcbiAgICAuY29udHJvbGxlcignY2FydENvbnRyb2xsZXInLCBjYXJ0Q29udHJvbGxlcik7XG5cbmNhcnRDb250cm9sbGVyLiRpbmplY3QgPSBbJyRsb2cnLCAnJHJvdXRlUGFyYW1zJywgJyRsb2NhdGlvbicsICdzaG9wcGluZ0NhcnQnXTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBjYXJ0Q29udHJvbGxlcigkbG9nLCAkcm91dGVQYXJhbXMsICRsb2NhdGlvbiwgc2hvcHBpbmdDYXJ0KSB7XG5cblx0Ly9kZWZpbmUgdmlldyBtb2RlbCB2YXJpYWJsZVxuXHR2YXIgdm0gPSB0aGlzO1xuXHR2bS5jYXJ0ID0gc2hvcHBpbmdDYXJ0O1xuXG5cdCRsb2cuaW5mbygnaW4gdGhlIGNhcnQgY29udHJvbGxlcicsIHZtLmNhcnQpO1x0Ly9UT0RPOiBUQUtFIFRISVMgT1VUIExBVEVSXG5cblx0Ly9jYWxjdWxhdGUgdGhlIHRvdGFsIGNvc3Qgd2hlbiB0aGUgY29udHJvbGxlciBpcyBsb2FkZWRcblx0dm0uY2FydC5jYWxjVG90YWxDb3N0KCk7XG5cbn0iLCJhbmd1bGFyXG4gICAgLm1vZHVsZSgnYWhOdXRzJylcbiAgICAuY29udHJvbGxlcignY2hlY2tvdXRDb250cm9sbGVyJywgY2hlY2tvdXRDb250cm9sbGVyKTtcblxuY2hlY2tvdXRDb250cm9sbGVyLiRpbmplY3QgPSBbJyRsb2cnLCAnJHJvdXRlUGFyYW1zJywgJyRsb2NhdGlvbicsICdzcXVhcmVDcmVkcycsICdzaG9wcGluZ0NhcnQnXTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBjaGVja291dENvbnRyb2xsZXIoJGxvZywgJHJvdXRlUGFyYW1zLCAkbG9jYXRpb24sIHNxdWFyZUNyZWRzLCBzaG9wcGluZ0NhcnQpIHtcblxuXHQvL2RlZmluZSB2aWV3IG1vZGVsIHZhcmlhYmxlXG5cdHZhciB2bSA9IHRoaXM7XG5cdHZtLmNhcnQgPSBzaG9wcGluZ0NhcnQ7XG5cdHZtLnNxdWFyZUNyZWRzID0gc3F1YXJlQ3JlZHM7XG5cblx0JGxvZy5pbmZvKCdpbiB0aGUgY2hlY2tvdXQgY29udHJvbGxlcicpO1x0Ly9UT0RPOiBUQUtFIFRISVMgT1VUIExBVEVSXG5cblxuXHR2bS5iYWNrQnRuID0gZnVuY3Rpb24oKSB7ICRsb2NhdGlvbi5wYXRoKCcvY2FydCcpOyB9XG5cdHZtLnN1Ym1pdE9yZGVyID0gZnVuY3Rpb24oKSB7ICRsb2NhdGlvbi5wYXRoKCcvb3JkZXItY29uZmlybWF0aW9uLycgKyBcIlRFU1RJTkdcIik7IH1cbn0iLCJhbmd1bGFyXG4gICAgLm1vZHVsZSgnYWhOdXRzJylcbiAgICAuY29udHJvbGxlcignaW50ZXJuYWxBY3R0c0NvbnRyb2xsZXInLCBpbnRlcm5hbEFjdHRzQ29udHJvbGxlcik7XG5cbmludGVybmFsQWN0dHNDb250cm9sbGVyLiRpbmplY3QgPSBbJyRsb2cnLCAnJHJvdXRlUGFyYW1zJywgJyRsb2NhdGlvbicsICdkYXRhU2VydmljZXMnXTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBpbnRlcm5hbEFjdHRzQ29udHJvbGxlcigkbG9nLCAkcm91dGVQYXJhbXMsICRsb2NhdGlvbiwgZGF0YVNlcnZpY2VzKSB7XG5cblx0Ly9kZWZpbmUgdmlldyBtb2RlbCB2YXJpYWJsZVxuXHR2YXIgdm0gPSB0aGlzO1xuXHR2YXIgZGF0YSA9IGRhdGFTZXJ2aWNlcztcblxuXHQvL25vdGlmeSB1cyBvZiB0aGUgbG9jYXRpb25cblx0JGxvZy5pbmZvKCdpbiB0aGUgaW50ZXJuYWwgY29udHJvbGxlcicpO1x0Ly9UT0RPOiBUQUtFIFRISVMgT1VUIExBVEVSXG5cblx0dm0uc3VibWl0ID0gZnVuY3Rpb24oKSB7XG5cdFx0Y29uc29sZS5sb2coJ3N1Ym1pdHRpbmcnKTtcblx0XHRkYXRhLnBvc3QoJy9hcGkvc2hpZnRFYXJuaW5ncycsIHtcInRlc3RcIjpcInRlc3RcIn0pXG5cdFx0LnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcblx0XHRcdGNvbnNvbGUubG9nKCdnb3QgdGhpcyByZXNwb25zZScsIHJlc3BvbnNlKTtcblx0XHR9KTtcblx0fVxufVx0IiwiYW5ndWxhclxuICAgIC5tb2R1bGUoJ2FoTnV0cycpXG4gICAgLmNvbnRyb2xsZXIoJ2xhbmRpbmdDb250cm9sbGVyJywgbGFuZGluZ0NvbnRyb2xsZXIpO1xuXG5sYW5kaW5nQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCckbG9nJywgJyRyb3V0ZVBhcmFtcycsICckbG9jYXRpb24nLCAnZGF0YVNlcnZpY2VzJ107XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gbGFuZGluZ0NvbnRyb2xsZXIoJHNjb3BlLCAkbG9nLCAkcm91dGVQYXJhbXMsICRsb2NhdGlvbiwgZGF0YVNlcnZpY2VzKSB7XG5cblx0Ly9kZWZpbmUgdmlldyBtb2RlbCB2YXJpYWJsZVxuXHR2YXIgdm0gPSB0aGlzO1xuXHR2YXIgZGF0YSA9IGRhdGFTZXJ2aWNlcztcblxuXHQvLyRsb2cuaW5mbygnaW4gdGhlIGxhbmRpbmcgY29udHJvbGxlcicpO1x0Ly9UT0RPOiBUQUtFIFRISVMgT1VUIExBVEVSXG5cblx0Ly9kZWZpbmUgbG9jYWwgZnVuY3Rpb25zXG5cblx0Ly9ydW4gdGhlIHRlc3RcblxuXG59IiwiYW5ndWxhclxuICAgIC5tb2R1bGUoJ2FoTnV0cycpXG4gICAgLmNvbnRyb2xsZXIoJ2xvY2F0aW9uc0NvbnRyb2xsZXInLCBsb2NhdGlvbnNDb250cm9sbGVyKTtcblxubG9jYXRpb25zQ29udHJvbGxlci4kaW5qZWN0ID0gWyckbG9nJywgJyRyb3V0ZVBhcmFtcycsICckbG9jYXRpb24nXTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBsb2NhdGlvbnNDb250cm9sbGVyKCRsb2csICRyb3V0ZVBhcmFtcywgJGxvY2F0aW9uKSB7XG5cblx0Ly9kZWZpbmUgdmlldyBtb2RlbCB2YXJpYWJsZVxuXHR2YXIgdm0gPSB0aGlzO1xuXG5cdCRsb2cuaW5mbygnaW4gdGhlIGxvY2F0aW9ucyBjb250cm9sbGVyJyk7XHQvL1RPRE86IFRBS0UgVEhJUyBPVVQgTEFURVJcbn0iLCJhbmd1bGFyXG4gICAgLm1vZHVsZSgnYWhOdXRzJylcbiAgICAuY29udHJvbGxlcignbG9naW5Db250cm9sbGVyJywgbG9naW5Db250cm9sbGVyKTtcblxubG9naW5Db250cm9sbGVyLiRpbmplY3QgPSBbJyRsb2cnLCAnJHJvdXRlUGFyYW1zJywgJyRsb2NhdGlvbicsICdkYXRhU2VydmljZXMnXTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBsb2dpbkNvbnRyb2xsZXIoJGxvZywgJHJvdXRlUGFyYW1zLCAkbG9jYXRpb24sIGRhdGFTZXJ2aWNlcykge1xuXG5cdC8vZGVmaW5lIHZpZXcgbW9kZWwgdmFyaWFibGVcblx0dmFyIHZtID0gdGhpcztcblx0dmFyIGRhdGEgPSBkYXRhU2VydmljZXM7XG5cblx0JGxvZy5pbmZvKCdpbiB0aGUgbG9naW4gY29udHJvbGxlcicpO1x0Ly9UT0RPOiBUQUtFIFRISVMgT1VUIExBVEVSXG5cblx0Ly9kZWZpbmUgdmlldyBtb2RlbCB2YXJpYWJsZXNcblx0dm0uZW1haWwgPSAnJztcblx0dm0ucGFzc3dvcmQgPSAnJztcblxuXHQvL2RlZmluZSB2bSBmdW5jdGlvblxuXHR2bS5sb2dpbiA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0Ly91cG9uIGxvZ2luLCBhcmUgdGhlIGNyZWRlbnRhaWxzIGdvb2Rcblx0XHRkYXRhLnBvc3QoJy9hcGkvYXV0aGVudGljYXRlJywgeyBlbWFpbDogdm0uZW1haWwsIHBhc3M6IHZtLnBhc3N3b3JkIH0sJycpXG5cdFx0LnRoZW4oZnVuY3Rpb24odG9rZW4pIHtcblx0XHRcdFxuXHRcdFx0dmFyIHBhdGggPSAnIy90ZWFtTWVtYmVyLycgKyB0b2tlbjtcblxuXHRcdFx0Ly9zaG93IHdoYXQgcmV0dXJuZWRcblx0XHRcdCRsb2cuaW5mbygnZ290IHRoaXMgdG9rZW4gYmFjaycsIHBhdGgpO1xuXG5cdFx0XHQkbG9jYXRpb24ucGF0aCgnLycpO1x0Ly9UT0RPOiBXSFkgRE9FU04nVCBUSElTIFdPUks/XG5cblx0XHR9KTtcblx0XHRcblx0fTtcbn0iLCJhbmd1bGFyXG4gICAgLm1vZHVsZSgnYWhOdXRzJylcbiAgICAuY29udHJvbGxlcignbWFpbkNvbnRyb2xsZXInLCBtYWluQ29udHJvbGxlcik7XG5cbm1haW5Db250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsJyRsb2cnLCAnJHJvdXRlUGFyYW1zJywgJyRsb2NhdGlvbiddO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIG1haW5Db250cm9sbGVyKCRzY29wZSwgJGxvZywgJHJvdXRlUGFyYW1zLCAkbG9jYXRpb24pIHtcblxuXHQvL2RlZmluZSB2aWV3IG1vZGVsIHZhcmlhYmxlXG5cdHZhciB2bSA9IHRoaXM7XG5cdFxuXHQkc2NvcGUudGVhbU1lbWJlciA9IGZhbHNlO1xuXG5cdC8vJGxvZy5pbmZvKCdpbiB0aGUgbWFpbiBjb250cm9sbGVyJyk7XHQvL1RPRE86IFRBS0UgVEhJUyBPVVQgTEFURVJcbn0iLCJhbmd1bGFyXG4gICAgLm1vZHVsZSgnYWhOdXRzJylcbiAgICAuY29udHJvbGxlcignb3JkZXJDb25maXJtYXRpb25Db250cm9sbGVyJywgb3JkZXJDb25maXJtYXRpb25Db250cm9sbGVyKTtcblxub3JkZXJDb25maXJtYXRpb25Db250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsJyRsb2cnLCAnJHJvdXRlUGFyYW1zJywgJyRsb2NhdGlvbiddO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIG9yZGVyQ29uZmlybWF0aW9uQ29udHJvbGxlcigkc2NvcGUsICRsb2csICRyb3V0ZVBhcmFtcywgJGxvY2F0aW9uKSB7XG5cblx0Ly9kZWZpbmUgdmlldyBtb2RlbCB2YXJpYWJsZVxuXHR2YXIgdm0gPSB0aGlzO1xuXG5cdCRsb2cuaW5mbygnaW4gdGhlIG9yZGVyIGNvbmZpcm1hdGlvbiBjb250cm9sbGVyJyk7XHQvL1RPRE86IFRBS0UgVEhJUyBPVVQgTEFURVJcbn0iLCJhbmd1bGFyXG4gICAgLm1vZHVsZSgnYWhOdXRzJylcbiAgICAuY29udHJvbGxlcigncHJvZHVjdEdldHRpbmdDb250cm9sbGVyJywgcHJvZHVjdEdldHRpbmdDb250cm9sbGVyKTtcblxucHJvZHVjdEdldHRpbmdDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsICckbG9nJywgJyRyb3V0ZVBhcmFtcycsICckbG9jYXRpb24nLCAnc2hvcHBpbmdDYXJ0JywgJ3VzcHNTZXJ2aWNlcycsICd1c3BzVXNlcm5hbWUnXTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBwcm9kdWN0R2V0dGluZ0NvbnRyb2xsZXIoJHNjb3BlLCAkbG9nLCAkcm91dGVQYXJhbXMsICRsb2NhdGlvbiwgc2hvcHBpbmdDYXJ0LCB1c3BzU2VydmljZXMsIHVzcHNVc2VybmFtZSkge1xuXG5cdC8vZGVmaW5lIHZpZXcgbW9kZWwgdmFyaWFibGVcblx0dmFyIHZtID0gdGhpcztcblx0dm0ucHJvZHVjdCA9ICRyb3V0ZVBhcmFtcy5pdGVtO1xuXHR2bS5jYXJ0ID0gc2hvcHBpbmdDYXJ0O1xuXHR2bS51c3BzID0gdXNwc1NlcnZpY2VzO1xuXHR2bS51c3BzLl91c3BzVXNlcm5hbWUgPSB1c3BzVXNlcm5hbWU7XG5cblx0dm0udXNwcy5wcmljZUNhbGN1bGF0b3Ioe1xuXHRcdGw6IDUsXG5cdFx0dzogNSxcblx0XHRoOiA1LFxuXHRcdHppcGNvZGU6IFwiNDkwMDFcIixcblx0XHRwb3VuZHM6IDEsXG5cdFx0b3VuY2VzOiA4LFxuXHRcdGNvbnRhaW5lcjogXCJWQVJJQUJMRVwiXG5cdH0pLnRoZW4oZnVuY3Rpb24gc3VjY2VzcyhzKSB7XG5cdFx0XG5cdFx0Y29uc29sZS5sb2coJ2dvdCB0aGlzIGJhY2snLCBzKTtcblx0XHRcblx0XHR2bS51c3BzT3B0aW9ucyA9IHM7XG5cdFx0JHNjb3BlLiRhcHBseSgpO1xuXG5cdH0pLmNhdGNoKGZ1bmN0aW9uIGVycm9yKGUpIHtcblx0XHRjb25zb2xlLmxvZygnZXJyb3InLCBlKTtcblx0fSk7XG5cblx0Ly8kbG9nLmluZm8oJ2luIHRoZSBwcm9kdWN0IGdldHRpbmcgY29udHJvbGxlcicsIHZtLnByb2R1Y3QpO1x0Ly9UT0RPOiBUQUtFIFRISVMgT1VUIExBVEVSXG5cblx0dm0ub3JkZXIgPSBmdW5jdGlvbigpIHtcblx0XHQvL3NhdmUgdGhlIGFkZHJlc3Ncblx0XHR2bS5jYXJ0LnVwZGF0ZUFxdWlzaXRpb25NZXRob2QoKTtcblxuXHRcdC8vVE9ETzogQ0hBTkdFIFRISVMgTEFURVJcblx0XHR2bS5jYXJ0LmFxdWlzaXRpb25NZXRob2QgPSAnZGVsaXZlcnknO1xuXG5cdFx0Ly90aGVuIHJlZGlyZWN0XG5cdFx0JGxvY2F0aW9uLnBhdGgoJy9jYXJ0Jyk7XG5cdH07XG5cblx0Lypcblx0Klx0Q2l0eSBTdGF0ZSBMb29rdXBcblx0KlxuXHQqL1xuXHR2bS5jaXR5U3RhdGVMb29rdXAgPSBmdW5jdGlvbigpIHtcblx0XHQvL2RlZmluZSBsb2NhbCB2YXJpYWJsZXNcblxuXHRcdHVzcHNTZXJ2aWNlcy5jaXR5U3RhdGVMb29rdXAodm0uY2FydC5hcXVpc2l0aW9uRGV0YWlscy5kZWxpdmVyeUxvY2F0aW9uLnppcClcblx0XHQudGhlbihmdW5jdGlvbiBzdWNjZXNzKGNpdHlTdGF0ZU9iamVjdCkge1xuXG5cdFx0XHQvL3NhdmUgdGhlIHZhbHVlc1xuXHRcdFx0dm0uY2FydC5hcXVpc2l0aW9uRGV0YWlscy5kZWxpdmVyeUxvY2F0aW9uLmNpdHkgPSBjaXR5U3RhdGVPYmplY3QuY2l0eTtcblx0XHRcdHZtLmNhcnQuYXF1aXNpdGlvbkRldGFpbHMuZGVsaXZlcnlMb2NhdGlvbi5zdGF0ZSA9IGNpdHlTdGF0ZU9iamVjdC5zdGF0ZTtcblxuXHRcdH0pLmNhdGNoKGZ1bmN0aW9uIGVycm9yKGUpIHtcblxuXHRcdFx0Ly9kaXNwbGF5IGFuIGVycm9yIG1lc3NhZ2Vcblx0XHRcdGNvbnNvbGUubG9nKCdlcnJvcjonLCBlKTtcblx0XHRcdFxuXHRcdH0pO1xuXG5cdH07XG5cbn0iLCJhbmd1bGFyXG4gICAgLm1vZHVsZSgnYWhOdXRzJylcbiAgICAuY29udHJvbGxlcigncmVnaXN0ZXJBY2N0Q29udHJvbGxlcicsIHJlZ2lzdGVyQWNjdENvbnRyb2xsZXIpO1xuXG5yZWdpc3RlckFjY3RDb250cm9sbGVyLiRpbmplY3QgPSBbJyRsb2cnLCAnJHJvdXRlUGFyYW1zJywgJyRsb2NhdGlvbiddO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIHJlZ2lzdGVyQWNjdENvbnRyb2xsZXIoJGxvZywgJHJvdXRlUGFyYW1zLCAkbG9jYXRpb24pIHtcblxuXHQvL2RlZmluZSB2aWV3IG1vZGVsIHZhcmlhYmxlXG5cdHZhciB2bSA9IHRoaXM7XG5cblx0Y29uc29sZS5sb2coJ2luIHRoZSByZWdpc3RlckFjY3RDb250cm9sbGVyICcpO1xuXG59IiwiLyogYWhIZWFkZXIuZGlyZWN0aXZlLmpzICovXG5cbi8qKlxuKiBAZGVzYyB0b29sYmFyIGRpcmVjdGl2ZSB0aGF0IGlzIHVzZWQgb24gdGhlIG1haW4gcGFnZSBhY3Jvc3MgdGhlIGVudGlyZSBhcHAuXG4qIEBleGFtcGxlIDxkaXYgYWgtaGVhZGVyPjwvZGl2PlxuKi9cblxuYW5ndWxhclxuXHQubW9kdWxlKCdhaE51dHMnKVxuXHQuZGlyZWN0aXZlKCdhaEhlYWRlcicsIGFoSGVhZGVyKTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBhaEhlYWRlcigpIHtcblx0dmFyIGRpcmVjdGl2ZSA9IHtcblx0XHRyZXN0cmljdDogJ0FFQ00nLFxuXHRcdHRlbXBsYXRlVXJsOiAndmlld3MvZGlyZWN0aXZlcy9haC5oZWFkZXIuZGlyZWN0aXZlLmh0bScsXG5cdFx0cmVwbGFjZTogdHJ1ZSxcblx0XHRzY29wZToge30sXG5cdFx0bGluazogbGlua0Z1bmMsXG5cdFx0Y29udHJvbGxlcjogYWhIZWFkZXJDb250cm9sbGVyLFxuXHRcdGNvbnRyb2xsZXJBczogJ3ZtJyxcblx0XHRiaW5kVG9Db250cm9sbGVyOiB0cnVlXG5cdH1cblxuXHQvKiBAbmdJbmplY3QgKi9cblx0ZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsLCBhdHRyLCBjdHJsKSB7XG4gICAgfVxuXG4gICAgYWhIZWFkZXJDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsICckbG9nJywgJyRsb2NhdGlvbicsICdzaG9wcGluZ0NhcnQnXTtcbiAgICAvKiBAbmdJbmplY3QgKi9cbiAgICBmdW5jdGlvbiBhaEhlYWRlckNvbnRyb2xsZXIoJHNjb3BlLCAkbG9nLCAkbG9jYXRpb24sIHNob3BwaW5nQ2FydCkge1xuXHQgICAgdmFyIHZtID0gdGhpcztcblx0ICAgIHZtLmNhcnQgPSBzaG9wcGluZ0NhcnQ7XG5cblx0ICAgIC8vJGxvZy5pbmZvKCdpbiB0aGUgaGVhZGVyIGRpcmVjdGl2ZScpO1xuXG5cdCAgICAvL2RlZmluZSB2aWV3bW9kZWwgZnVuY3Rpb25zXG5cdCAgICB2bS5uYXZibnQgPSBmdW5jdGlvbihidXR0b24pIHtcblxuXHQgICAgXHQvL3RlbGwgdXMgd2hpY2ggYnV0dG9uIHdhcyBjbGlja2VkXG5cdCAgICBcdCRsb2cuaW5mbygnY2xpY2tlZCcsIGJ1dHRvbik7XG5cblx0ICAgIFx0Ly90aGVuIHJlZGlyZWN0IHRoZXJlLCBpZiBub3QgdGhlIG1lbnUgYnV0dG9uXG5cdCAgICBcdGlmKGJ1dHRvbiAhPSAnbWVudScpIHtcblx0ICAgIFx0XHRcblx0ICAgIFx0XHQkbG9jYXRpb24ucGF0aCgnLycgKyBidXR0b24pO1xuXHQgICAgXHR9O1xuXHQgICAgXHRcblx0ICAgIH07XG5cblx0fVxuXG5cdHJldHVybiAgZGlyZWN0aXZlO1xufSIsIi8qIGFoRm9vdGVyLmRpcmVjdGl2ZS5qcyAqL1xuXG4vKipcbiogQGRlc2MgdG9vbGJhciBkaXJlY3RpdmUgdGhhdCBpcyB1c2VkIG9uIHRoZSBtYWluIHBhZ2UgYWNyb3NzIHRoZSBlbnRpcmUgYXBwLlxuKiBAZXhhbXBsZSA8ZGl2IGFoLWZvb3Rlcj48L2Rpdj5cbiovXG5cbmFuZ3VsYXJcblx0Lm1vZHVsZSgnYWhOdXRzJylcblx0LmRpcmVjdGl2ZSgnYWhGb290ZXInLCBhaEZvb3Rlcik7XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gYWhGb290ZXIoKSB7XG5cdHZhciBkaXJlY3RpdmUgPSB7XG5cdFx0cmVzdHJpY3Q6ICdBRUNNJyxcblx0XHR0ZW1wbGF0ZVVybDogJ3ZpZXdzL2RpcmVjdGl2ZXMvYWguZm9vdGVyLmRpcmVjdGl2ZS5odG0nLFxuXHRcdHJlcGxhY2U6IHRydWUsXG5cdFx0c2NvcGU6IHt9LFxuXHRcdGxpbms6IGxpbmtGdW5jLFxuXHRcdGNvbnRyb2xsZXI6IGFoRm9vdGVyQ29udHJvbGxlcixcblx0XHRjb250cm9sbGVyQXM6ICd2bScsXG5cdFx0YmluZFRvQ29udHJvbGxlcjogdHJ1ZVxuXHR9XG5cblx0LyogQG5nSW5qZWN0ICovXG5cdGZ1bmN0aW9uIGxpbmtGdW5jKHNjb3BlLCBlbCwgYXR0ciwgY3RybCkge1xuICAgIH1cblxuICAgIGFoRm9vdGVyQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGxvZyddO1xuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIGFoRm9vdGVyQ29udHJvbGxlcigkc2NvcGUsICRsb2cpIHtcblx0ICAgIHZhciB2bSA9IHRoaXM7XG5cblx0ICAgIC8vJGxvZy5pbmZvKCdpbiB0aGUgaGVhZGVyIGRpcmVjdGl2ZScpO1xuXG5cdH1cblxuXHRyZXR1cm4gIGRpcmVjdGl2ZTtcbn0iLCIvKiBjYXJ0SXRlbXNMaXN0LmRpcmVjdGl2ZS5qcyAqL1xuXG4vKipcbiogQGRlc2MgdG9vbGJhciBkaXJlY3RpdmUgdGhhdCBpcyB1c2VkIG9uIHRoZSBtYWluIHBhZ2UgYWNyb3NzIHRoZSBlbnRpcmUgYXBwLlxuKiBAZXhhbXBsZSA8ZGl2IGNhcnQtaXRlbXMtbGlzdD48L2Rpdj5cbiovXG5cbmFuZ3VsYXJcblx0Lm1vZHVsZSgnYWhOdXRzJylcblx0LmRpcmVjdGl2ZSgnY2FydEl0ZW1zTGlzdCcsIGNhcnRJdGVtc0xpc3QpO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIGNhcnRJdGVtc0xpc3QoKSB7XG5cdHZhciBkaXJlY3RpdmUgPSB7XG5cdFx0cmVzdHJpY3Q6ICdBRUNNJyxcblx0XHR0ZW1wbGF0ZVVybDogJ3ZpZXdzL2RpcmVjdGl2ZXMvY2FydEl0ZW1zTGlzdC5kaXJlY3RpdmUuaHRtJyxcblx0XHRyZXBsYWNlOiB0cnVlLFxuXHRcdHNjb3BlOiB7XG5cdFx0XHRjYXJ0SXRlbXM6ICc9J1xuXHRcdH0sXG5cdFx0bGluazogbGlua0Z1bmMsXG5cdFx0Y29udHJvbGxlcjogY2FydEl0ZW1zTGlzdENvbnRyb2xsZXIsXG5cdFx0Y29udHJvbGxlckFzOiAndm0nLFxuXHRcdGJpbmRUb0NvbnRyb2xsZXI6IHRydWVcblx0fVxuXG5cdC8qIEBuZ0luamVjdCAqL1xuXHRmdW5jdGlvbiBsaW5rRnVuYyhzY29wZSwgZWwsIGF0dHIsIGN0cmwpIHtcbiAgICB9XG5cbiAgICBjYXJ0SXRlbXNMaXN0Q29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGxvZycsICdzaG9wcGluZ0NhcnQnXTtcbiAgICAvKiBAbmdJbmplY3QgKi9cbiAgICBmdW5jdGlvbiBjYXJ0SXRlbXNMaXN0Q29udHJvbGxlcigkc2NvcGUsICRsb2csIHNob3BwaW5nQ2FydCkge1xuXHQgICAgdmFyIHZtID0gdGhpcztcblx0ICAgIHZhciBjYXJ0ID0gc2hvcHBpbmdDYXJ0O1xuXG5cdCAgICAkbG9nLmluZm8oJ2luIHRoZSBjYXJ0SXRlbXNMaXN0Q29udHJvbGxlciBkaXJlY3RpdmUnLCB2bS5jYXJ0SXRlbXMpO1xuXG5cdCAgICB2bS5yZW1vdmVJdGVtID0gZnVuY3Rpb24oaXRlbUlkKSB7XG5cdCAgICBcdGNvbnNvbGUubG9nKCdyZW1vdmluZyBpdGVtSWQnLCBpdGVtSWQpO1xuXG5cdCAgICBcdC8vcmVtb3ZlIHRoZSBpdGVtIGZyb20gdGhlIGNhcnRcblx0ICAgIFx0Y2FydC5yZW1vdmVJdGVtKGl0ZW1JZCk7XG5cdCAgICB9O1xuXG5cdCAgICB2bS51cGRhdGVRdHkgPSBmdW5jdGlvbihpdGVtSWQsIHF0eSkge1xuXHQgICAgXHRcblx0ICAgIFx0Ly91cGRhdGUgdGhlIGl0ZW0gcXR5XG5cdCAgICBcdGNhcnQudXBkYXRlSXRlbVF0eShpdGVtSWQsIHF0eSk7XG5cdCAgICB9XG5cblx0fVxuXG5cdHJldHVybiAgZGlyZWN0aXZlO1xufSIsIi8qIGNhcnROYXZpZ2F0aW9uLmRpcmVjdGl2ZS5qcyAqL1xuXG4vKipcbiogQGRlc2MgdG9vbGJhciBkaXJlY3RpdmUgdGhhdCBpcyB1c2VkIG9uIHRoZSBtYWluIHBhZ2UgYWNyb3NzIHRoZSBlbnRpcmUgYXBwLlxuKiBAZXhhbXBsZSA8ZGl2IGNhcnQtbmF2aWdhdGlvbj48L2Rpdj5cbiovXG5cbmFuZ3VsYXJcblx0Lm1vZHVsZSgnYWhOdXRzJylcblx0LmRpcmVjdGl2ZSgnY2FydE5hdmlnYXRpb24nLCBjYXJ0TmF2aWdhdGlvbik7XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gY2FydE5hdmlnYXRpb24oKSB7XG5cdHZhciBkaXJlY3RpdmUgPSB7XG5cdFx0cmVzdHJpY3Q6ICdBRUNNJyxcblx0XHR0ZW1wbGF0ZVVybDogJ3ZpZXdzL2RpcmVjdGl2ZXMvY2FydE5hdmlnYXRpb24uZGlyZWN0aXZlLmh0bScsXG5cdFx0cmVwbGFjZTogdHJ1ZSxcblx0XHRzY29wZToge30sXG5cdFx0bGluazogbGlua0Z1bmMsXG5cdFx0Y29udHJvbGxlcjogY2FydE5hdmlnYXRpb25Db250cm9sbGVyLFxuXHRcdGNvbnRyb2xsZXJBczogJ3ZtJyxcblx0XHRiaW5kVG9Db250cm9sbGVyOiB0cnVlXG5cdH1cblxuXHQvKiBAbmdJbmplY3QgKi9cblx0ZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsLCBhdHRyLCBjdHJsKSB7XG4gICAgfVxuXG4gICAgY2FydE5hdmlnYXRpb25Db250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsICckbG9nJywgJyRsb2NhdGlvbiddO1xuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIGNhcnROYXZpZ2F0aW9uQ29udHJvbGxlcigkc2NvcGUsICRsb2csICRsb2NhdGlvbikge1xuXHQgICAgdmFyIHZtID0gdGhpcztcblxuXHQgICAgJGxvZy5pbmZvKCdpbiB0aGUgY2FydCBuYXZpZ2F0aW9uIGRpcmVjdGl2ZScpO1xuXG5cdCAgICB2bS5zaG9wTW9yZSA9IGZ1bmN0aW9uKCkge1xuXHQgICAgXHQkbG9jYXRpb24ucGF0aCgnL2FsbC1wcm9kdWN0cycpO1xuXHQgICAgfVxuXHQgICAgdm0uY2hlY2tvdXQgPSBmdW5jdGlvbigpIHtcblx0ICAgIFx0JGxvY2F0aW9uLnBhdGgoJy9jaGVja291dCcpO1xuXHQgICAgfVxuXHR9XG5cblx0cmV0dXJuICBkaXJlY3RpdmU7XG59IiwiLyogY2FydFN1bW1hcnkuZGlyZWN0aXZlLmpzICovXG5cbi8qKlxuKiBAZGVzYyB0b29sYmFyIGRpcmVjdGl2ZSB0aGF0IGlzIHVzZWQgb24gdGhlIG1haW4gcGFnZSBhY3Jvc3MgdGhlIGVudGlyZSBhcHAuXG4qIEBleGFtcGxlIDxkaXYgY2FydC1zdW1tYXJ5PjwvZGl2PlxuKi9cblxuYW5ndWxhclxuXHQubW9kdWxlKCdhaE51dHMnKVxuXHQuZGlyZWN0aXZlKCdjYXJ0U3VtbWFyeScsIGNhcnRTdW1tYXJ5KTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBjYXJ0U3VtbWFyeSgpIHtcblx0dmFyIGRpcmVjdGl2ZSA9IHtcblx0XHRyZXN0cmljdDogJ0FFQ00nLFxuXHRcdHRlbXBsYXRlVXJsOiAndmlld3MvZGlyZWN0aXZlcy9jYXJ0U3VtbWFyeS5kaXJlY3RpdmUuaHRtJyxcblx0XHRyZXBsYWNlOiB0cnVlLFxuXHRcdHNjb3BlOiB7XG5cdFx0XHRub0l0ZW1zOiBcIj1cIixcblx0XHRcdHN1YnRvdGFsOiBcIj1cIlxuXHRcdH0sXG5cdFx0bGluazogbGlua0Z1bmMsXG5cdFx0Y29udHJvbGxlcjogY2FydFN1bW1hcnlDb250cm9sbGVyLFxuXHRcdGNvbnRyb2xsZXJBczogJ3ZtJyxcblx0XHRiaW5kVG9Db250cm9sbGVyOiB0cnVlXG5cdH1cblxuXHQvKiBAbmdJbmplY3QgKi9cblx0ZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsLCBhdHRyLCBjdHJsKSB7XG4gICAgfVxuXG4gICAgY2FydFN1bW1hcnlDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsICckbG9nJ107XG4gICAgLyogQG5nSW5qZWN0ICovXG4gICAgZnVuY3Rpb24gY2FydFN1bW1hcnlDb250cm9sbGVyKCRzY29wZSwgJGxvZykge1xuXHQgICAgdmFyIHZtID0gdGhpcztcblxuXHQgICAgJGxvZy5pbmZvKCdpbiB0aGUgY2FydCBzdW1tYXJ5IGRpcmVjdGl2ZScpO1xuXG5cdH1cblxuXHRyZXR1cm4gIGRpcmVjdGl2ZTtcbn0iLCIvKiBjaGVja291dEJpbGxpbmcuZGlyZWN0aXZlLmpzICovXG5cbi8qKlxuKiBAZGVzYyB0b29sYmFyIGRpcmVjdGl2ZSB0aGF0IGlzIHVzZWQgb24gdGhlIG1haW4gcGFnZSBhY3Jvc3MgdGhlIGVudGlyZSBhcHAuXG4qIEBleGFtcGxlIDxkaXYgY2hlY2tvdXQtYmlsbGluZz48L2Rpdj5cbiovXG5cbmFuZ3VsYXJcblx0Lm1vZHVsZSgnYWhOdXRzJylcblx0LmRpcmVjdGl2ZSgnY2hlY2tvdXRCaWxsaW5nJywgY2hlY2tvdXRCaWxsaW5nKTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBjaGVja291dEJpbGxpbmcoKSB7XG5cdHZhciBkaXJlY3RpdmUgPSB7XG5cdFx0cmVzdHJpY3Q6ICdBRUNNJyxcblx0XHR0ZW1wbGF0ZVVybDogJ3ZpZXdzL2RpcmVjdGl2ZXMvY2hlY2tvdXRCaWxsaW5nLmRpcmVjdGl2ZS5odG0nLFxuXHRcdHJlcGxhY2U6IHRydWUsXG5cdFx0c2NvcGU6IHtcblx0XHRcdGFxdURldDogJz0nLFxuXHRcdFx0cGF5RGV0OiAnPSdcblx0XHR9LFxuXHRcdGxpbms6IGxpbmtGdW5jLFxuXHRcdGNvbnRyb2xsZXI6IGNoZWNrb3V0QmlsbGluZ0NvbnRyb2xsZXIsXG5cdFx0Y29udHJvbGxlckFzOiAndm0nLFxuXHRcdGJpbmRUb0NvbnRyb2xsZXI6IHRydWVcblx0fVxuXG5cdC8qIEBuZ0luamVjdCAqL1xuXHRmdW5jdGlvbiBsaW5rRnVuYyhzY29wZSwgZWwsIGF0dHIsIGN0cmwpIHtcbiAgICB9XG5cbiAgICBjaGVja291dEJpbGxpbmdDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsICckbG9nJ107XG4gICAgLyogQG5nSW5qZWN0ICovXG4gICAgZnVuY3Rpb24gY2hlY2tvdXRCaWxsaW5nQ29udHJvbGxlcigkc2NvcGUsICRsb2cpIHtcblx0ICAgIHZhciB2bSA9IHRoaXM7XG5cdCAgICB2bS5wYXlEZXQgPSB7XG5cdCAgICBcdG5hbWU6IHtcblx0ICAgIFx0XHRmaXJzdDogXCJcIixcblx0ICAgIFx0XHRsYXN0OiBcIlwiXG5cdCAgICBcdH0sXG5cdCAgICBcdHN0cmVldDE6IFwiXCIsXG5cdCAgICBcdHN0cmVldDI6IFwiXCIsXG5cdCAgICBcdHN0cmVldDM6IFwiXCIsXG5cdCAgICBcdGNpdHk6IFwiXCIsXG5cdCAgICBcdHN0YXRlOiBcIlwiLFxuXHQgICAgXHR6aXA6IFwiXCIsXG5cdCAgICBcdHBob25lOiBcIlwiLFxuXHQgICAgXHRwbzogXCJcIixcblx0ICAgIFx0ZW1haWw6IFwiXCJcblx0ICAgIH07XG5cblx0ICAgICRsb2cuaW5mbygnaW4gdGhlIGNoZWNrb3V0QmlsbGluZyBkaXJlY3RpdmUnLCB2bS5hcXVEZXQsIHZtLnBheURldCk7XG5cblx0ICAgIHZtLmNvcHlEZWxBZGQgPSBmdW5jdGlvbigpIHtcblx0ICAgIFx0Ly9jb3B5IGRldGFpbHMgd2lsbCBjb3B5IGRldGFpbHNcblx0ICAgIFx0dm0ucGF5RGV0Lm5hbWUuZmlyc3QgPSB2bS5hcXVEZXQuZGVsaXZlcnlMb2NhdGlvbi5yZWNlaXZlci5maXJzdDtcblx0ICAgIFx0dm0ucGF5RGV0Lm5hbWUubGFzdCA9IHZtLmFxdURldC5kZWxpdmVyeUxvY2F0aW9uLnJlY2VpdmVyLmxhc3Q7XG5cdCAgICBcdHZtLnBheURldC5zdHJlZXQxID0gdm0uYXF1RGV0LmRlbGl2ZXJ5TG9jYXRpb24uc3RyZWV0MTtcblx0ICAgIFx0dm0ucGF5RGV0LnN0cmVldDIgPSB2bS5hcXVEZXQuZGVsaXZlcnlMb2NhdGlvbi5zdHJlZXQyO1xuXHQgICAgXHR2bS5wYXlEZXQuc3RyZWV0MyA9IHZtLmFxdURldC5kZWxpdmVyeUxvY2F0aW9uLnN0cmVldDM7XG5cdCAgICBcdHZtLnBheURldC5jaXR5ID0gdm0uYXF1RGV0LmRlbGl2ZXJ5TG9jYXRpb24uY2l0eTtcblx0ICAgIFx0dm0ucGF5RGV0LnN0YXRlID0gdm0uYXF1RGV0LmRlbGl2ZXJ5TG9jYXRpb24uc3RhdGU7XG5cdCAgICBcdHZtLnBheURldC56aXAgPSB2bS5hcXVEZXQuZGVsaXZlcnlMb2NhdGlvbi56aXA7XG5cdCAgICB9O1xuXG5cdH1cblxuXHRyZXR1cm4gIGRpcmVjdGl2ZTtcbn0iLCIvKiBjaGVja291dEZvbGxvd3VwLmRpcmVjdGl2ZS5qcyAqL1xuXG4vKipcbiogQGRlc2MgdG9vbGJhciBkaXJlY3RpdmUgdGhhdCBpcyB1c2VkIG9uIHRoZSBtYWluIHBhZ2UgYWNyb3NzIHRoZSBlbnRpcmUgYXBwLlxuKiBAZXhhbXBsZSA8ZGl2IGNoZWNrb3V0LWZvbGxvd3VwPjwvZGl2PlxuKi9cblxuYW5ndWxhclxuXHQubW9kdWxlKCdhaE51dHMnKVxuXHQuZGlyZWN0aXZlKCdjaGVja291dEZvbGxvd3VwJywgY2hlY2tvdXRGb2xsb3d1cCk7XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gY2hlY2tvdXRGb2xsb3d1cCgpIHtcblx0dmFyIGRpcmVjdGl2ZSA9IHtcblx0XHRyZXN0cmljdDogJ0FFQ00nLFxuXHRcdHRlbXBsYXRlVXJsOiAndmlld3MvZGlyZWN0aXZlcy9jaGVja291dEZvbGxvd3VwLmRpcmVjdGl2ZS5odG0nLFxuXHRcdHJlcGxhY2U6IHRydWUsXG5cdFx0c2NvcGU6IHt9LFxuXHRcdGxpbms6IGxpbmtGdW5jLFxuXHRcdGNvbnRyb2xsZXI6IGNoZWNrb3V0Rm9sbG93dXBDb250cm9sbGVyLFxuXHRcdGNvbnRyb2xsZXJBczogJ3ZtJyxcblx0XHRiaW5kVG9Db250cm9sbGVyOiB0cnVlXG5cdH1cblxuXHQvKiBAbmdJbmplY3QgKi9cblx0ZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsLCBhdHRyLCBjdHJsKSB7XG4gICAgfVxuXG4gICAgY2hlY2tvdXRGb2xsb3d1cENvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyRsb2cnXTtcbiAgICAvKiBAbmdJbmplY3QgKi9cbiAgICBmdW5jdGlvbiBjaGVja291dEZvbGxvd3VwQ29udHJvbGxlcigkc2NvcGUsICRsb2cpIHtcblx0ICAgIHZhciB2bSA9IHRoaXM7XG5cblx0ICAgICRsb2cuaW5mbygnaW4gdGhlIGNoZWNrb3V0Rm9sbG93dXBDb250cm9sbGVyIGRpcmVjdGl2ZScpO1xuXG5cdH1cblxuXHRyZXR1cm4gIGRpcmVjdGl2ZTtcbn0iLCIvKiBjaGVja291dFBheW1lbnQuZGlyZWN0aXZlLmpzICovXG5cbi8qKlxuKiBAZGVzYyB0b29sYmFyIGRpcmVjdGl2ZSB0aGF0IGlzIHVzZWQgb24gdGhlIG1haW4gcGFnZSBhY3Jvc3MgdGhlIGVudGlyZSBhcHAuXG4qIEBleGFtcGxlIDxkaXYgY2hlY2tvdXQtcGF5bWVudD48L2Rpdj5cbiovXG5cbmFuZ3VsYXJcblx0Lm1vZHVsZSgnYWhOdXRzJylcblx0LmRpcmVjdGl2ZSgnY2hlY2tvdXRQYXltZW50JywgY2hlY2tvdXRQYXltZW50KTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBjaGVja291dFBheW1lbnQoKSB7XG5cdHZhciBkaXJlY3RpdmUgPSB7XG5cdFx0cmVzdHJpY3Q6ICdBRUNNJyxcblx0XHR0ZW1wbGF0ZVVybDogJ3ZpZXdzL2RpcmVjdGl2ZXMvY2hlY2tvdXRQYXltZW50LmRpcmVjdGl2ZS5odG0nLFxuXHRcdHJlcGxhY2U6IHRydWUsXG5cdFx0c2NvcGU6IHtcblx0XHRcdHNxdWFyZUNyZWRzOiAnPSdcblx0XHR9LFxuXHRcdGxpbms6IGxpbmtGdW5jLFxuXHRcdGNvbnRyb2xsZXI6IGNoZWNrb3V0UGF5bWVudENvbnRyb2xsZXIsXG5cdFx0Y29udHJvbGxlckFzOiAndm0nLFxuXHRcdGJpbmRUb0NvbnRyb2xsZXI6IHRydWVcblx0fVxuXG5cdC8qIEBuZ0luamVjdCAqL1xuXHRmdW5jdGlvbiBsaW5rRnVuYyhzY29wZSwgZWwsIGF0dHIsIGN0cmwpIHtcbiAgICB9XG5cbiAgICBjaGVja291dFBheW1lbnRDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsICckbG9nJywgJ2RhdGFTZXJ2aWNlcyddO1xuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIGNoZWNrb3V0UGF5bWVudENvbnRyb2xsZXIoJHNjb3BlLCAkbG9nLCBkYXRhU2VydmljZXMpIHtcblx0ICAgIHZhciB2bSA9IHRoaXM7XG5cdCAgICB2bS5kYXRhID0gZGF0YVNlcnZpY2VzO1xuXG5cdCAgICB2YXIgYXBwbGljYXRpb25JZCA9ICdSRVBMQUNFX01FJzsgLy8gPC0tIEFkZCB5b3VyIGFwcGxpY2F0aW9uJ3MgSUQgaGVyZVxuXHRcdHZhciBsb2NhdGlvbklkID0gJ1JFUExBQ0VfTUUnOyAgICAvLyA8LS0gRm9yIEFwcGxlIFBheSwgc2V0IHlvdXIgbG9jYXRpb24gSUQgaGVyZVxuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoZSBhcHBsaWNhdGlvbiBJRCBpcyBzZXQgYmVmb3JlIGNvbnRpbnVpbmcuXG5cdFx0Ly8gTm90ZTogY2hlY2tpbmcgbG9jYXRpb25JZCBpZiB1c2luZyBBcHBsZSBQYXkuXG5cdFx0aWYgKGFwcGxpY2F0aW9uSWQgPT0gJycpIHtcblx0XHQgIGFsZXJ0KCdZb3UgbmVlZCB0byBwcm92aWRlIGEgdmFsdWUgZm9yIHRoZSBhcHBsaWNhdGlvbklkIHZhcmlhYmxlLicpO1xuXHRcdH1cblx0ICAgICRsb2cuaW5mbygnaW4gdGhlIGNoZWNrb3V0UGF5bWVudCBkaXJlY3RpdmUnKTtcblxuXHQgICAgdmFyIHBheW1lbnRGb3JtID0gbmV3IFNxUGF5bWVudEZvcm0oe1xuXHRcdCAgICBhcHBsaWNhdGlvbklkOiBhcHBsaWNhdGlvbklkLFxuXHRcdCAgICBsb2NhdGlvbklkOiBsb2NhdGlvbklkLFxuXHRcdCAgICBpbnB1dENsYXNzOiAnc3EtaW5wdXQnLFxuXHRcdCAgICBpbnB1dFN0eWxlczogW1xuXHRcdCAgICAgIHtcblx0XHQgICAgICAgIGZvbnRTaXplOiAnMTVweCdcblx0XHQgICAgICB9XG5cdFx0ICAgIF0sXG5cdFx0ICAgIC8vIFVzZWQgZm9yIGNyZWRpdCBjYXJkIHBheW1lbnRzXG5cdFx0ICAgIGNhcmROdW1iZXI6IHtcblx0XHQgICAgICBlbGVtZW50SWQ6ICdzcS1jYXJkLW51bWJlcicsXG5cdFx0ICAgICAgcGxhY2Vob2xkZXI6ICfigKLigKLigKLigKIg4oCi4oCi4oCi4oCiIOKAouKAouKAouKAoiDigKLigKLigKLigKInXG5cdFx0ICAgIH0sXG5cdFx0ICAgIGN2djoge1xuXHRcdCAgICAgIGVsZW1lbnRJZDogJ3NxLWN2dicsXG5cdFx0ICAgICAgcGxhY2Vob2xkZXI6ICdDVlYnXG5cdFx0ICAgIH0sXG5cdFx0ICAgIGV4cGlyYXRpb25EYXRlOiB7XG5cdFx0ICAgICAgZWxlbWVudElkOiAnc3EtZXhwaXJhdGlvbi1kYXRlJyxcblx0XHQgICAgICBwbGFjZWhvbGRlcjogJ01NL1lZJ1xuXHRcdCAgICB9LFxuXHRcdCAgICBwb3N0YWxDb2RlOiB7XG5cdFx0ICAgICAgZWxlbWVudElkOiAnc3EtcG9zdGFsLWNvZGUnXG5cdFx0ICAgIH0sXG5cdFx0ICAgIC8vIFVzZWQgZm9yIFdlYiBBcHBsZSBQYXkgcGF5bWVudHNcblx0XHQgICAgYXBwbGVQYXk6IHtcblx0XHQgICAgICAgIGVsZW1lbnRJZDogJ3NxLWFwcGxlLXBheSdcblx0XHQgICAgfSxcblx0XHQgICAgLy8gUGF5bWVudCBmb3JtIGNhbGxiYWNrIGZ1bmN0aW9uc1xuXHRcdCAgICBjYWxsYmFja3M6IHtcblxuXHRcdCAgICAgIC8vIENyZWRpdCBjYXJkIHBheW1lbnRzIGFyZSBhbHdheXMgc3VwcG9ydGVkLCBidXQgdGhlIFdlYiBBcHBsZSBQYXlcblx0XHQgICAgICAvLyBidXR0b24gc2hvdWxkIG9ubHkgZGlzcGxheSBpZiBBcHBsZSBQYXkgaXMgc3VwcG9ydGVkIGZvciB0aGlzXG5cdFx0ICAgICAgLy8gZG9tYWluLiBBcHBsZSBQYXkgc3VwcG9ydCBpcyBkZXRlcm1pbmVkIGJ5IHRoZSBTcVBheW1lbnRGb3JtIGxpYnJhcnlcblx0XHQgICAgICAvLyB3aGVuIHRoZSBwYWdlIGxvYWRzLiBZb3UgZG8gbm90IG5lZWQgdG8gbW9kaWZ5IHRoaXMgZnVuY3Rpb24uXG5cdFx0ICAgICAgbWV0aG9kc1N1cHBvcnRlZDogZnVuY3Rpb24gKG1ldGhvZHMpIHtcblx0XHQgICAgICAgICAgaWYgKG1ldGhvZHMuYXBwbGVQYXkgPT09IHRydWUpIHtcblx0XHQgICAgICAgICAgICAgIC8vIFNob3cgYXBwbGUgcGF5IGJ1dHRvblxuXHRcdCAgICAgICAgICAgICAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc3EtYXBwbGUtcGF5Jyk7XG5cdFx0ICAgICAgICAgICAgICBlbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnaW5saW5lLWJsb2NrJztcblx0XHQgICAgICAgICAgfVxuXHRcdCAgICAgIH0sXG5cblx0XHQgICAgICAvLyBjcmVhdGVQYXltZW50UmVxdWVzdCBpcyB0cmlnZ2VyZWQgd2hlbiB0aGUgQXBwbGUgUGF5IGJ1dHRvbiBpc1xuXHRcdCAgICAgIC8vIGNsaWNrZWQuIFRoZSBwYXltZW50IHJlcXVlc3Qgb2JqZWN0IGlzIHVzZWQgYnkgZGlnaXRhbCB3YWxsZXRzXG5cdFx0ICAgICAgLy8gKGxpa2UgQXBwbGUgUGF5KSB0byBjcmVhdGUgdGhlaXIgZXF1aXZhbGVudCBvZiBhIGNyZWRpdCBjYXJkIG5vbmNlLlxuXHRcdCAgICAgIC8vIE5PVEU6IFRoZSBwYXltZW50IHJlcXVlc3QgYmVsb3cgaXMgcHJvdmlkZWQgYXMgZ3VpZGFuY2UuIFlvdSBzaG91bGRcblx0XHQgICAgICAvLyBhZGQgY29kZSB0byBjcmVhdGUgdGhlIG9iamVjdCBwcm9ncmFtbWF0aWNhbGx5LlxuXHRcdCAgICAgIGNyZWF0ZVBheW1lbnRSZXF1ZXN0OiBmdW5jdGlvbiAoKSB7XG5cdFx0ICAgICAgICAgIHJldHVybiB7XG5cdFx0ICAgICAgICAgICAgICByZXF1ZXN0U2hpcHBpbmdBZGRyZXNzOiB0cnVlLFxuXHRcdCAgICAgICAgICAgICAgY3VycmVuY3lDb2RlOiBcIlVTRFwiLFxuXHRcdCAgICAgICAgICAgICAgY291bnRyeUNvZGU6IFwiVVNcIixcblx0XHQgICAgICAgICAgICAgIHRvdGFsOiB7XG5cdFx0ICAgICAgICAgICAgICAgICAgbGFiZWw6IFwie3sgTUVSQ0hBTlQgTkFNRSB9fVwiLFxuXHRcdCAgICAgICAgICAgICAgICAgIGFtb3VudDogXCJ7e1RPVEFMIEFNT1VOVH19XCIsXG5cdFx0ICAgICAgICAgICAgICAgICAgcGVuZGluZzogZmFsc2UsXG5cdFx0ICAgICAgICAgICAgICB9LFxuXHRcdCAgICAgICAgICAgICAgbGluZUl0ZW1zOiBbXG5cdFx0ICAgICAgICAgICAgICAgICAge1xuXHRcdCAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogXCJTdWJ0b3RhbFwiLFxuXHRcdCAgICAgICAgICAgICAgICAgICAgICBhbW91bnQ6IFwie3tTVUJUT1RBTCBBTU9VTlR9fVwiLFxuXHRcdCAgICAgICAgICAgICAgICAgICAgICBwZW5kaW5nOiBmYWxzZSxcblx0XHQgICAgICAgICAgICAgICAgICB9LFxuXHRcdCAgICAgICAgICAgICAgICAgIHtcblx0XHQgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6IFwiU2hpcHBpbmdcIixcblx0XHQgICAgICAgICAgICAgICAgICAgICAgYW1vdW50OiBcInt7U0hJUFBJTkcgQU1PVU5UfX1cIixcblx0XHQgICAgICAgICAgICAgICAgICAgICAgcGVuZGluZzogdHJ1ZSxcblx0XHQgICAgICAgICAgICAgICAgICB9LFxuXHRcdCAgICAgICAgICAgICAgICAgIHtcblx0XHQgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6IFwiVGF4XCIsXG5cdFx0ICAgICAgICAgICAgICAgICAgICAgIGFtb3VudDogXCJ7e1RBWCBBTU9VTlR9fVwiLFxuXHRcdCAgICAgICAgICAgICAgICAgICAgICBwZW5kaW5nOiBmYWxzZSxcblx0XHQgICAgICAgICAgICAgICAgICB9XG5cdFx0ICAgICAgICAgICAgICBdXG5cdFx0ICAgICAgICAgIH07XG5cdFx0ICAgICAgfSxcblxuXHRcdCAgICAgIC8vIFVzZWQgZm9yIGNyZWRpdCBjYXJkIHBheW1lbnRzLiBDYWxsZWQgd2hlbiB0aGUgU3FQYXltZW50Rm9ybVxuXHRcdCAgICAgIC8vIGNvbXBsZXRlcyBhIHJlcXVlc3QgdG8gZ2VuZXJhdGUgYSBjYXJkIG5vbmNlLCBldmVuIGlmIHRoZSByZXF1ZXN0XG5cdFx0ICAgICAgLy8gZmFpbGVkIGJlY2F1c2Ugb2YgYW4gZXJyb3IuXG5cdFx0ICAgICAgY2FyZE5vbmNlUmVzcG9uc2VSZWNlaXZlZDogZnVuY3Rpb24oZXJyb3JzLCBub25jZSwgY2FyZERhdGEpIHtcblx0XHQgICAgICAgIGlmIChlcnJvcnMpIHtcblx0XHQgICAgICAgICAgY29uc29sZS5sb2coXCJFbmNvdW50ZXJlZCBlcnJvcnM6XCIpO1xuXG5cdFx0ICAgICAgICAgIC8vIFRoaXMgbG9ncyBhbGwgZXJyb3JzIGVuY291bnRlcmVkIGR1cmluZyBub25jZSBnZW5lcmF0aW9uIHRvIHRoZVxuXHRcdCAgICAgICAgICAvLyBKYXZhc2NyaXB0IGNvbnNvbGUuXG5cdFx0ICAgICAgICAgIGVycm9ycy5mb3JFYWNoKGZ1bmN0aW9uKGVycm9yKSB7XG5cdFx0ICAgICAgICAgICAgY29uc29sZS5sb2coJyAgJyArIGVycm9yLm1lc3NhZ2UpO1xuXHRcdCAgICAgICAgICB9KTtcblxuXHRcdCAgICAgICAgICByZXR1cm47XG5cdFx0ICAgICAgICB9IGVsc2Uge1xuXG5cdFx0ICAgICAgICAgIC8vIFlvdSBjYW4gZGVsZXRlIHRoaXMgbGluZSwgaXQncyBwcm92aWRlZCBmb3IgdGVzdGluZyBwdXJwb3Nlc1xuXHRcdCAgICAgICAgICAvL2FsZXJ0KCdOb25jZSByZWNlaXZlZDogJyArIG5vbmNlKTtcblxuXG5cdFx0ICAgICAgICAgIC8vIEFzc2lnbiB0aGUgbm9uY2UgdmFsdWUgdG8gdGhlIGhpZGRlbiBmb3JtIGZpZWxkXG5cdFx0ICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjYXJkLW5vbmNlJykudmFsdWUgPSBub25jZTtcblx0XHQgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ25vbmNlLWZvcm0nKS5zdWJtaXQoKTtcblxuXHRcdCAgICAgICAgICAvLyBMZXQgdGhlIGZvcm0gY29udGludWUgdG8gdGhlIHBheW1lbnQgcHJvY2Vzc2luZyBwYWdlXG5cdFx0ICAgICAgICAgIC8vc3VibWl0UGF5bWVudChub25jZSk7XG5cdFx0ICAgICAgICAgIHZtLmRhdGEucG9zdCgnL3Byb2Nlc3MtY2FyZCcsIHsgbm9uY2U6IG5vbmNlfSk7XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgfSxcblxuXHRcdCAgICAgIHVuc3VwcG9ydGVkQnJvd3NlckRldGVjdGVkOiBmdW5jdGlvbigpIHtcblx0XHQgICAgICAgIC8vIEZpbGwgaW4gdGhpcyBjYWxsYmFjayB0byBhbGVydCBidXllcnMgd2hlbiB0aGVpciBicm93c2VyIGlzIG5vdCBzdXBwb3J0ZWQuXG5cdFx0ICAgICAgfSxcblxuXHRcdCAgICAgIC8vIEZpbGwgaW4gdGhlc2UgY2FzZXMgdG8gcmVzcG9uZCB0byB2YXJpb3VzIGV2ZW50cyB0aGF0IGNhbiBvY2N1ciB3aGlsZSBhXG5cdFx0ICAgICAgLy8gYnV5ZXIgaXMgdXNpbmcgdGhlIHBheW1lbnQgZm9ybS5cblx0XHQgICAgICBpbnB1dEV2ZW50UmVjZWl2ZWQ6IGZ1bmN0aW9uKGlucHV0RXZlbnQpIHtcblx0XHQgICAgICAgIHN3aXRjaCAoaW5wdXRFdmVudC5ldmVudFR5cGUpIHtcblx0XHQgICAgICAgICAgY2FzZSAnZm9jdXNDbGFzc0FkZGVkJzpcblx0XHQgICAgICAgICAgICAvLyBIYW5kbGUgYXMgZGVzaXJlZFxuXHRcdCAgICAgICAgICAgIGJyZWFrO1xuXHRcdCAgICAgICAgICBjYXNlICdmb2N1c0NsYXNzUmVtb3ZlZCc6XG5cdFx0ICAgICAgICAgICAgLy8gSGFuZGxlIGFzIGRlc2lyZWRcblx0XHQgICAgICAgICAgICBicmVhaztcblx0XHQgICAgICAgICAgY2FzZSAnZXJyb3JDbGFzc0FkZGVkJzpcblx0XHQgICAgICAgICAgICAvLyBIYW5kbGUgYXMgZGVzaXJlZFxuXHRcdCAgICAgICAgICAgIGJyZWFrO1xuXHRcdCAgICAgICAgICBjYXNlICdlcnJvckNsYXNzUmVtb3ZlZCc6XG5cdFx0ICAgICAgICAgICAgLy8gSGFuZGxlIGFzIGRlc2lyZWRcblx0XHQgICAgICAgICAgICBicmVhaztcblx0XHQgICAgICAgICAgY2FzZSAnY2FyZEJyYW5kQ2hhbmdlZCc6XG5cdFx0ICAgICAgICAgICAgLy8gSGFuZGxlIGFzIGRlc2lyZWRcblx0XHQgICAgICAgICAgICBicmVhaztcblx0XHQgICAgICAgICAgY2FzZSAncG9zdGFsQ29kZUNoYW5nZWQnOlxuXHRcdCAgICAgICAgICAgIC8vIEhhbmRsZSBhcyBkZXNpcmVkXG5cdFx0ICAgICAgICAgICAgYnJlYWs7XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgfSxcblxuXHRcdCAgICAgIHBheW1lbnRGb3JtTG9hZGVkOiBmdW5jdGlvbigpIHtcblx0XHQgICAgICAgIC8vIEZpbGwgaW4gdGhpcyBjYWxsYmFjayB0byBwZXJmb3JtIGFjdGlvbnMgYWZ0ZXIgdGhlIHBheW1lbnQgZm9ybSBpc1xuXHRcdCAgICAgICAgLy8gZG9uZSBsb2FkaW5nIChzdWNoIGFzIHNldHRpbmcgdGhlIHBvc3RhbCBjb2RlIGZpZWxkIHByb2dyYW1tYXRpY2FsbHkpLlxuXHRcdCAgICAgICAgLy8gcGF5bWVudEZvcm0uc2V0UG9zdGFsQ29kZSgnOTQxMDMnKTtcblx0XHQgICAgICB9XG5cdFx0ICAgIH1cblx0XHQgIH0pO1xuXG5cdFx0Ly8gVGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQgd2hlbiBhIGJ1eWVyIGNsaWNrcyB0aGUgU3VibWl0IGJ1dHRvbiBvbiB0aGUgd2VicGFnZVxuXHRcdC8vIHRvIGNoYXJnZSB0aGVpciBjYXJkLlxuXHRcdHZtLnJlcXVlc3RDYXJkTm9uY2UgPSBmdW5jdGlvbihldmVudCkge1xuXG5cdFx0XHRjb25zb2xlLmxvZygncmVxdWVzdGlvbiBjYXJkIE5vbmNlJyk7XG5cblx0XHQgIC8vIFRoaXMgcHJldmVudHMgdGhlIFN1Ym1pdCBidXR0b24gZnJvbSBzdWJtaXR0aW5nIGl0cyBhc3NvY2lhdGVkIGZvcm0uXG5cdFx0ICAvLyBJbnN0ZWFkLCBjbGlja2luZyB0aGUgU3VibWl0IGJ1dHRvbiBzaG91bGQgdGVsbCB0aGUgU3FQYXltZW50Rm9ybSB0byBnZW5lcmF0ZVxuXHRcdCAgLy8gYSBjYXJkIG5vbmNlLCB3aGljaCB0aGUgbmV4dCBsaW5lIGRvZXMuXG5cdFx0ICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG5cdFx0ICBwYXltZW50Rm9ybS5yZXF1ZXN0Q2FyZE5vbmNlKCk7XG5cdFx0fVxuXG5cdFx0Ly9idWlsZCBwYXltZW50IGZvcm0gYWZ0ZXIgY29udHJvbGxlciBsb2Fkc1xuXHRcdHBheW1lbnRGb3JtLmJ1aWxkKCk7XG5cblx0fVxuXG5cdHJldHVybiAgZGlyZWN0aXZlO1xufSIsIi8qIGNvdXBvblN1Ym1pc3Npb24uZGlyZWN0aXZlLmpzICovXG5cbi8qKlxuKiBAZGVzYyB0b29sYmFyIGRpcmVjdGl2ZSB0aGF0IGlzIHVzZWQgb24gdGhlIG1haW4gcGFnZSBhY3Jvc3MgdGhlIGVudGlyZSBhcHAuXG4qIEBleGFtcGxlIDxkaXYgY291cG9uLXN1Ym1pc3Npb24+PC9kaXY+XG4qL1xuXG5hbmd1bGFyXG5cdC5tb2R1bGUoJ2FoTnV0cycpXG5cdC5kaXJlY3RpdmUoJ2NvdXBvblN1Ym1pc3Npb24nLCBjb3Vwb25TdWJtaXNzaW9uKTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBjb3Vwb25TdWJtaXNzaW9uKCkge1xuXHR2YXIgZGlyZWN0aXZlID0ge1xuXHRcdHJlc3RyaWN0OiAnQUVDTScsXG5cdFx0dGVtcGxhdGVVcmw6ICd2aWV3cy9kaXJlY3RpdmVzL2NvdXBvblN1Ym1pc3Npb24uZGlyZWN0aXZlLmh0bScsXG5cdFx0cmVwbGFjZTogdHJ1ZSxcblx0XHRzY29wZToge30sXG5cdFx0bGluazogbGlua0Z1bmMsXG5cdFx0Y29udHJvbGxlcjogY291cG9uU3VibWlzc2lvbkNvbnRyb2xsZXIsXG5cdFx0Y29udHJvbGxlckFzOiAndm0nLFxuXHRcdGJpbmRUb0NvbnRyb2xsZXI6IHRydWVcblx0fVxuXG5cdC8qIEBuZ0luamVjdCAqL1xuXHRmdW5jdGlvbiBsaW5rRnVuYyhzY29wZSwgZWwsIGF0dHIsIGN0cmwpIHtcbiAgICB9XG5cbiAgICBjb3Vwb25TdWJtaXNzaW9uQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGxvZyddO1xuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIGNvdXBvblN1Ym1pc3Npb25Db250cm9sbGVyKCRzY29wZSwgJGxvZykge1xuXHQgICAgdmFyIHZtID0gdGhpcztcblxuXHQgICAgJGxvZy5pbmZvKCdpbiB0aGUgY291cG9uLXN1Ym1pc3Npb24gZGlyZWN0aXZlJyk7XG5cblx0fVxuXG5cdHJldHVybiAgZGlyZWN0aXZlO1xufSIsIi8qIGNyZWF0ZU5ld0FjY291bnQuZGlyZWN0aXZlLmpzICovXG5cbi8qKlxuKiBAZGVzYyB0b29sYmFyIGRpcmVjdGl2ZSB0aGF0IGlzIHVzZWQgb24gdGhlIG1haW4gcGFnZSBhY3Jvc3MgdGhlIGVudGlyZSBhcHAuXG4qIEBleGFtcGxlIDxkaXYgY3JlYXRlLW5ldy1hY2NvdW50PjwvZGl2PlxuKi9cblxuYW5ndWxhclxuXHQubW9kdWxlKCdhaE51dHMnKVxuXHQuZGlyZWN0aXZlKCdjcmVhdGVOZXdBY2NvdW50JywgY3JlYXRlTmV3QWNjb3VudCk7XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gY3JlYXRlTmV3QWNjb3VudCgpIHtcblx0dmFyIGRpcmVjdGl2ZSA9IHtcblx0XHRyZXN0cmljdDogJ0FFQ00nLFxuXHRcdHRlbXBsYXRlVXJsOiAndmlld3MvZGlyZWN0aXZlcy9jcmVhdGVOZXdBY2NvdW50LmRpcmVjdGl2ZS5odG0nLFxuXHRcdHJlcGxhY2U6IHRydWUsXG5cdFx0c2NvcGU6IHt9LFxuXHRcdGxpbms6IGxpbmtGdW5jLFxuXHRcdGNvbnRyb2xsZXI6IGNyZWF0ZU5ld0FjY291bnRDb250cm9sbGVyLFxuXHRcdGNvbnRyb2xsZXJBczogJ3ZtJyxcblx0XHRiaW5kVG9Db250cm9sbGVyOiB0cnVlXG5cdH1cblxuXHQvKiBAbmdJbmplY3QgKi9cblx0ZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsLCBhdHRyLCBjdHJsKSB7XG4gICAgfVxuXG4gICAgY3JlYXRlTmV3QWNjb3VudENvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyRsb2cnLCAnJGxvY2F0aW9uJ107XG4gICAgLyogQG5nSW5qZWN0ICovXG4gICAgZnVuY3Rpb24gY3JlYXRlTmV3QWNjb3VudENvbnRyb2xsZXIoJHNjb3BlLCAkbG9nLCAkbG9jYXRpb24pIHtcblx0ICAgIHZhciB2bSA9IHRoaXM7XG5cblx0ICAgICRsb2cuaW5mbygnaW4gdGhlIGNyZWF0ZSBuZXcgYWNjb3VudCBkaXJlY3RpdmUnKTtcblxuXHQgICAgLy9kZWZpbmUgdmlld21vZGVsIGZ1bmN0aW9uc1xuXG5cdH1cblxuXHRyZXR1cm4gIGRpcmVjdGl2ZTtcbn0iLCIvKiBkZWZpbmVEZWxpdmVyeUFkZHJlc3MuZGlyZWN0aXZlLmpzICovXG5cbi8qKlxuKiBAZGVzYyB0b29sYmFyIGRpcmVjdGl2ZSB0aGF0IGlzIHVzZWQgb24gdGhlIG1haW4gcGFnZSBhY3Jvc3MgdGhlIGVudGlyZSBhcHAuXG4qIEBleGFtcGxlIDxkaXYgZGVmaW5lLWRlbGl2ZXJ5LWFkZHJlc3M+PC9kaXY+XG4qL1xuXG5hbmd1bGFyXG5cdC5tb2R1bGUoJ2FoTnV0cycpXG5cdC5kaXJlY3RpdmUoJ2RlZmluZURlbGl2ZXJ5QWRkcmVzcycsIGRlZmluZURlbGl2ZXJ5QWRkcmVzcyk7XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gZGVmaW5lRGVsaXZlcnlBZGRyZXNzKCkge1xuXHR2YXIgZGlyZWN0aXZlID0ge1xuXHRcdHJlc3RyaWN0OiAnQUVDTScsXG5cdFx0dGVtcGxhdGVVcmw6ICd2aWV3cy9kaXJlY3RpdmVzL2RlZmluZURlbGl2ZXJ5QWRkcmVzcy5kaXJlY3RpdmUuaHRtJyxcblx0XHRyZXBsYWNlOiB0cnVlLFxuXHRcdHNjb3BlOiB7XG5cdFx0XHRkZWxpdmVyVG86IFwiPVwiXG5cdFx0fSxcblx0XHRsaW5rOiBsaW5rRnVuYyxcblx0XHRjb250cm9sbGVyOiBkZWZpbmVEZWxpdmVyeUFkZHJlc3NDb250cm9sbGVyLFxuXHRcdGNvbnRyb2xsZXJBczogJ3ZtJyxcblx0XHRiaW5kVG9Db250cm9sbGVyOiB0cnVlXG5cdH1cblxuXHQvKiBAbmdJbmplY3QgKi9cblx0ZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsLCBhdHRyLCBjdHJsKSB7XG4gICAgfVxuXG4gICAgZGVmaW5lRGVsaXZlcnlBZGRyZXNzQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGxvZyddO1xuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIGRlZmluZURlbGl2ZXJ5QWRkcmVzc0NvbnRyb2xsZXIoJHNjb3BlLCAkbG9nKSB7XG5cdCAgICB2YXIgdm0gPSB0aGlzO1xuXG5cdCAgICAvLyRsb2cuaW5mbygnaW4gdGhlIGhlYWRlciBkaXJlY3RpdmUnKTtcblxuXHR9XG5cblx0cmV0dXJuICBkaXJlY3RpdmU7XG59IiwiLyogZGVsaXZlcnlEZXRhaWxzLmRpcmVjdGl2ZS5qcyAqL1xuXG4vKipcbiogQGRlc2MgdG9vbGJhciBkaXJlY3RpdmUgdGhhdCBpcyB1c2VkIG9uIHRoZSBtYWluIHBhZ2UgYWNyb3NzIHRoZSBlbnRpcmUgYXBwLlxuKiBAZXhhbXBsZSA8ZGl2IGRlbGl2ZXJ5LWRldGFpbHM+PC9kaXY+XG4qL1xuXG5hbmd1bGFyXG5cdC5tb2R1bGUoJ2FoTnV0cycpXG5cdC5kaXJlY3RpdmUoJ2RlbGl2ZXJ5RGV0YWlscycsIGRlbGl2ZXJ5RGV0YWlscyk7XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gZGVsaXZlcnlEZXRhaWxzKCkge1xuXHR2YXIgZGlyZWN0aXZlID0ge1xuXHRcdHJlc3RyaWN0OiAnQUVDTScsXG5cdFx0dGVtcGxhdGVVcmw6ICd2aWV3cy9kaXJlY3RpdmVzL2RlbGl2ZXJ5RGV0YWlscy5kaXJlY3RpdmUuaHRtJyxcblx0XHRyZXBsYWNlOiB0cnVlLFxuXHRcdHNjb3BlOiB7XG5cdFx0XHRkZWxpdmVyVG86ICc9J1xuXHRcdH0sXG5cdFx0bGluazogbGlua0Z1bmMsXG5cdFx0Y29udHJvbGxlcjogZGVsaXZlcnlEZXRhaWxzQ29udHJvbGxlcixcblx0XHRjb250cm9sbGVyQXM6ICd2bScsXG5cdFx0YmluZFRvQ29udHJvbGxlcjogdHJ1ZVxuXHR9XG5cblx0LyogQG5nSW5qZWN0ICovXG5cdGZ1bmN0aW9uIGxpbmtGdW5jKHNjb3BlLCBlbCwgYXR0ciwgY3RybCkge1xuICAgIH1cblxuICAgIGRlbGl2ZXJ5RGV0YWlsc0NvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyRsb2cnLCAnJGxvY2F0aW9uJ107XG4gICAgLyogQG5nSW5qZWN0ICovXG4gICAgZnVuY3Rpb24gZGVsaXZlcnlEZXRhaWxzQ29udHJvbGxlcigkc2NvcGUsICRsb2csICRsb2NhdGlvbikge1xuXHQgICAgdmFyIHZtID0gdGhpcztcblxuXHQgICAgJGxvZy5pbmZvKCdpbiB0aGUgZGVsaXZlcnlEZXRhaWxzIGRpcmVjdGl2ZScsIHZtLmRlbGl2ZXJUbyk7XG5cblx0ICAgIC8vXG5cdCAgICB2bS5jaGFuZ2VEZXRhaWxzID0gZnVuY3Rpb24oKSB7XG5cdCAgICBcdCRsb2NhdGlvbi5wYXRoKCcvZ2V0dGluZy10aGUtcHJvZHVjdC8nICsgJzEwJyk7XG5cdCAgICB9O1xuXHR9XG5cblx0cmV0dXJuICBkaXJlY3RpdmU7XG59IiwiLyogZmVhdHVyZWRQcm9kdWN0cy5kaXJlY3RpdmUuanMgKi9cblxuLyoqXG4qIEBkZXNjIHRvb2xiYXIgZGlyZWN0aXZlIHRoYXQgaXMgdXNlZCBvbiB0aGUgbWFpbiBwYWdlIGFjcm9zcyB0aGUgZW50aXJlIGFwcC5cbiogQGV4YW1wbGUgPGRpdiBmZWF0dXJlZC1wcm9kdWN0cz48L2Rpdj5cbiovXG5cbmFuZ3VsYXJcblx0Lm1vZHVsZSgnYWhOdXRzJylcblx0LmRpcmVjdGl2ZSgnZmVhdHVyZWRQcm9kdWN0cycsIGZlYXR1cmVkUHJvZHVjdHMpO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIGZlYXR1cmVkUHJvZHVjdHMoKSB7XG5cdHZhciBkaXJlY3RpdmUgPSB7XG5cdFx0cmVzdHJpY3Q6ICdBRUNNJyxcblx0XHR0ZW1wbGF0ZVVybDogJ3ZpZXdzL2RpcmVjdGl2ZXMvZmVhdHVyZWRQcm9kdWN0cy5kaXJlY3RpdmUuaHRtJyxcblx0XHRyZXBsYWNlOiB0cnVlLFxuXHRcdHNjb3BlOiB7fSxcblx0XHRsaW5rOiBsaW5rRnVuYyxcblx0XHRjb250cm9sbGVyOiBmZWF0dXJlZFByb2R1Y3RzQ29udHJvbGxlcixcblx0XHRjb250cm9sbGVyQXM6ICd2bScsXG5cdFx0YmluZFRvQ29udHJvbGxlcjogdHJ1ZVxuXHR9XG5cblx0LyogQG5nSW5qZWN0ICovXG5cdGZ1bmN0aW9uIGxpbmtGdW5jKHNjb3BlLCBlbCwgYXR0ciwgY3RybCkge1xuICAgIH1cblxuICAgIGZlYXR1cmVkUHJvZHVjdHNDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsICckbG9nJywgJyRsb2NhdGlvbiddO1xuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIGZlYXR1cmVkUHJvZHVjdHNDb250cm9sbGVyKCRzY29wZSwgJGxvZywgJGxvY2F0aW9uKSB7XG5cdCAgICB2YXIgdm0gPSB0aGlzO1xuXG5cdCAgICAvLyRsb2cuaW5mbygnaW4gdGhlIGZlYXR1cmVkUHJvZHVjdHNDb250cm9sbGVyIGRpcmVjdGl2ZScpO1xuXG5cdCAgICAvL2RlZmluZSB2aWV3bW9kZWwgZnVuY3Rpb25zXG5cdCAgICB2bS5tclByZGN0c0J0biA9IGZ1bmN0aW9uKCkge1xuXHQgICAgXHQkbG9jYXRpb24ucGF0aCgnL2FsbC1wcm9kdWN0cycpO1xuXHQgICAgfVxuXG5cdCAgICB2bS5wcm9kdWN0U2VsZWN0aW9uQnRuID0gZnVuY3Rpb24ocHJvZHVjdE5hbWUpIHtcblx0ICAgIFx0Ly8kbG9nLmluZm8oJ2hpdCB0aGUgcHJvZHVjdCBzZWxlY3Rpb24gYnV0dG9uJyk7XG5cdCAgICBcdCRsb2NhdGlvbi5wYXRoKCcvYWxsLXByb2R1Y3RzJykuc2VhcmNoKCdmaWx0ZXInLHByb2R1Y3ROYW1lKTtcblx0ICAgIH1cblxuXHR9XG5cblx0cmV0dXJuICBkaXJlY3RpdmU7XG59IiwiLyogZmVkZXhPcHRpb25zLmRpcmVjdGl2ZS5qcyAqL1xuXG4vKipcbiogQGRlc2MgdG9vbGJhciBkaXJlY3RpdmUgdGhhdCBpcyB1c2VkIG9uIHRoZSBtYWluIHBhZ2UgYWNyb3NzIHRoZSBlbnRpcmUgYXBwLlxuKiBAZXhhbXBsZSA8ZGl2IGZlZGV4LW9wdGlvbnM+PC9kaXY+XG4qL1xuXG5hbmd1bGFyXG5cdC5tb2R1bGUoJ2FoTnV0cycpXG5cdC5kaXJlY3RpdmUoJ2ZlZGV4T3B0aW9ucycsIGZlZGV4T3B0aW9ucyk7XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gZmVkZXhPcHRpb25zKCkge1xuXHR2YXIgZGlyZWN0aXZlID0ge1xuXHRcdHJlc3RyaWN0OiAnQUVDTScsXG5cdFx0dGVtcGxhdGVVcmw6ICd2aWV3cy9kaXJlY3RpdmVzL2ZlZGV4T3B0aW9ucy5kaXJlY3RpdmUuaHRtJyxcblx0XHRyZXBsYWNlOiB0cnVlLFxuXHRcdHNjb3BlOiB7fSxcblx0XHRsaW5rOiBsaW5rRnVuYyxcblx0XHRjb250cm9sbGVyOiBmZWRleE9wdGlvbnNDb250cm9sbGVyLFxuXHRcdGNvbnRyb2xsZXJBczogJ3ZtJyxcblx0XHRiaW5kVG9Db250cm9sbGVyOiB0cnVlXG5cdH1cblxuXHQvKiBAbmdJbmplY3QgKi9cblx0ZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsLCBhdHRyLCBjdHJsKSB7XG4gICAgfVxuXG4gICAgZmVkZXhPcHRpb25zQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGxvZyddO1xuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIGZlZGV4T3B0aW9uc0NvbnRyb2xsZXIoJHNjb3BlLCAkbG9nKSB7XG5cdCAgICB2YXIgdm0gPSB0aGlzO1xuXG5cdCAgICAvLyRsb2cuaW5mbygnaW4gdGhlIGhlYWRlciBkaXJlY3RpdmUnKTtcblxuXHR9XG5cblx0cmV0dXJuICBkaXJlY3RpdmU7XG59IiwiLyogZnVsbFByb2R1Y3RQcm9maWxlLmRpcmVjdGl2ZS5qcyAqL1xuXG4vKipcbiogQGRlc2MgdG9vbGJhciBkaXJlY3RpdmUgdGhhdCBpcyB1c2VkIG9uIHRoZSBtYWluIHBhZ2UgYWNyb3NzIHRoZSBlbnRpcmUgYXBwLlxuKiBAZXhhbXBsZSA8ZGl2IGZ1bGwtcHJvZHVjdC1wcm9maWxlPjwvZGl2PlxuKi9cblxuYW5ndWxhclxuXHQubW9kdWxlKCdhaE51dHMnKVxuXHQuZGlyZWN0aXZlKCdmdWxsUHJvZHVjdFByb2ZpbGUnLCBmdWxsUHJvZHVjdFByb2ZpbGUpO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIGZ1bGxQcm9kdWN0UHJvZmlsZSgpIHtcblx0dmFyIGRpcmVjdGl2ZSA9IHtcblx0XHRyZXN0cmljdDogJ0FFQ00nLFxuXHRcdHRlbXBsYXRlVXJsOiAndmlld3MvZGlyZWN0aXZlcy9mdWxsUHJvZHVjdFByb2ZpbGUuZGlyZWN0aXZlLmh0bScsXG5cdFx0cmVwbGFjZTogdHJ1ZSxcblx0XHRzY29wZToge1xuXHRcdFx0cHJvZHVjdDogJz0nXG5cdFx0fSxcblx0XHRsaW5rOiBsaW5rRnVuYyxcblx0XHRjb250cm9sbGVyOiBmdWxsUHJvZHVjdFByb2ZpbGVDb250cm9sbGVyLFxuXHRcdGNvbnRyb2xsZXJBczogJ3ZtJyxcblx0XHRiaW5kVG9Db250cm9sbGVyOiB0cnVlXG5cdH1cblxuXHQvKiBAbmdJbmplY3QgKi9cblx0ZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsLCBhdHRyLCBjdHJsKSB7XG4gICAgfVxuXG4gICAgZnVsbFByb2R1Y3RQcm9maWxlQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGxvZycsICckbG9jYXRpb24nLCAnc2hvcHBpbmdDYXJ0J107XG4gICAgLyogQG5nSW5qZWN0ICovXG4gICAgZnVuY3Rpb24gZnVsbFByb2R1Y3RQcm9maWxlQ29udHJvbGxlcigkc2NvcGUsICRsb2csICRsb2NhdGlvbiwgc2hvcHBpbmdDYXJ0KSB7XG5cdCAgICB2YXIgdm0gPSB0aGlzO1xuXHQgICAgdm0uY2FydCA9IHNob3BwaW5nQ2FydDtcblx0ICAgIHZtLml0ZW1TZWxlY3Rpb25zID0gdm0ucHJvZHVjdC5zaXplcztcblxuXHQgICAgLy9hZGQgc2VsZWN0ZWQgaXRlbXMgdG8gY2FydFxuXHQgICAgdm0uYWRkVG9DYXJ0ID0gZnVuY3Rpb24oaXRlbVNlbGVjdGlvbnMpIHtcblxuXHQgICAgXHQvL2NvbnNvbGUubG9nKCd2bS5pdGVtU2VsZWN0aW9ucycsIHZtLml0ZW1TZWxlY3Rpb25zKTtcblxuXHQgICAgXHQvL2l0ZXJhdGUgdGhyb3VnaCBlYWNoIG9mIHRoZSBzaXplcywgaWYgdGhlIHF0eSBpcyBncmVhdGVyIHRoYW4gMCwgYWRkIGl0XG5cdCAgICBcdHZtLml0ZW1TZWxlY3Rpb25zLmZvckVhY2goZnVuY3Rpb24oc2l6ZSkge1xuXG5cdCAgICBcdFx0aWYoc2l6ZS5xdHkgPiAwKSB2bS5jYXJ0LmFkZEl0ZW0oc2l6ZSk7XG5cdCAgICBcdH0pO1xuXG5cdCAgICBcdC8vaWYgYXF1aXN0aW9uIG1ldGhvZCBpcyBkZWZpbmVkLCBnbyBzdHJhaWdodCB0byBzaG9wcGluZyBjYXJ0XG5cdCAgICBcdGlmKHZtLmNhcnQuYWNxTWV0aElzRGVmaW5lZCgpKSB7XG5cblx0ICAgIFx0XHQkbG9jYXRpb24ucGF0aCgnL2NhcnQnKTtcblxuXHQgICAgXHR9IGVsc2Uge1xuXHQgICAgXHRcdC8vb3RoZXJ3aXNlIGRpcmVjdCB0byBnZXR0aW5nIHRoZSBwcm9kdWN0XG5cdCAgICBcdFx0JGxvY2F0aW9uLnBhdGgoJy9nZXR0aW5nLXRoZS1wcm9kdWN0LycgKyAnMTAnKTtcblx0ICAgIFx0fVxuXHQgICAgXHRcblx0ICAgIH07XG5cblx0fVxuXG5cdHJldHVybiAgZGlyZWN0aXZlO1xufSIsIi8qIGhlcm9CYW5uZXIuZGlyZWN0aXZlLmpzICovXG5cbi8qKlxuKiBAZGVzYyB0b29sYmFyIGRpcmVjdGl2ZSB0aGF0IGlzIHVzZWQgb24gdGhlIG1haW4gcGFnZSBhY3Jvc3MgdGhlIGVudGlyZSBhcHAuXG4qIEBleGFtcGxlIDxkaXYgaGVyby1iYW5uZXI+PC9kaXY+XG4qL1xuXG5hbmd1bGFyXG5cdC5tb2R1bGUoJ2FoTnV0cycpXG5cdC5kaXJlY3RpdmUoJ2hlcm9CYW5uZXInLCBoZXJvQmFubmVyKTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBoZXJvQmFubmVyKCkge1xuXHR2YXIgZGlyZWN0aXZlID0ge1xuXHRcdHJlc3RyaWN0OiAnQUVDTScsXG5cdFx0dGVtcGxhdGVVcmw6ICd2aWV3cy9kaXJlY3RpdmVzL2hlcm9CYW5uZXIuZGlyZWN0aXZlLmh0bScsXG5cdFx0cmVwbGFjZTogdHJ1ZSxcblx0XHRzY29wZToge30sXG5cdFx0bGluazogbGlua0Z1bmMsXG5cdFx0Y29udHJvbGxlcjogaGVyb0Jhbm5lckNvbnRyb2xsZXIsXG5cdFx0Y29udHJvbGxlckFzOiAndm0nLFxuXHRcdGJpbmRUb0NvbnRyb2xsZXI6IHRydWVcblx0fVxuXG5cdC8qIEBuZ0luamVjdCAqL1xuXHRmdW5jdGlvbiBsaW5rRnVuYyhzY29wZSwgZWwsIGF0dHIsIGN0cmwpIHtcbiAgICB9XG5cbiAgICBoZXJvQmFubmVyQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGxvZyddO1xuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIGhlcm9CYW5uZXJDb250cm9sbGVyKCRzY29wZSwgJGxvZykge1xuXHQgICAgdmFyIHZtID0gdGhpcztcblxuXHQgICAgLy8kbG9nLmluZm8oJ2luIHRoZSBoZXJvIGJhbm5lciBkaXJlY3RpdmUnKTtcblxuXHR9XG5cblx0cmV0dXJuICBkaXJlY3RpdmU7XG59IiwiLyogcGFzc3dvcmRSZXNldC5kaXJlY3RpdmUuanMgKi9cblxuLyoqXG4qIEBkZXNjIHRvb2xiYXIgZGlyZWN0aXZlIHRoYXQgaXMgdXNlZCBvbiB0aGUgbWFpbiBwYWdlIGFjcm9zcyB0aGUgZW50aXJlIGFwcC5cbiogQGV4YW1wbGUgPGRpdiBwYXNzd29yZC1yZXNldD48L2Rpdj5cbiovXG5cbmFuZ3VsYXJcblx0Lm1vZHVsZSgnYWhOdXRzJylcblx0LmRpcmVjdGl2ZSgncGFzc3dvcmRSZXNldCcsIHBhc3N3b3JkUmVzZXQpO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIHBhc3N3b3JkUmVzZXQoKSB7XG5cdHZhciBkaXJlY3RpdmUgPSB7XG5cdFx0cmVzdHJpY3Q6ICdBRUNNJyxcblx0XHR0ZW1wbGF0ZVVybDogJ3ZpZXdzL2RpcmVjdGl2ZXMvcGFzc3dvcmRSZXNldC5kaXJlY3RpdmUuaHRtJyxcblx0XHRyZXBsYWNlOiB0cnVlLFxuXHRcdHNjb3BlOiB7fSxcblx0XHRsaW5rOiBsaW5rRnVuYyxcblx0XHRjb250cm9sbGVyOiBwYXNzd29yZFJlc2V0Q29udHJvbGxlcixcblx0XHRjb250cm9sbGVyQXM6ICd2bScsXG5cdFx0YmluZFRvQ29udHJvbGxlcjogdHJ1ZVxuXHR9XG5cblx0LyogQG5nSW5qZWN0ICovXG5cdGZ1bmN0aW9uIGxpbmtGdW5jKHNjb3BlLCBlbCwgYXR0ciwgY3RybCkge1xuICAgIH1cblxuICAgIHBhc3N3b3JkUmVzZXRDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsICckbG9nJywgJyRsb2NhdGlvbiddO1xuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIHBhc3N3b3JkUmVzZXRDb250cm9sbGVyKCRzY29wZSwgJGxvZywgJGxvY2F0aW9uKSB7XG5cdCAgICB2YXIgdm0gPSB0aGlzO1xuXG5cdCAgICAkbG9nLmluZm8oJ2luIHRoZSBwYXNzd29yZFJlc2V0IGRpcmVjdGl2ZScpO1xuXG5cdCAgICAvL2RlZmluZSB2aWV3bW9kZWwgZnVuY3Rpb25zXG5cdCAgICB2bS5lbWFpbCA9ICcnO1xuXG5cdCAgICAvL2RlZmluZSBsb2NhbCBmdW5jdGlvbnNcblx0ICAgIHZtLmJhY2sgPSBmdW5jdGlvbigpIHtcblx0ICAgIFx0JGxvY2F0aW9uLnBhdGgoJy9sb2dpbicpO1xuXHQgICAgfTtcblxuXHQgICAgdm0uc3VibWl0ID0gZnVuY3Rpb24oKSB7XG5cdCAgICBcdCRsb2cuaW5mbygnc3VibWl0dGluZyBlbWFpbCcsIHZtLmVtYWlsKTtcblx0ICAgIH1cblx0fVxuXG5cdHJldHVybiAgZGlyZWN0aXZlO1xufSIsIi8qIHBpY2t1cE9yRGVsaXZlcnkuZGlyZWN0aXZlLmpzICovXG5cbi8qKlxuKiBAZGVzYyB0b29sYmFyIGRpcmVjdGl2ZSB0aGF0IGlzIHVzZWQgb24gdGhlIG1haW4gcGFnZSBhY3Jvc3MgdGhlIGVudGlyZSBhcHAuXG4qIEBleGFtcGxlIDxkaXYgcGlja3VwLW9yLWRlbGl2ZXJ5PjwvZGl2PlxuKi9cblxuYW5ndWxhclxuXHQubW9kdWxlKCdhaE51dHMnKVxuXHQuZGlyZWN0aXZlKCdwaWNrdXBPckRlbGl2ZXJ5JywgcGlja3VwT3JEZWxpdmVyeSk7XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gcGlja3VwT3JEZWxpdmVyeSgpIHtcblx0dmFyIGRpcmVjdGl2ZSA9IHtcblx0XHRyZXN0cmljdDogJ0FFQ00nLFxuXHRcdHRlbXBsYXRlVXJsOiAndmlld3MvZGlyZWN0aXZlcy9waWNrdXBPckRlbGl2ZXJ5LmRpcmVjdGl2ZS5odG0nLFxuXHRcdHJlcGxhY2U6IHRydWUsXG5cdFx0c2NvcGU6IHtcblx0XHRcdG1ldGhvZDogXCI9XCIsXG5cdFx0XHRkZXRhaWxzOiBcIj1cIlxuXHRcdH0sXG5cdFx0bGluazogbGlua0Z1bmMsXG5cdFx0Y29udHJvbGxlcjogcGlja3VwT3JEZWxpdmVyeUNvbnRyb2xsZXIsXG5cdFx0Y29udHJvbGxlckFzOiAndm0nLFxuXHRcdGJpbmRUb0NvbnRyb2xsZXI6IHRydWVcblx0fVxuXG5cdC8qIEBuZ0luamVjdCAqL1xuXHRmdW5jdGlvbiBsaW5rRnVuYyhzY29wZSwgZWwsIGF0dHIsIGN0cmwpIHtcbiAgICB9XG5cbiAgICBwaWNrdXBPckRlbGl2ZXJ5Q29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGxvZyddO1xuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIHBpY2t1cE9yRGVsaXZlcnlDb250cm9sbGVyKCRzY29wZSwgJGxvZykge1xuXHQgICAgdmFyIHZtID0gdGhpcztcblxuXHQgICAgJGxvZy5pbmZvKCdpbiB0aGUgcGlja3VwLW9yLWRlbGl2ZXJ5IGRpcmVjdGl2ZScsIHZtLm1ldGhvZCwgdm0uZGV0YWlscyk7XG5cblx0fVxuXG5cdHJldHVybiAgZGlyZWN0aXZlO1xufSIsIi8qIHByaW1hcnlDb250ZW50LmRpcmVjdGl2ZS5qcyAqL1xuXG4vKipcbiogQGRlc2MgdG9vbGJhciBkaXJlY3RpdmUgdGhhdCBpcyB1c2VkIG9uIHRoZSBtYWluIHBhZ2UgYWNyb3NzIHRoZSBlbnRpcmUgYXBwLlxuKiBAZXhhbXBsZSA8ZGl2IHByaW1hcnktY29udGVudD48L2Rpdj5cbiovXG5cbmFuZ3VsYXJcblx0Lm1vZHVsZSgnYWhOdXRzJylcblx0LmRpcmVjdGl2ZSgncHJpbWFyeUNvbnRlbnQnLCBwcmltYXJ5Q29udGVudCk7XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gcHJpbWFyeUNvbnRlbnQoKSB7XG5cdHZhciBkaXJlY3RpdmUgPSB7XG5cdFx0cmVzdHJpY3Q6ICdBRUNNJyxcblx0XHR0ZW1wbGF0ZVVybDogJ3ZpZXdzL2RpcmVjdGl2ZXMvcHJpbWFyeUNvbnRlbnQuZGlyZWN0aXZlLmh0bScsXG5cdFx0cmVwbGFjZTogdHJ1ZSxcblx0XHRzY29wZToge30sXG5cdFx0bGluazogbGlua0Z1bmMsXG5cdFx0Y29udHJvbGxlcjogcHJpbWFyeUNvbnRlbnRDb250cm9sbGVyLFxuXHRcdGNvbnRyb2xsZXJBczogJ3ZtJyxcblx0XHRiaW5kVG9Db250cm9sbGVyOiB0cnVlXG5cdH1cblxuXHQvKiBAbmdJbmplY3QgKi9cblx0ZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsLCBhdHRyLCBjdHJsKSB7XG4gICAgfVxuXG4gICAgcHJpbWFyeUNvbnRlbnRDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsICckbG9nJ107XG4gICAgLyogQG5nSW5qZWN0ICovXG4gICAgZnVuY3Rpb24gcHJpbWFyeUNvbnRlbnRDb250cm9sbGVyKCRzY29wZSwgJGxvZykge1xuXHQgICAgdmFyIHZtID0gdGhpcztcblxuXHQgICAgJGxvZy5pbmZvKCdpbiB0aGUgaGVhZGVyIGRpcmVjdGl2ZScpO1xuXG5cdH1cblxuXHRyZXR1cm4gIGRpcmVjdGl2ZTtcbn0iLCIvKiBwcm9kdWN0U2l6ZVBpY2tlci5kaXJlY3RpdmUuanMgKi9cblxuLyoqXG4qIEBkZXNjIHRvb2xiYXIgZGlyZWN0aXZlIHRoYXQgaXMgdXNlZCBvbiB0aGUgbWFpbiBwYWdlIGFjcm9zcyB0aGUgZW50aXJlIGFwcC5cbiogQGV4YW1wbGUgPHByb2R1Y3Qtc2l6ZS1waWNrZXI+PC9kaXY+XG4qL1xuXG5hbmd1bGFyXG5cdC5tb2R1bGUoJ2FoTnV0cycpXG5cdC5kaXJlY3RpdmUoJ3Byb2R1Y3RTaXplUGlja2VyJywgcHJvZHVjdFNpemVQaWNrZXIpO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIHByb2R1Y3RTaXplUGlja2VyKCkge1xuXHR2YXIgZGlyZWN0aXZlID0ge1xuXHRcdHJlc3RyaWN0OiAnQUVDTScsXG5cdFx0dGVtcGxhdGVVcmw6ICd2aWV3cy9kaXJlY3RpdmVzL3Byb2R1Y3RTaXplUGlja2VyLmRpcmVjdGl2ZS5odG0nLFxuXHRcdHJlcGxhY2U6IHRydWUsXG5cdFx0c2NvcGU6IHtcblx0XHRcdHNpemVzOiAnPSdcblx0XHR9LFxuXHRcdGxpbms6IGxpbmtGdW5jLFxuXHRcdGNvbnRyb2xsZXI6IHByb2R1Y3RTaXplUGlja2VyQ29udHJvbGxlcixcblx0XHRjb250cm9sbGVyQXM6ICd2bScsXG5cdFx0YmluZFRvQ29udHJvbGxlcjogdHJ1ZVxuXHR9XG5cblx0LyogQG5nSW5qZWN0ICovXG5cdGZ1bmN0aW9uIGxpbmtGdW5jKHNjb3BlLCBlbCwgYXR0ciwgY3RybCkge1xuICAgIH1cblxuICAgIHByb2R1Y3RTaXplUGlja2VyQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGxvZyddO1xuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIHByb2R1Y3RTaXplUGlja2VyQ29udHJvbGxlcigkc2NvcGUsICRsb2cpIHtcblx0ICAgIHZhciB2bSA9IHRoaXM7XG5cblx0ICAgIC8vJGxvZy5pbmZvKCdpbiB0aGUgaGVhZGVyIGRpcmVjdGl2ZScpO1xuXG5cdH1cblxuXHRyZXR1cm4gIGRpcmVjdGl2ZTtcbn0iLCIvKiBwcm9kdWN0VGh1bWJuYWlscy5kaXJlY3RpdmUuanMgKi9cblxuLyoqXG4qIEBkZXNjIHRvb2xiYXIgZGlyZWN0aXZlIHRoYXQgaXMgdXNlZCBvbiB0aGUgbWFpbiBwYWdlIGFjcm9zcyB0aGUgZW50aXJlIGFwcC5cbiogQGV4YW1wbGUgPGRpdiBwcmRjdC10aG1ibmFpbD48L2Rpdj5cbiovXG5cbmFuZ3VsYXJcblx0Lm1vZHVsZSgnYWhOdXRzJylcblx0LmRpcmVjdGl2ZSgncHJkY3RUaG1ibmwnLCBwcmRjdFRobWJubCk7XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gcHJkY3RUaG1ibmwoKSB7XG5cdHZhciBkaXJlY3RpdmUgPSB7XG5cdFx0cmVzdHJpY3Q6ICdBRUNNJyxcblx0XHR0ZW1wbGF0ZVVybDogJ3ZpZXdzL2RpcmVjdGl2ZXMvcHJkY3RUaG1ibmwuZGlyZWN0aXZlLmh0bScsXG5cdFx0cmVwbGFjZTogdHJ1ZSxcblx0XHRzY29wZToge1xuXHRcdFx0cHJvZHVjdDogJz0nXG5cdFx0fSxcblx0XHRsaW5rOiBsaW5rRnVuYyxcblx0XHRjb250cm9sbGVyOiBwcmRjdFRobWJubENvbnRyb2xsZXIsXG5cdFx0Y29udHJvbGxlckFzOiAndm0nLFxuXHRcdGJpbmRUb0NvbnRyb2xsZXI6IHRydWVcblx0fVxuXG5cdC8qIEBuZ0luamVjdCAqL1xuXHRmdW5jdGlvbiBsaW5rRnVuYyhzY29wZSwgZWwsIGF0dHIsIGN0cmwpIHtcbiAgICB9XG5cbiAgICBwcmRjdFRobWJubENvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyRsb2cnXTtcbiAgICAvKiBAbmdJbmplY3QgKi9cbiAgICBmdW5jdGlvbiBwcmRjdFRobWJubENvbnRyb2xsZXIoJHNjb3BlLCAkbG9nKSB7XG5cdCAgICB2YXIgdm0gPSB0aGlzO1xuXG5cdCAgICAvLyRsb2cuaW5mbygnaW4gdGhlIHByZGN0VGhtYm5sIGRpcmVjdGl2ZScpO1xuXG5cdH1cblxuXHRyZXR1cm4gIGRpcmVjdGl2ZTtcbn0iLCIvKiBzZWxlY3REZWxpdmVyeU1ldGhvZC5kaXJlY3RpdmUuanMgKi9cblxuLyoqXG4qIEBkZXNjIHRvb2xiYXIgZGlyZWN0aXZlIHRoYXQgaXMgdXNlZCBvbiB0aGUgbWFpbiBwYWdlIGFjcm9zcyB0aGUgZW50aXJlIGFwcC5cbiogQGV4YW1wbGUgPGRpdiBzZWxlY3QtZGVsaXZlcnktbWV0aG9kPjwvZGl2PlxuKi9cblxuYW5ndWxhclxuXHQubW9kdWxlKCdhaE51dHMnKVxuXHQuZGlyZWN0aXZlKCdzZWxlY3REZWxpdmVyeU1ldGhvZCcsIHNlbGVjdERlbGl2ZXJ5TWV0aG9kKTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBzZWxlY3REZWxpdmVyeU1ldGhvZCgpIHtcblx0dmFyIGRpcmVjdGl2ZSA9IHtcblx0XHRyZXN0cmljdDogJ0FFQ00nLFxuXHRcdHRlbXBsYXRlVXJsOiAndmlld3MvZGlyZWN0aXZlcy9zZWxlY3REZWxpdmVyeU1ldGhvZC5kaXJlY3RpdmUuaHRtJyxcblx0XHRyZXBsYWNlOiB0cnVlLFxuXHRcdHNjb3BlOiB7XG5cdFx0XHR1c3BzOiBcIj1cIlxuXHRcdH0sXG5cdFx0bGluazogbGlua0Z1bmMsXG5cdFx0Y29udHJvbGxlcjogc2VsZWN0RGVsaXZlcnlNZXRob2RDb250cm9sbGVyLFxuXHRcdGNvbnRyb2xsZXJBczogJ3ZtJyxcblx0XHRiaW5kVG9Db250cm9sbGVyOiB0cnVlXG5cdH1cblxuXHQvKiBAbmdJbmplY3QgKi9cblx0ZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsLCBhdHRyLCBjdHJsKSB7XG4gICAgfVxuXG4gICAgc2VsZWN0RGVsaXZlcnlNZXRob2RDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsICckbG9nJ107XG4gICAgLyogQG5nSW5qZWN0ICovXG4gICAgZnVuY3Rpb24gc2VsZWN0RGVsaXZlcnlNZXRob2RDb250cm9sbGVyKCRzY29wZSwgJGxvZykge1xuXHQgICAgdmFyIHZtID0gdGhpcztcblxuXHQgICAgLy8kbG9nLmluZm8oJ2luIHRoZSBoZWFkZXIgZGlyZWN0aXZlJyk7XG5cblx0fVxuXG5cdHJldHVybiAgZGlyZWN0aXZlO1xufSIsIi8qIHNlbGVjdFBPckQuZGlyZWN0aXZlLmpzICovXG5cbi8qKlxuKiBAZGVzYyB0b29sYmFyIGRpcmVjdGl2ZSB0aGF0IGlzIHVzZWQgb24gdGhlIG1haW4gcGFnZSBhY3Jvc3MgdGhlIGVudGlyZSBhcHAuXG4qIEBleGFtcGxlIDxkaXYgc2VsZWN0LXAtb3ItZD48L2Rpdj5cbiovXG5cbmFuZ3VsYXJcblx0Lm1vZHVsZSgnYWhOdXRzJylcblx0LmRpcmVjdGl2ZSgnc2VsZWN0UE9yRCcsIHNlbGVjdFBPckQpO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIHNlbGVjdFBPckQoKSB7XG5cdHZhciBkaXJlY3RpdmUgPSB7XG5cdFx0cmVzdHJpY3Q6ICdBRUNNJyxcblx0XHR0ZW1wbGF0ZVVybDogJ3ZpZXdzL2RpcmVjdGl2ZXMvc2VsZWN0UE9yRC5kaXJlY3RpdmUuaHRtJyxcblx0XHRyZXBsYWNlOiB0cnVlLFxuXHRcdHNjb3BlOiB7fSxcblx0XHRsaW5rOiBsaW5rRnVuYyxcblx0XHRjb250cm9sbGVyOiBzZWxlY3RQT3JEQ29udHJvbGxlcixcblx0XHRjb250cm9sbGVyQXM6ICd2bScsXG5cdFx0YmluZFRvQ29udHJvbGxlcjogdHJ1ZVxuXHR9XG5cblx0LyogQG5nSW5qZWN0ICovXG5cdGZ1bmN0aW9uIGxpbmtGdW5jKHNjb3BlLCBlbCwgYXR0ciwgY3RybCkge1xuICAgIH1cblxuICAgIHNlbGVjdFBPckRDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsICckbG9nJ107XG4gICAgLyogQG5nSW5qZWN0ICovXG4gICAgZnVuY3Rpb24gc2VsZWN0UE9yRENvbnRyb2xsZXIoJHNjb3BlLCAkbG9nKSB7XG5cdCAgICB2YXIgdm0gPSB0aGlzO1xuXG5cdCAgICAvLyRsb2cuaW5mbygnaW4gdGhlIGhlYWRlciBkaXJlY3RpdmUnKTtcblxuXHR9XG5cblx0cmV0dXJuICBkaXJlY3RpdmU7XG59IiwiLyogc2VsZWN0UGlja3VwTG9jYXRpb24uZGlyZWN0aXZlLmpzICovXG5cbi8qKlxuKiBAZGVzYyB0b29sYmFyIGRpcmVjdGl2ZSB0aGF0IGlzIHVzZWQgb24gdGhlIG1haW4gcGFnZSBhY3Jvc3MgdGhlIGVudGlyZSBhcHAuXG4qIEBleGFtcGxlIDxkaXYgc2VsZWN0LXBpY2t1cC1sb2NhdGlvbj48L2Rpdj5cbiovXG5cbmFuZ3VsYXJcblx0Lm1vZHVsZSgnYWhOdXRzJylcblx0LmRpcmVjdGl2ZSgnc2VsZWN0UGlja3VwTG9jYXRpb24nLCBzZWxlY3RQaWNrdXBMb2NhdGlvbik7XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gc2VsZWN0UGlja3VwTG9jYXRpb24oKSB7XG5cdHZhciBkaXJlY3RpdmUgPSB7XG5cdFx0cmVzdHJpY3Q6ICdBRUNNJyxcblx0XHR0ZW1wbGF0ZVVybDogJ3ZpZXdzL2RpcmVjdGl2ZXMvc2VsZWN0UGlja3VwTG9jYXRpb24uZGlyZWN0aXZlLmh0bScsXG5cdFx0cmVwbGFjZTogdHJ1ZSxcblx0XHRzY29wZToge30sXG5cdFx0bGluazogbGlua0Z1bmMsXG5cdFx0Y29udHJvbGxlcjogc2VsZWN0UGlja3VwTG9jYXRpb25Db250cm9sbGVyLFxuXHRcdGNvbnRyb2xsZXJBczogJ3ZtJyxcblx0XHRiaW5kVG9Db250cm9sbGVyOiB0cnVlXG5cdH1cblxuXHQvKiBAbmdJbmplY3QgKi9cblx0ZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsLCBhdHRyLCBjdHJsKSB7XG4gICAgfVxuXG4gICAgc2VsZWN0UGlja3VwTG9jYXRpb25Db250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsICckbG9nJ107XG4gICAgLyogQG5nSW5qZWN0ICovXG4gICAgZnVuY3Rpb24gc2VsZWN0UGlja3VwTG9jYXRpb25Db250cm9sbGVyKCRzY29wZSwgJGxvZykge1xuXHQgICAgdmFyIHZtID0gdGhpcztcblxuXHQgICAgLy8kbG9nLmluZm8oJ2luIHRoZSBoZWFkZXIgZGlyZWN0aXZlJyk7XG5cblx0fVxuXG5cdHJldHVybiAgZGlyZWN0aXZlO1xufSIsIi8qIHNpemVRdHlTZWxlY3Rvci5kaXJlY3RpdmUuanMgKi9cblxuLyoqXG4qIEBkZXNjIHRvb2xiYXIgZGlyZWN0aXZlIHRoYXQgaXMgdXNlZCBvbiB0aGUgbWFpbiBwYWdlIGFjcm9zcyB0aGUgZW50aXJlIGFwcC5cbiogQGV4YW1wbGUgPGRpdiBzaXplLXF0eS1zZWxlY3Rvcj48L2Rpdj5cbiovXG5cbmFuZ3VsYXJcblx0Lm1vZHVsZSgnYWhOdXRzJylcblx0LmRpcmVjdGl2ZSgnc2l6ZVF0eVNlbGVjdG9yJywgc2l6ZVF0eVNlbGVjdG9yKTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBzaXplUXR5U2VsZWN0b3IoKSB7XG5cdHZhciBkaXJlY3RpdmUgPSB7XG5cdFx0cmVzdHJpY3Q6ICdBRUNNJyxcblx0XHR0ZW1wbGF0ZVVybDogJ3ZpZXdzL2RpcmVjdGl2ZXMvc2l6ZVF0eVNlbGVjdG9yLmRpcmVjdGl2ZS5odG0nLFxuXHRcdHJlcGxhY2U6IHRydWUsXG5cdFx0c2NvcGU6IHtcblx0XHRcdHNpemU6IFwiPVwiXG5cdFx0fSxcblx0XHRsaW5rOiBsaW5rRnVuYyxcblx0XHRjb250cm9sbGVyOiBzaXplUXR5U2VsZWN0b3JDb250cm9sbGVyLFxuXHRcdGNvbnRyb2xsZXJBczogJ3ZtJyxcblx0XHRiaW5kVG9Db250cm9sbGVyOiB0cnVlXG5cdH1cblxuXHQvKiBAbmdJbmplY3QgKi9cblx0ZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsLCBhdHRyLCBjdHJsKSB7XG4gICAgfVxuXG4gICAgc2l6ZVF0eVNlbGVjdG9yQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGxvZyddO1xuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIHNpemVRdHlTZWxlY3RvckNvbnRyb2xsZXIoJHNjb3BlLCAkbG9nKSB7XG5cdCAgICB2YXIgdm0gPSB0aGlzO1xuXG5cdCAgICAvLyRsb2cuaW5mbygnaW4gdGhlIGhlYWRlciBkaXJlY3RpdmUnKTtcblx0ICAgIHZtLmluY3JpbWVudCA9IGZ1bmN0aW9uKCkgeyB2bS5zaXplLnF0eSsrOyB9XG5cblx0ICAgIHZtLmRlY3JpbWVudCA9IGZ1bmN0aW9uKCkge1xuXHQgICAgXHRpZih2bS5zaXplLnF0eSA+PSAxKSB2bS5zaXplLnF0eS0tO1xuXHQgICAgfVxuXHR9XG5cblx0cmV0dXJuICBkaXJlY3RpdmU7XG59IiwiLyogdG9aaXBPbkRhdGUuZGlyZWN0aXZlLmpzICovXG5cbi8qKlxuKiBAZGVzYyB0b29sYmFyIGRpcmVjdGl2ZSB0aGF0IGlzIHVzZWQgb24gdGhlIG1haW4gcGFnZSBhY3Jvc3MgdGhlIGVudGlyZSBhcHAuXG4qIEBleGFtcGxlIDxkaXYgdG8temlwLW9uLWRhdGU+PC9kaXY+XG4qL1xuXG5hbmd1bGFyXG5cdC5tb2R1bGUoJ2FoTnV0cycpXG5cdC5kaXJlY3RpdmUoJ3RvWmlwT25EYXRlJywgdG9aaXBPbkRhdGUpO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIHRvWmlwT25EYXRlKCkge1xuXHR2YXIgZGlyZWN0aXZlID0ge1xuXHRcdHJlc3RyaWN0OiAnQUVDTScsXG5cdFx0dGVtcGxhdGVVcmw6ICd2aWV3cy9kaXJlY3RpdmVzL3RvWmlwT25EYXRlLmRpcmVjdGl2ZS5odG0nLFxuXHRcdHJlcGxhY2U6IHRydWUsXG5cdFx0c2NvcGU6IHtcblx0XHRcdGdvaW5nVG86IFwiPVwiLFxuXHRcdFx0dmlwSWRlbnRpZmllZDogJz0nXG5cdFx0fSxcblx0XHRsaW5rOiBsaW5rRnVuYyxcblx0XHRjb250cm9sbGVyOiB0b1ppcE9uRGF0ZUNvbnRyb2xsZXIsXG5cdFx0Y29udHJvbGxlckFzOiAndm0nLFxuXHRcdGJpbmRUb0NvbnRyb2xsZXI6IHRydWVcblx0fVxuXG5cdC8qIEBuZ0luamVjdCAqL1xuXHRmdW5jdGlvbiBsaW5rRnVuYyhzY29wZSwgZWwsIGF0dHIsIGN0cmwpIHtcblx0XHRzY29wZS4kd2F0Y2goXCJmb3JtLnppcGNvZGUuJHZhbGlkXCIsIGZ1bmN0aW9uIHppcE1vbml0b3IobmV3VmFsdWUsIG9sZFZhbHVlKSB7XG5cdFx0XHRjb25zb2xlLmxvZygnJHZhbGlkJywgbmV3VmFsdWUpO1xuXHRcdFx0aWYobmV3VmFsdWUgJiYgKHNjb3BlLnppcGNvZGUgIT0gXCJcIikpIHNjb3BlLmNvbXBsZXRlZCA9IHRydWU7XG5cdFx0XHRlbHNlIHNjb3BlLmNvbXBsZXRlZCA9IGZhbHNlO1xuXHRcdH0pO1xuICAgIH1cblxuICAgIHRvWmlwT25EYXRlQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGxvZycsICd1c3BzU2VydmljZXMnXTtcbiAgICAvKiBAbmdJbmplY3QgKi9cbiAgICBmdW5jdGlvbiB0b1ppcE9uRGF0ZUNvbnRyb2xsZXIoJHNjb3BlLCAkbG9nLCB1c3BzU2VydmljZXMpIHtcblx0ICAgIHZhciB2bSA9IHRoaXM7XG5cblx0ICAgIC8vJGxvZy5pbmZvKCdpbiB0aGUgaGVhZGVyIGRpcmVjdGl2ZScpO1xuXHQgICAgdm0uemlwY29kZUZpbmRlciA9IGZ1bmN0aW9uKCkge1xuXHQgICAgXHRhbGVydCgnZmluZGluZyB6aXBjb2RlJyk7XG5cdCAgICB9O1xuXG5cdCAgICB2bS5zdWJtaXRaaXAgPSBmdW5jdGlvbigpIHtcblx0ICAgIFx0Ly9jaGVjayBmb3IgYSB2YWxpZCBcblxuXHQgICAgfTtcblxuXHQgICAgdm0uY2hlY2t6aXBjb2RlID0gZnVuY3Rpb24oKSB7XG5cblx0ICAgIFx0dXNwc1NlcnZpY2VzLmNpdHlTdGF0ZUxvb2t1cCh2bS5nb2luZ1RvLnppcClcblx0ICAgIFx0LnRoZW4oZnVuY3Rpb24gc3VjY2VzKHMpIHtcblxuXHQgICAgXHRcdC8vaWYgdGhlIHJlc3VsdCBjb21lcyBiYWNrIHBvc2l0aXZlLCB1cGRhdGUgdGhlIHZhbHVlc1xuXHQgICAgXHRcdHZtLmdvaW5nVG8uY2l0eSA9IHMuY2l0eTtcblx0ICAgIFx0XHR2bS5nb2luZ1RvLnN0YXRlID0gcy5zdGF0ZTtcblxuXHQgICAgXHRcdCRzY29wZS4kYXBwbHkoKTtcblx0ICAgIFx0XHRcblx0ICAgIFx0fSkuY2F0Y2goZnVuY3Rpb24gZXJyb3IoZSkge1xuXG5cdCAgICBcdH0pO1xuXHQgICAgfTtcblx0fVxuXG5cdHJldHVybiAgZGlyZWN0aXZlO1xufSIsIi8qIHVwc09wdGlvbnMuZGlyZWN0aXZlLmpzICovXG5cbi8qKlxuKiBAZGVzYyB0b29sYmFyIGRpcmVjdGl2ZSB0aGF0IGlzIHVzZWQgb24gdGhlIG1haW4gcGFnZSBhY3Jvc3MgdGhlIGVudGlyZSBhcHAuXG4qIEBleGFtcGxlIDxkaXYgdXBzLW9wdGlvbnM+PC9kaXY+XG4qL1xuXG5hbmd1bGFyXG5cdC5tb2R1bGUoJ2FoTnV0cycpXG5cdC5kaXJlY3RpdmUoJ3Vwc09wdGlvbnMnLCB1cHNPcHRpb25zKTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiB1cHNPcHRpb25zKCkge1xuXHR2YXIgZGlyZWN0aXZlID0ge1xuXHRcdHJlc3RyaWN0OiAnQUVDTScsXG5cdFx0dGVtcGxhdGVVcmw6ICd2aWV3cy9kaXJlY3RpdmVzL3Vwc09wdGlvbnMuZGlyZWN0aXZlLmh0bScsXG5cdFx0cmVwbGFjZTogdHJ1ZSxcblx0XHRzY29wZToge30sXG5cdFx0bGluazogbGlua0Z1bmMsXG5cdFx0Y29udHJvbGxlcjogdXBzT3B0aW9uc0NvbnRyb2xsZXIsXG5cdFx0Y29udHJvbGxlckFzOiAndm0nLFxuXHRcdGJpbmRUb0NvbnRyb2xsZXI6IHRydWVcblx0fVxuXG5cdC8qIEBuZ0luamVjdCAqL1xuXHRmdW5jdGlvbiBsaW5rRnVuYyhzY29wZSwgZWwsIGF0dHIsIGN0cmwpIHtcbiAgICB9XG5cbiAgICB1cHNPcHRpb25zQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGxvZyddO1xuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIHVwc09wdGlvbnNDb250cm9sbGVyKCRzY29wZSwgJGxvZykge1xuXHQgICAgdmFyIHZtID0gdGhpcztcblxuXHQgICAgLy8kbG9nLmluZm8oJ2luIHRoZSBoZWFkZXIgZGlyZWN0aXZlJyk7XG5cblx0fVxuXG5cdHJldHVybiAgZGlyZWN0aXZlO1xufSIsIi8qIHVzZXJEYXNoYm9hcmQuZGlyZWN0aXZlLmpzICovXG5cbi8qKlxuKiBAZGVzYyB0b29sYmFyIGRpcmVjdGl2ZSB0aGF0IGlzIHVzZWQgb24gdGhlIG1haW4gcGFnZSBhY3Jvc3MgdGhlIGVudGlyZSBhcHAuXG4qIEBleGFtcGxlIDxkaXYgdXNlci1kYXNoYm9hcmQ+PC9kaXY+XG4qL1xuXG5hbmd1bGFyXG5cdC5tb2R1bGUoJ2FoTnV0cycpXG5cdC5kaXJlY3RpdmUoJ3VzZXJEYXNoYm9hcmQnLCB1c2VyRGFzaGJvYXJkKTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiB1c2VyRGFzaGJvYXJkKCkge1xuXHR2YXIgZGlyZWN0aXZlID0ge1xuXHRcdHJlc3RyaWN0OiAnQUVDTScsXG5cdFx0dGVtcGxhdGVVcmw6ICd2aWV3cy9kaXJlY3RpdmVzL3VzZXJEYXNoYm9hcmQuZGlyZWN0aXZlLmh0bScsXG5cdFx0cmVwbGFjZTogdHJ1ZSxcblx0XHRzY29wZToge30sXG5cdFx0bGluazogbGlua0Z1bmMsXG5cdFx0Y29udHJvbGxlcjogdXNlckRhc2hib2FyZENvbnRyb2xsZXIsXG5cdFx0Y29udHJvbGxlckFzOiAndm0nLFxuXHRcdGJpbmRUb0NvbnRyb2xsZXI6IHRydWVcblx0fVxuXG5cdC8qIEBuZ0luamVjdCAqL1xuXHRmdW5jdGlvbiBsaW5rRnVuYyhzY29wZSwgZWwsIGF0dHIsIGN0cmwpIHtcbiAgICB9XG5cbiAgICB1c2VyRGFzaGJvYXJkQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGxvZycsICckbG9jYXRpb24nXTtcbiAgICAvKiBAbmdJbmplY3QgKi9cbiAgICBmdW5jdGlvbiB1c2VyRGFzaGJvYXJkQ29udHJvbGxlcigkc2NvcGUsICRsb2csICRsb2NhdGlvbikge1xuXHQgICAgdmFyIHZtID0gdGhpcztcblxuXHQgICAgJGxvZy5pbmZvKCdpbiB0aGUgdXNlckRhc2hib2FyZCBkaXJlY3RpdmUnKTtcblxuXHQgICAgLy9kZWZpbmUgdmlld21vZGVsIGZ1bmN0aW9uc1xuXG5cdH1cblxuXHRyZXR1cm4gIGRpcmVjdGl2ZTtcbn0iLCIvKiB1c3BzT3B0aW9ucy5kaXJlY3RpdmUuanMgKi9cblxuLyoqXG4qIEBkZXNjIHRvb2xiYXIgZGlyZWN0aXZlIHRoYXQgaXMgdXNlZCBvbiB0aGUgbWFpbiBwYWdlIGFjcm9zcyB0aGUgZW50aXJlIGFwcC5cbiogQGV4YW1wbGUgPGRpdiB1c3BzLW9wdGlvbnM+PC9kaXY+XG4qL1xuXG5hbmd1bGFyXG5cdC5tb2R1bGUoJ2FoTnV0cycpXG5cdC5kaXJlY3RpdmUoJ3VzcHNPcHRpb25zJywgdXNwc09wdGlvbnMpO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIHVzcHNPcHRpb25zKCkge1xuXHR2YXIgZGlyZWN0aXZlID0ge1xuXHRcdHJlc3RyaWN0OiAnQUVDTScsXG5cdFx0dGVtcGxhdGVVcmw6ICd2aWV3cy9kaXJlY3RpdmVzL3VzcHNPcHRpb25zLmRpcmVjdGl2ZS5odG0nLFxuXHRcdHJlcGxhY2U6IHRydWUsXG5cdFx0c2NvcGU6IHtcblx0XHRcdG9wdGlvbnM6IFwiPVwiXG5cdFx0fSxcblx0XHRsaW5rOiBsaW5rRnVuYyxcblx0XHRjb250cm9sbGVyOiB1c3BzT3B0aW9uc0NvbnRyb2xsZXIsXG5cdFx0Y29udHJvbGxlckFzOiAndm0nLFxuXHRcdGJpbmRUb0NvbnRyb2xsZXI6IHRydWVcblx0fVxuXG5cdC8qIEBuZ0luamVjdCAqL1xuXHRmdW5jdGlvbiBsaW5rRnVuYyhzY29wZSwgZWwsIGF0dHIsIGN0cmwpIHtcbiAgICB9XG5cbiAgICB1c3BzT3B0aW9uc0NvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyRsb2cnXTtcbiAgICAvKiBAbmdJbmplY3QgKi9cbiAgICBmdW5jdGlvbiB1c3BzT3B0aW9uc0NvbnRyb2xsZXIoJHNjb3BlLCAkbG9nKSB7XG5cdCAgICB2YXIgdm0gPSB0aGlzO1xuXG5cblx0fVxuXG5cdHJldHVybiAgZGlyZWN0aXZlO1xufSIsImFuZ3VsYXJcbiAgICAubW9kdWxlKCdhaE51dHMnKVxuICAgIC5jb25maWcoY29uZmlnKTtcbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gY29uZmlnKCRyb3V0ZVByb3ZpZGVyKSB7XG5cdCRyb3V0ZVByb3ZpZGVyXG5cdC8vZGVmaW5lIHRoZSBsYW5kaW5nIHJvdXRlXG5cdC53aGVuKCcvJywge1xuICAgICAgICB0ZW1wbGF0ZVVybDogJ3ZpZXdzL2xhbmRpbmdQYWdlLmh0bScsICAgICAgLy8ndmlld3MvbWFpblBhZ2UuaHRtJ1xuICAgICAgICBjb250cm9sbGVyOiAnbGFuZGluZ0NvbnRyb2xsZXInLCAgICAgICAgICAgLy8nbWFpbkNvbnRyb2xsZXInXG4gICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJ1xuICAgIH0pXG4gICAgLy9kZWZpbmUgdGhlIGFsbCBwcm9kdWN0cyByb3V0ZVxuICAgIC53aGVuKCcvYWxsLXByb2R1Y3RzJywge1xuICAgICAgICB0ZW1wbGF0ZVVybDogJ3ZpZXdzL2FsbFByb2R1Y3RzUGFnZS5odG0nLFxuICAgICAgICBjb250cm9sbGVyOiAnYWxsUHJvZHVjdHNDb250cm9sbGVyJyxcbiAgICAgICAgY29udHJvbGxlckFzOiAndm0nLFxuICAgICAgICByZXNvbHZlOiB7IC8qIEBuZ0luamVjdCAqL1xuICAgICAgICAgICAgcHJvZHVjdExpc3Q6IHByb2R1Y3RMaXN0XG4gICAgICAgIH1cbiAgICB9KVxuICAgIC8vZGVmaW5lIHRoZSBzaW5nbGUgcHJvZHVjdCByb3V0ZVxuICAgIC53aGVuKCcvcHJvZHVjdC86cHJkY3RJZCcsIHtcbiAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9hUHJvZHVjdFBhZ2UuaHRtJyxcbiAgICAgICAgY29udHJvbGxlcjogJ2FQcm9kdWN0Q29udHJvbGxlcicsXG4gICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJyxcbiAgICAgICAgcmVzb2x2ZTogeyAvKiBAbmdJbmplY3QgKi9cbiAgICAgICAgICAgIGFQcm9kdWN0OiBhUHJvZHVjdFxuICAgICAgICB9XG4gICAgfSlcbiAgICAvL2RlZmluZSB0aGUgZGVsaXZlcnkgc3BlY2lmaWNhdGlvbnMgcm91dGVcbiAgICAud2hlbignL2dldHRpbmctdGhlLXByb2R1Y3QvOml0ZW1JZCcsIHtcbiAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9wcm9kdWN0R2V0dGluZ1BhZ2UuaHRtJyxcbiAgICAgICAgY29udHJvbGxlcjogJ3Byb2R1Y3RHZXR0aW5nQ29udHJvbGxlcicsXG4gICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJyxcbiAgICAgICAgcmVzb2x2ZTogeyAvKiBAbmdJbmplY3QgKi9cbiAgICAgICAgICAgIHVzcHNVc2VybmFtZTogdXNwc1VzZXJuYW1lXG4gICAgICAgIH1cbiAgICB9KVxuICAgIC8vZGVmaW5lIHRoZSBsb2NhdGlvbnMgcm91dGVcbiAgICAud2hlbignL2xvY2F0aW9ucycsIHtcbiAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9sb2NhdGlvbnNQYWdlLmh0bScsXG4gICAgICAgIGNvbnRyb2xsZXI6ICdsb2NhdGlvbnNDb250cm9sbGVyJyxcbiAgICAgICAgY29udHJvbGxlckFzOiAndm0nXG4gICAgfSlcbiAgICAvL2RlZmluZSB0aGUgbG9naW4gcm91dGVcbiAgICAud2hlbignL2xvZ2luJywge1xuICAgICAgICB0ZW1wbGF0ZVVybDogJ3ZpZXdzL2xvZ2luUGFnZS5odG0nLFxuICAgICAgICBjb250cm9sbGVyOiAnbG9naW5Db250cm9sbGVyJyxcbiAgICAgICAgY29udHJvbGxlckFzOiAndm0nXG4gICAgfSlcbiAgICAvL2RlZmluZSB0aGUgc2hvcHBpbmcgY2FydCByb3V0ZVxuICAgIC53aGVuKCcvY2FydCcsIHtcbiAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9jYXJ0UGFnZS5odG0nLFxuICAgICAgICBjb250cm9sbGVyOiAnY2FydENvbnRyb2xsZXInLFxuICAgICAgICBjb250cm9sbGVyQXM6ICd2bSdcbiAgICB9KVxuICAgIC8vZGVmaW5lIHRoZSBjaGVja291dCByb3V0ZVxuICAgIC53aGVuKCcvY2hlY2tvdXQnLCB7XG4gICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvY2hlY2tvdXRQYWdlLmh0bScsXG4gICAgICAgIGNvbnRyb2xsZXI6ICdjaGVja291dENvbnRyb2xsZXInLFxuICAgICAgICBjb250cm9sbGVyQXM6ICd2bScsXG4gICAgICAgIHJlc29sdmU6IHsgLyogQG5nSW5qZWN0ICovXG4gICAgICAgICAgICBzcXVhcmVDcmVkczogc3F1YXJlQ3JlZHNcbiAgICAgICAgfVxuICAgIH0pXG4gICAgLy9kZWZpbmUgdGhlIGNoZWNrb3V0IHJvdXRlXG4gICAgLndoZW4oJy9vcmRlci1jb25maXJtYXRpb24vOmNvbmZJZCcsIHtcbiAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9vcmRlckNvbmZpcm1hdGlvblBhZ2UuaHRtJyxcbiAgICAgICAgY29udHJvbGxlcjogJ29yZGVyQ29uZmlybWF0aW9uQ29udHJvbGxlcicsXG4gICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJ1xuICAgIH0pXG4gICAgLy9kZWZpbmUgdGhlIG15QWNjb3VudCByb3V0ZSBmb3IgY3VzdG9tZXJzXG4gICAgLndoZW4oJy9yZWdpc3RlclVzZXInLCB7XG4gICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvcmVnaXN0cmF0aW9uUGFnZS5odG0nLFxuICAgICAgICBjb250cm9sbGVyOiAncmVnaXN0ZXJBY2N0Q29udHJvbGxlcicsXG4gICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJ1xuICAgIH0pXG4gICAgLy9kZWZpbmUgdGhlIG15QWNjb3VudCByb3V0ZSBmb3IgY3VzdG9tZXJzXG4gICAgLndoZW4oJy9NeUFjY291bnQvOnBhcmFtJywge1xuICAgICAgICB0ZW1wbGF0ZVVybDogJ3ZpZXdzL2FjY291bnRzUGFnZS5odG0nLFxuICAgICAgICBjb250cm9sbGVyOiAnYWNjb3VudHNDb250cm9sbGVyJyxcbiAgICAgICAgY29udHJvbGxlckFzOiAndm0nXG4gICAgfSlcbiAgICAvL2RlZmluZSB0aGUgdGVhbU1lbWJlciByb3V0ZVxuXHQud2hlbignL3RlYW1NZW1iZXIvOnBhcmFtJywge1xuICAgICAgICB0ZW1wbGF0ZVVybDogJ3ZpZXdzL2ludGVybmFsQWN0dHNQYWdlLmh0bScsXG4gICAgICAgIGNvbnRyb2xsZXI6ICdpbnRlcm5hbEFjdHRzQ29udHJvbGxlcicsXG4gICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJyxcbiAgICAgICAgcmVzb2x2ZTogeyAvKiBAbmdJbmplY3QgKi9cbiAgICAgICAgICAgIGF1dGhlbnRpY2F0aW9uOiBhdXRoZW50aWNhdGlvblxuICAgICAgICB9XG4gICAgLy99KS5vdGhlcndpc2Uoe1xuICAgIC8vICAgIHJlZGlyZWN0VG86ICcvJ1xuICAgIH0pO1xufVxuXG4vL1JlcXVpcmVkIGZ1bmN0aW9uc1xuZnVuY3Rpb24gYXV0aGVudGljYXRpb24oKSB7XG5cbiAgICBjb25zb2xlLmxvZygnYXV0aGVudGljYXRpbmcnKTtcdC8vVE9ETzogVEFLRSBUSElTIE9VVCBMQVRFUlxufTtcblxuZnVuY3Rpb24gc3F1YXJlQ3JlZHMoZGF0YVNlcnZpY2VzKSB7XG4gICAgLy9kZWZpbmUgbG9jYWwgdmFyaWFibGVzXG4gICAgdmFyIGRhdGEgPSBkYXRhU2VydmljZXM7XG5cbiAgICBjb25zb2xlLmxvZygnZ2V0dGluZyBzcXVhcmUgY3JlZHMnKTsgICAgLy9UT0RPOiBUQUtFIFRISVMgT1VUIExBVEVSXG5cbiAgICBcbiAgICAvL1RPRE86IFdIWSBET0VTIFRISVMgUkVTT0xWRSBTT01FVElNRVMgQU5EIE5PVCBPVEhFUlNcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG5cbiAgICAgICAgLy9yZWFjaCBvdXQgdG8gZW5kcG9pbnRcbiAgICAgICAgZGF0YS5wb3N0KCcvYXBpL3NxdWFyZS1jcmVkcycsIHsga2V5Oidvd2luZTkxbi1zbiNic2lud2kjayd9IClcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24gc3VjY2VzcyhzKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnZ290IHRoaXMnLCBzKTtcbiAgICAgICAgICAgIHJlc29sdmUocyk7XG4gICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIGVycm9yKGUpIHtcbiAgICAgICAgICAgIHJlc29sdmUoZSk7XG4gICAgICAgIH0pO1xuXG4gICAgfSk7XG5cbn07XG5cbi8qXG4qICAgUFJPRFVDVCBMSVNUXG4qXG4qICAgVGhpcyBmdW5jdGlvbiBsb2FkcyBhIGxpc3Qgb2YgcHJvZHVjdHNcbiovXG5mdW5jdGlvbiBwcm9kdWN0TGlzdChkYXRhU2VydmljZXMsICRyb3V0ZSkge1xuXG4gICAgLy9kZWZpbmUgbG9jYWwgdmFyaWFibGVzXG4gICAgdmFyIGRhdGEgPSBkYXRhU2VydmljZXM7XG4gICAgdmFyIHBhdGggPSAnL2FwaS9wcm9kdWN0bGlzdCc7XG5cbiAgICBpZigkcm91dGUuY3VycmVudC5wYXJhbXMgIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHBhdGggKz0gJz9maWx0ZXI9JyArICRyb3V0ZS5jdXJyZW50LnBhcmFtcy5maWx0ZXI7XG4gICAgfTtcblxuICAgIC8vYWxlcnQoJyRyb3V0ZS5jdXJyZW50LnBhcmFtcycsICRyb3V0ZS5jdXJyZW50LnBhcmFtcyk7XG5cbiAgICAvL3JldHVybiB0aGUgcHJvbWlzZSBvZiBhc3luYyB3b3JrXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXG4gICAgICAgIC8vcmVhY2ggb3V0IHRvIHRoZSBlbmRwb2ludFxuICAgICAgICBkYXRhLmdldChwYXRoKVxuICAgICAgICAudGhlbihmdW5jdGlvbiBzdWNjZXNzKHMpIHtcbiAgICAgICAgICAgIHJlc29sdmUocyk7XG4gICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIGVycm9yKGUpIHtcbiAgICAgICAgICAgIHJlamVjdChlKTtcbiAgICAgICAgfSk7XG5cbiAgICB9KTtcbn07XG5cbi8qXG4qICAgQSBQUk9EVUNUXG4qXG4qICAgVGhpcyBmdW5jdGlvbiBsb2FkcyBhIHNpbmdsZSBwcm9kdWN0XG4qL1xuZnVuY3Rpb24gYVByb2R1Y3QoZGF0YVNlcnZpY2VzLCAkcm91dGUpIHtcblxuICAgIC8vZGVmaW5lIGxvY2FsIHZhcmlhYmxlc1xuICAgIHZhciBkYXRhID0gZGF0YVNlcnZpY2VzO1xuICAgIHZhciBwYXRoID0gJy9hcGkvcHJvZHVjdGxpc3Q/c2VsZWN0PScgKyAkcm91dGUuY3VycmVudC5wYXJhbXMucHJkY3RJZDtcblxuICAgIGNvbnNvbGUubG9nKCdwYXRoJywgcGF0aCk7XG5cblxuICAgIC8vYWxlcnQoJyRyb3V0ZS5jdXJyZW50LnBhcmFtcycsICRyb3V0ZS5jdXJyZW50LnBhcmFtcyk7XG5cbiAgICAvL3JldHVybiB0aGUgcHJvbWlzZSBvZiBhc3luYyB3b3JrXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXG4gICAgICAgIC8vcmVhY2ggb3V0IHRvIHRoZSBlbmRwb2ludFxuICAgICAgICBkYXRhLmdldChwYXRoKVxuICAgICAgICAudGhlbihmdW5jdGlvbiBzdWNjZXNzKHMpIHtcbiAgICAgICAgICAgIC8vY29uc29sZS5sb2coJ2dvdCB0aGlzIHByb2R1Y3QnLCBzKTtcbiAgICAgICAgICAgIHJlc29sdmUocyk7XG4gICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIGVycm9yKGUpIHtcbiAgICAgICAgICAgIHJlamVjdChlKTtcbiAgICAgICAgfSk7XG5cbiAgICB9KTtcblxufTtcblxuLypcbiogICBVU1BTIFVTRVJOQU1FXG4qXG4qICAgVGhpcyBmdW5jdGlvbiBnZXRzIHRoZSBzZWNyZXQgdXNlcm5hbWUgZm9yIHRoZSBhbmd1bGFyIG1vZHVsZVxuKi9cbmZ1bmN0aW9uIHVzcHNVc2VybmFtZShkYXRhU2VydmljZXMpIHtcbiAgICAvL2RlZmluZSBsb2NhbCB2YXJpYWJsZXNcbiAgICB2YXIgZGF0YSA9IGRhdGFTZXJ2aWNlc1xuICAgIHZhciBwYXRoID0gJy9hcGkvc2VjcmV0cy91c3BzLXVzZXJuYW1lJztcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblxuICAgICAgICBkYXRhLmdldChwYXRoKVxuICAgICAgICAudGhlbihmdW5jdGlvbiBzdWNjZXNzKHMpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdnb3QgdGhpcyBzZWNyZXQnLCBzKTtcbiAgICAgICAgICAgIHJlc29sdmUocyk7XG4gICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIGVycm9yKGUpIHtcbiAgICAgICAgICAgIHJlamVjdChlKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbn1cbiIsImFuZ3VsYXJcbiAgICAubW9kdWxlKCdhaE51dHMnKVxuICAgIC5mYWN0b3J5KCdkYXRhU2VydmljZXMnLCBkYXRhU2VydmljZXMpO1xuXG5kYXRhU2VydmljZXMuJGluamVjdCA9IFsnJGxvZycsICckaHR0cCddO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIGRhdGFTZXJ2aWNlcygkbG9nLCAkaHR0cCkge1xuXG5cdHZhciBkYXRhU2VydmljZXNPYmplY3QgPSB7XG5cdFx0Z2V0OiBnZXQsXG5cdFx0cG9zdDogcG9zdFxuXHR9O1xuXG5cdC8vZGVmaW5lIGFsbCBtZXRob2RzXG5cdGZ1bmN0aW9uIGdldCh1cmwsIGNvbmZpZykge1xuXG5cdFx0Ly9yZXR1cm4gYSBwcm9taXNlIGZvciBhc3luYyB3b3JrXG5cdFx0cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXHRcdFx0XG5cdFx0XHQkaHR0cC5nZXQodXJsLCBjb25maWcpXG5cdFx0XHQudGhlbihmdW5jdGlvbiBzdWNjZXNzKHMpIHtcblxuXHRcdFx0XHRyZXNvbHZlKHMuZGF0YSk7XG5cblx0XHRcdH0sIGZ1bmN0aW9uIGVycm9yKGUpIHtcblxuXHRcdFx0XHRyZWplY3QoZSk7XG5cdFx0XHR9KTtcblxuXHRcdH0pO1xuXG5cdH07XG5cblx0ZnVuY3Rpb24gcG9zdCh1cmwsIGRhdGEsIGNvbmZpZykge1xuXG5cdFx0Ly9yZXR1cm4gYSBwcm9taXNlIGZvciBhc3luYyB3b3JrXG5cdFx0cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXHRcdFx0XG5cdFx0XHQkaHR0cC5wb3N0KHVybCwgZGF0YSwgY29uZmlnKVxuXHRcdFx0LnRoZW4oZnVuY3Rpb24gc3VjY2VzcyhyZXNwb25zZSkge1xuXG5cdFx0XHRcdHJlc29sdmUocmVzcG9uc2UuZGF0YSk7XG5cblx0XHRcdH0sIGZ1bmN0aW9uIGVycm9yKGUpIHtcblxuXHRcdFx0XHRyZWplY3QoZSk7XG5cdFx0XHR9KTtcblxuXHRcdH0pO1xuXG5cdH07XG5cblx0cmV0dXJuIGRhdGFTZXJ2aWNlc09iamVjdDtcbn0iLCJhbmd1bGFyXG4gICAgLm1vZHVsZSgnYWhOdXRzJylcbiAgICAuZmFjdG9yeSgnc2hvcHBpbmdDYXJ0Jywgc2hvcHBpbmdDYXJ0KTtcblxuc2hvcHBpbmdDYXJ0LiRpbmplY3QgPSBbJyRsb2cnLCAnJGh0dHAnLCAnJHdpbmRvdyddO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIHNob3BwaW5nQ2FydCgkbG9nLCAkaHR0cCwgJHdpbmRvdykge1xuXG5cdHZhciBzaG9wcGluZ0NhcnRPYmplY3QgPSB7XG5cdFx0aXNFbXB0eTogdHJ1ZSxcblx0XHRvcmRlck51bWJlcjogdW5kZWZpbmVkLFxuXHRcdGFxdWlzaXRpb25NZXRob2Q6IHVuZGVmaW5lZCxcblx0XHRub09mSXRlbXM6IDAsXG5cdFx0c3VidG90YWw6IDAsXG5cdFx0c2hpcHBpbmdQcmljZTogMCxcblx0XHRkaXNjb3VudHM6IDAsXG5cdFx0dG90YWxDb3N0OiAwLFxuXHRcdGFxdWlzaXRpb25EZXRhaWxzOiB7XG5cdFx0XHRkZWxaaXBJZGVudGlmaWVkOiBmYWxzZSxcblx0XHRcdGRlbERhdGVJZGVudGlmaWVkOiBmYWxzZSxcblx0XHRcdHNoaXBwZWRPclBVU2VsZWN0ZWQ6IGZhbHNlLFxuXHRcdFx0d2lsbFNoaXBwcDogZmFsc2UsXG5cdFx0XHR3aWxsUFU6IGZhbHNlLFxuXHRcdFx0cHVMb2NTZWxlY3RlZDogZmFsc2UsXG5cdFx0XHRkZWxNdGhTZWxlY3RlZDogZmFsc2UsXG5cdFx0XHRwaWNrdXBMb2NhdGlvbjoge30sXG5cdFx0XHRkZWxpdmVyeUxvY2F0aW9uOiB7XG5cdFx0XHRcdHJlY2VpdmVyOiB7XG5cdFx0XHRcdFx0Zmlyc3Q6IFwiXCIsXG5cdFx0XHRcdFx0bGFzdDogXCJcIlxuXHRcdFx0XHR9LFxuXHRcdFx0XHRzdHJlZXQxOiBcIlwiLFxuXHRcdFx0XHRzdHJlZXQyOiBcIlwiLFxuXHRcdFx0XHRzdHJlZXQzOiBcIlwiLFxuXHRcdFx0XHRjaXR5OiBcIlwiLFxuXHRcdFx0XHRzdGF0ZTogXCJcIixcblx0XHRcdFx0emlwOiBcIlwiXG5cdFx0XHR9LFxuXHRcdFx0ZGVsaXZlcnlNZXRob2Q6IHt9XG5cdFx0fSxcblx0XHRwYXltZW50RGV0YWlsczoge30sXG5cdFx0aXRlbXM6IHt9LFxuXHRcdF9zYXZlVG9Ccm93c2VyOiBfc2F2ZVRvQnJvd3Nlcixcblx0XHRfZ2V0Q2FydDogX2dldENhcnQsIFxuXHRcdF9yZW1vdmVDYXJ0OiBfcmVtb3ZlQ2FydCxcblx0XHRfYWRkTmV3SXRlbTogX2FkZE5ld0l0ZW0sXG5cdFx0X2NvdW50Tm9JdGVtczogX2NvdW50Tm9JdGVtcyxcblx0XHRfY2FsY1N1YnRvdGFsOiBfY2FsY1N1YnRvdGFsLFxuXHRcdGluaXQ6IGluaXQsXG5cdFx0YWRkSXRlbTogYWRkSXRlbSxcblx0XHRyZW1vdmVJdGVtOiByZW1vdmVJdGVtLFxuXHRcdHVwZGF0ZUFxdWlzaXRpb25NZXRob2Q6IHVwZGF0ZUFxdWlzaXRpb25NZXRob2QsXG5cdFx0Y2FsY1RvdGFsQ29zdDogY2FsY1RvdGFsQ29zdCxcblx0XHR1cGRhdGVJdGVtUXR5OiB1cGRhdGVJdGVtUXR5LFxuXHRcdGFjcU1ldGhJc0RlZmluZWQ6IGFjcU1ldGhJc0RlZmluZWRcblx0fTtcblxuXHRmdW5jdGlvbiBpbml0KCkge1xuXHRcdC8vVE9ETzogQ0xFQU4gVEhJUyBVUCBMQVRFUiwgTUFZQkUgQUREIEFTIFNFUEVSQVRFIFNFUlZJQ0Vcblx0XHR2YXIgc2VsZiA9IHRoaXM7XG5cblx0XHQvL1xuXHRcdGlmKCR3aW5kb3cuc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbSgnYWgtbnV0cy1jYXJ0JykgIT0gbnVsbCkge1xuXHRcdFx0dmFyIHNhdmVkQ2FydCA9IEpTT04ucGFyc2UoJHdpbmRvdy5zZXNzaW9uU3RvcmFnZS5nZXRJdGVtKCdhaC1udXRzLWNhcnQnKSk7XG5cblx0XHRcdHNlbGYuaXNFbXB0eSA9IHNhdmVkQ2FydC5pc0VtcHR5O1xuXHRcdFx0c2VsZi5vcmRlck51bWJlciA9IHNhdmVkQ2FydC5vcmRlck51bWJlcjtcblx0XHRcdHNlbGYuYXF1aXNpdGlvbk1ldGhvZCA9IHNhdmVkQ2FydC5hcXVpc2l0aW9uTWV0aG9kO1xuXHRcdFx0c2VsZi5ub09mSXRlbXMgPSBzYXZlZENhcnQubm9PZkl0ZW1zO1xuXHRcdFx0c2VsZi5zdWJ0b3RhbCA9IHNhdmVkQ2FydC5zdWJ0b3RhbDtcblx0XHRcdHNlbGYuc2hpcHBpbmdQcmljZSA9IHNhdmVkQ2FydC5zaGlwcGluZ1ByaWNlO1xuXHRcdFx0c2VsZi5kaXNjb3VudHMgPSBzYXZlZENhcnQuZGlzY291bnRzO1xuXHRcdFx0c2VsZi50b3RhbENvc3QgPSBzYXZlZENhcnQudG90YWxDb3N0O1xuXHRcdFx0c2VsZi5hcXVpc2l0aW9uRGV0YWlscyA9IHNhdmVkQ2FydC5hcXVpc2l0aW9uRGV0YWlscztcblx0XHRcdHNlbGYuaXRlbXMgPSBzYXZlZENhcnQuaXRlbXM7XG5cdFx0fVxuXG5cdFx0Y29uc29sZS5sb2coc2VsZik7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIF9zYXZlVG9Ccm93c2VyKCkge1xuXHRcdHZhciBzZWxmID0gdGhpcztcblx0XHR2YXIgY2FydCA9IHtcblx0XHRcdGlzRW1wdHk6IHNlbGYuaXNFbXB0eSxcblx0XHRcdG9yZGVyTnVtYmVyOiBzZWxmLm9yZGVyTnVtYmVyLFxuXHRcdFx0YXF1aXNpdGlvbk1ldGhvZDogc2VsZi5hcXVpc2l0aW9uTWV0aG9kLFxuXHRcdFx0bm9PZkl0ZW1zOiBzZWxmLm5vT2ZJdGVtcyxcblx0XHRcdHN1YnRvdGFsOiBzZWxmLnN1YnRvdGFsLFxuXHRcdFx0c2hpcHBpbmdQcmljZTogc2VsZi5zaGlwcGluZ1ByaWNlLFxuXHRcdFx0ZGlzY291bnRzOiBzZWxmLmRpc2NvdW50cyxcblx0XHRcdHRvdGFsQ29zdDogc2VsZi50b3RhbENvc3QsXG5cdFx0XHRhcXVpc2l0aW9uRGV0YWlsczogc2VsZi5hcXVpc2l0aW9uRGV0YWlscyxcblx0XHRcdGl0ZW1zOiBzZWxmLml0ZW1zXG5cdFx0fTtcblx0XHQkd2luZG93LnNlc3Npb25TdG9yYWdlLnNldEl0ZW0oJ2FoLW51dHMtY2FydCcsIEpTT04uc3RyaW5naWZ5KGNhcnQpKTtcblx0fTtcblxuXHRmdW5jdGlvbiBfZ2V0Q2FydCgpIHtcblx0XHRyZXR1cm4gJHdpbmRvdy5zZXNzaW9uU3RvcmFnZVsnYWgtbnV0cy1jYXJ0J107XG5cdH07XG5cblx0ZnVuY3Rpb24gX3JlbW92ZUNhcnQoKSB7XG5cdFx0JHdpbmRvdy5zZXNzaW9uU3RvcmFnZS5yZW1vdmVJdGVtKCdhaC1udXRzLWNhcnQnKTtcblx0fTtcblxuXHRmdW5jdGlvbiBfYWRkTmV3SXRlbShuZXdJdGVtKSB7XG5cdFx0Ly9kZWZpbmUgbG9jYWwgdmFyaWFibGVzXG5cdFx0dmFyIHJldHVybk9iamVjdCA9IHt9O1xuXG5cdFx0Ly9pdHJhdGUgdGhyb3VnaCBhbGwgdGhlIG9iamVjdHMsIGFuZCBhZGQgdGhlbS5cblx0XHRPYmplY3Qua2V5cyhuZXdJdGVtKS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuXHRcdFx0cmV0dXJuT2JqZWN0W2tleV0gPSBuZXdJdGVtW2tleV07XG5cdFx0fSk7XG5cblx0XHRjb25zb2xlLmxvZygnYWRkaW5nIHRoaXMgbmV3IGl0ZW0nLCByZXR1cm5PYmplY3QpO1xuXG5cdFx0cmV0dXJuIHJldHVybk9iamVjdDtcblx0fTtcblxuXHRmdW5jdGlvbiBfY291bnROb0l0ZW1zKGFsbEl0ZW1zKSB7XG5cdFx0Ly9kZWZpbmUgbG9jYWwgdmFyaWFibGVzXG5cdFx0dmFyIHNlbGYgPSB0aGlzO1xuXHRcdHZhciBuZXdUb3RhbCA9IDA7XG5cblx0XHRjb25zb2xlLmxvZygnYWxsSXRlbXMnLCBhbGxJdGVtcyk7XG5cblx0XHQvL2l0ZXJhdGUgdGhyb3VnaCB0aGUgaXRlbXMgbGlzdFxuXHRcdE9iamVjdC5rZXlzKGFsbEl0ZW1zKS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuXHRcdFx0Ly9jb25zb2xlLmxvZyhrZXksIGFsbEl0ZW1zW2tleV0pXG5cdFx0XHRuZXdUb3RhbCArPSBhbGxJdGVtc1trZXldLnF0eTtcblx0XHR9KTtcblxuXHRcdGNvbnNvbGUubG9nKCdfY291bnROb0l0ZW1zJywgbmV3VG90YWwpO1xuXG5cdFx0Ly9pZiBubyBpdGVtcyB3aGVyZSBmb3VuZCwgbWFrZSBzdXJlIGNhcnQgaXMgZGVzaWduYXRlZCBlbXB0eVxuXHRcdGlmKG5ld1RvdGFsID09IDApIHNlbGYuaXNFbXB0eSA9IHRydWU7XG5cblx0XHRyZXR1cm4gbmV3VG90YWw7XG5cdH07XG5cblx0ZnVuY3Rpb24gX2NhbGNTdWJ0b3RhbChhbGxJdGVtcykge1xuXHRcdC8vZGVmaW5lIGxvY2FsIHZhcmlhYmxlc1xuXHRcdHZhciBuZXdUb3RhbCA9IDA7XG5cblx0XHQvL2l0ZXJhdGUgdGhyb3VnaCB0aGUgaXRlbXMgbGlzdFxuXHRcdE9iamVjdC5rZXlzKGFsbEl0ZW1zKS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuXHRcdFx0bmV3VG90YWwgKz0gKGFsbEl0ZW1zW2tleV0ucXR5ICogYWxsSXRlbXNba2V5XS5wcmljZSk7XG5cdFx0fSk7XG5cblx0XHQvL2NvbnNvbGUubG9nKCdfY2FsY1N1YnRvdGFsJywgbmV3VG90YWwpO1xuXG5cdFx0cmV0dXJuIG5ld1RvdGFsO1xuXHR9O1xuXG5cdGZ1bmN0aW9uIGFkZEl0ZW0obmV3SXRlbSkge1xuXHRcdC8vZGVmaW5lIGxvY2FsIHZhcmlhYmxlc1xuXHRcdHZhciBzZWxmID0gdGhpcztcblx0XHR2YXIgaXRtQ29kZSA9IG5ld0l0ZW0uY29kZTtcblxuXHRcdC8vaWYgd2UncmUgYWRkaW5nIHNvbWV0aGluZyB0aGVuIHRoZSBjYXJ0IGNhbid0IGJlIGVtcHR5XG5cdFx0c2VsZi5pc0VtcHR5ID0gZmFsc2U7XG5cblx0XHQvL2ZpcnN0LCBhcmUgd2UgYWRkaW5nIHF0eSBvciBuZXcgcHJvZHVjdCBjb2Rlc1xuXHRcdGlmKHNlbGYuaXRlbXNbaXRtQ29kZV0gPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHQvLyB0aGlzIGlzIGFuIGl0ZW0gY29kZSB0aGF0IGhhcyBuZXZlciBiZWVuIGFkZGVkXG5cdFx0XHRjb25zb2xlLmxvZygnYWRkaW5nIGEgbmV3IGl0ZW0nKTtcblxuXHRcdFx0Ly9pbnRpYWxpemUgdGhlIG9iamVjdCBpbiBpdGVtcyBsaXN0XG5cdFx0XHRzZWxmLml0ZW1zW2l0bUNvZGVdID0gX2FkZE5ld0l0ZW0obmV3SXRlbSk7XG5cblx0XHRcdC8vdXBkYXRlIG5vT2ZJdGVtc1xuXHRcdFx0c2VsZi5ub09mSXRlbXMgPSBfY291bnROb0l0ZW1zKHNlbGYuaXRlbXMpO1xuXG5cdFx0XHQvL3VwZGF0ZSBzdWJUb3RhbFxuXHRcdFx0c2VsZi5zdWJ0b3RhbCA9IF9jYWxjU3VidG90YWwoc2VsZi5pdGVtcyk7XG5cblx0XHR9ICBlbHNlIHtcblx0XHRcdC8vIHRoaXMgaXRlbSBjb2RlIGhhcyBiZWVuIGFkZGVkIGJlZm9yZSwganVzdCB1cGRhdGUgdGhlIHF0eVxuXHRcdFx0Y29uc29sZS5sb2coJ3VwZGF0aW5nIGEgbmV3IHF0eScpO1xuXHRcdH1cblxuXHRcdC8vYWZ0ZXIgc2F2aW5nIGl0IHRvIHRoZSBjYXJ0LCB0aGVuIHNhdmUgaXQgdG8gdGhlIGJyb3dzZXIgc2Vzc2lvblxuXHRcdHNlbGYuX3NhdmVUb0Jyb3dzZXIoKTtcblxuXHRcdHJldHVybiB0cnVlO1xuXHR9O1xuXG5cdGZ1bmN0aW9uIHJlbW92ZUl0ZW0ocHJvZHVjdElkKSB7XG5cdFx0dmFyIHNlbGYgPSB0aGlzO1xuXG5cdFx0Ly9pdGVyYXRlIHRocm91Z2ggdGhlIGxpc3Qgb2YgaXRlbXNcblx0XHRPYmplY3Qua2V5cyhzZWxmLml0ZW1zKS5mb3JFYWNoKGZ1bmN0aW9uIGtleVNlYXJjaChrZXkpIHtcblxuXHRcdFx0Ly9pZiB0aGUga2V5IG1hdGNoZXMgdGhlIHByb2R1Y3RJZCwgcmVtb3ZlIGl0XG5cdFx0XHRjb25zb2xlLmxvZyhrZXksIHByb2R1Y3RJZCk7XG5cblx0XHRcdGlmKGtleSA9PSBwcm9kdWN0SWQpIGRlbGV0ZSBzZWxmLml0ZW1zW2tleV07XG5cblx0XHR9KTtcblxuXHRcdC8vdXBkYXRlIHRoZSBzdWJ0b3RhbFxuXHRcdHNlbGYubm9PZkl0ZW1zID0gc2VsZi5fY291bnROb0l0ZW1zKHNlbGYuaXRlbXMpO1xuXG5cdFx0Ly91cGRhdGUgdGhlIGl0ZW0gbnVtYmVyXG5cdFx0c2VsZi5zdWJ0b3RhbCA9IHNlbGYuX2NhbGNTdWJ0b3RhbChzZWxmLml0ZW1zKTtcblxuXHRcdC8vdXBkYXRlIHRoZSB0b3RhbCBjb3N0XG5cdFx0c2VsZi5jYWxjVG90YWxDb3N0KCk7XG5cblx0XHQvL3NhdmUgY2hhbmdlcyB0byB0aGUgYnJvd3NlclxuXHRcdHNlbGYuX3NhdmVUb0Jyb3dzZXIoKTtcdFxuXHR9O1xuXG5cdGZ1bmN0aW9uIHVwZGF0ZUFxdWlzaXRpb25NZXRob2QoKSB7XG5cdFx0Ly9kZWZpbmUgbG9jYWwgdmFyaWFibGVzXG5cdFx0dmFyIHNlbGYgPSB0aGlzO1xuXG5cdFx0Ly9zYXZlIHRoZSBjaGFuZ2VzXG5cdFx0c2VsZi5fc2F2ZVRvQnJvd3NlcigpO1xuXHR9O1xuXG5cdGZ1bmN0aW9uIGNhbGNUb3RhbENvc3QoKSB7XG5cdFx0Ly9kZWZpbmUgbG9jYWwgdmFyaWFibGVzXG5cdFx0dmFyIHNlbGYgPSB0aGlzO1xuXG5cdFx0c2VsZi50b3RhbENvc3QgPSBzZWxmLnN1YnRvdGFsICsgc2VsZi5zaGlwcGluZ1ByaWNlICsgc2VsZi5kaXNjb3VudHM7XG5cdH07XG5cblx0ZnVuY3Rpb24gdXBkYXRlSXRlbVF0eShpdGVtSWQsIHF0eSkge1xuXHRcdC8vZGVmaW5lIGxvY2FsIHZhcmlhYmxlc1xuXHRcdHZhciBzZWxmID0gdGhpcztcblxuXHRcdC8vaWYgdGhlIHF0eSBpcyAwIGp1c3QgcmVtb3ZlIHRoZSBpdGVtXG5cdFx0aWYocGFyc2VJbnQocXR5KSA9PSAwKSB7XG5cdFx0XHRzZWxmLnJlbW92ZUl0ZW0oaXRlbUlkKTtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdC8vdXBkYXRlIHRoZSB2YWx1ZVxuXHRcdHNlbGYuaXRlbXNbaXRlbUlkXS5xdHkgPSBwYXJzZUludChxdHkpO1xuXG5cdFx0Ly91cGRhdGUgdGhlIHN1YnRvdGFsXG5cdFx0c2VsZi5ub09mSXRlbXMgPSBzZWxmLl9jb3VudE5vSXRlbXMoc2VsZi5pdGVtcyk7XG5cblx0XHQvL3VwZGF0ZSB0aGUgaXRlbSBudW1iZXJcblx0XHRzZWxmLnN1YnRvdGFsID0gc2VsZi5fY2FsY1N1YnRvdGFsKHNlbGYuaXRlbXMpO1xuXG5cdFx0Ly91cGRhdGUgdGhlIHRvdGFsIGNvc3Rcblx0XHRzZWxmLmNhbGNUb3RhbENvc3QoKTtcblxuXHRcdC8vc2F2ZSBjaGFuZ2VzIHRvIHRoZSBicm93c2VyXG5cdFx0c2VsZi5fc2F2ZVRvQnJvd3NlcigpO1x0XG5cblx0fTtcblxuXHRmdW5jdGlvbiBhY3FNZXRoSXNEZWZpbmVkKCkge1xuXHRcdHZhciBzZWxmID0gdGhpcztcblxuXHRcdGlmKHNlbGYuYXF1aXNpdGlvbk1ldGhvZCA9PSB1bmRlZmluZWQpIHJldHVybiBmYWxzZTtcblx0XHRlbHNlIHJldHVybiB0cnVlO1xuXHR9O1xuXG5cdHJldHVybiBzaG9wcGluZ0NhcnRPYmplY3Q7XG59XG4iLCJhbmd1bGFyXG4gICAgLm1vZHVsZSgnYWhOdXRzJylcbiAgICAuZmFjdG9yeSgndGVzdE9iamVjdCcsIHRlc3RPYmplY3QpO1xuXG50ZXN0T2JqZWN0LiRpbmplY3QgPSBbJyRsb2cnXTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiB0ZXN0T2JqZWN0KCRsb2cpIHtcblxuXHR2YXIgdGVzdE9iamVjdE9iamVjdCA9IHtcblx0XHRpbWFnZTogdW5kZWZpbmVkLFxuXHRcdGNvZGU6IDEyMDMsXG5cdFx0cmF0aW5nOiB1bmRlZmluZWQsXG5cdFx0bmFtZTogXCJTcGVjaWFsdHkgQ29uZXNcIixcblx0XHRzaXplczogW1xuXHRcdFx0eyBjb2RlOiAxMjAzMDAxLCB0aXRsZTogXCJJbXByZXNzaXZlXCIsIG96OiAxNiwgcHJpY2U6IDE4MDAgfSxcblx0XHRcdHsgY29kZTogMTIwMzAwMiwgdGl0bGU6IFwiQXZlcmFnZVwiLCBvejogOCwgcHJpY2U6IDEzMDAgfSxcblx0XHRcdHsgY29kZTogMTIwMzAwMywgdGl0bGU6IFwiU21hbGxcIiwgb3o6IDQsIHByaWNlOiA3MDAgfVxuXHRcdF0sXG5cdFx0ZGVzY3JpcHRpb246IFwiVGhlIG1vc3QgYW1hemluZyBwZWNhbnMgeW91J3ZlIGV2ZXIgdGFzdGVcIixcblx0XHRpbmdyZWRpZW50czogWydQZWNhbnMnLCAnU3VnYXInLCAnVmFuaWxsYScsICdTYWx0J11cblx0fTtcblxuXG5cdHJldHVybiB0ZXN0T2JqZWN0T2JqZWN0O1xufVxuIiwiYW5ndWxhclxuICAgIC5tb2R1bGUoJ2FoTnV0cycpXG4gICAgLnNlcnZpY2UoJ3VzZXJBdXRoZW50aWNhdGlvbicsIHVzZXJBdXRoZW50aWNhdGlvbik7XG5cbnVzZXJBdXRoZW50aWNhdGlvbi4kaW5qZWN0ID0gWyckaHR0cCcsICckd2luZG93J107XG5cbmZ1bmN0aW9uIHVzZXJBdXRoZW50aWNhdGlvbiAoJGh0dHAsICR3aW5kb3cpIHtcblxuXHR2YXIgdXNlckF1dGggPSB7XG5cdFx0c2F2ZVRva2VuOiBzYXZlVG9rZW4sXG5cdFx0Z2V0VG9rZW46IGdldFRva2VuLFxuXHRcdGxvZ091dDogbG9nT3V0LFxuXHRcdGlzTG9nZ2VkSW46IGlzTG9nZ2VkSW4sXG5cdFx0Y3VycmVudFVzZXI6IGN1cnJlbnRVc2VyXG5cdH07XG5cblxuXHRmdW5jdGlvbiBzYXZlVG9rZW4odG9rZW4pIHtcblx0XHQkd2luZG93LmxvY2FsU3RvcmFnZVsnYWgtbnV0cy10b2tlbiddID0gdG9rZW47XG5cdH1cblxuXHRmdW5jdGlvbiBnZXRUb2tlbigpIHtcblx0XHRyZXR1cm4gJHdpbmRvdy5sb2NhbFN0b3JhZ2VbJ2FoLW51dHMtdG9rZW4nXTtcblx0fVxuXG5cdGZ1bmN0aW9uIGxvZ091dCgpIHtcblx0XHQkd2luZG93LmxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCdhaC1udXRzLXRva2VuJyk7XG5cdH1cblxuXHRmdW5jdGlvbiBpc0xvZ2dlZEluKCkge1xuXHRcdHZhciB0b2tlbiA9IGdldFRva2VuKCk7XG5cdFx0dmFyIHBheWxvYWQ7XG5cblx0XHRpZih0b2tlbikge1xuXHRcdFx0cGF5bG9hZCA9IHRva2VuLnNwbGl0KCcuJylbMV07XG5cdFx0XHRwYXlsb2FkID0gJHdpbmRvdy5hdG9wKHBheWxvYWQpO1xuXHRcdFx0cGF5bG9hZCA9IEpTT04ucGFyc2UocGF5bG9hZCk7XG5cblx0XHRcdHJldHVybiBwYXlsb2FkLmV4cCA+IERhdGUubm93KCkgLyAxMDAwO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHR9XG5cblx0ZnVuY3Rpb24gY3VycmVudFVzZXIoKSB7XG5cdFx0aWYoaXNMb2dnZWRJbigpKSB7XG5cdFx0XHR2YXIgdG9rZW4gPSBnZXRUb2tlbigpO1xuXHRcdFx0dmFyIHBheWxvYWQgPSB0b2tlbi5zcGxpdCgnLicpWzFdO1xuXHRcdFx0cGF5bG9hZCA9ICR3aW5kb3cuYXRvcChwYXlsb2FkKTtcblx0XHRcdHBheWxvYWQgPSBKU09OLnBhcnNlKHBheWxvYWQpO1xuXHRcdFx0cmV0dXJuIHBheWxvYWQ7XG5cdFx0fVxuXHR9XG59IiwiYW5ndWxhclxuICAgIC5tb2R1bGUoJ2FoTnV0cycpXG4gICAgLmZhY3RvcnkoJ3VzcHNTZXJ2aWNlcycsIHVzcHNTZXJ2aWNlcyk7XG5cbnVzcHNTZXJ2aWNlcy4kaW5qZWN0ID0gWyckbG9nJywgJyRodHRwJ107XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gdXNwc1NlcnZpY2VzKCRsb2csICRodHRwKSB7XG5cblx0Ly9kZWZpbmUgdGhlIG9iamVjdFxuXHR2YXIgdXNwc1NlcnZpY2VzID0ge1xuXHRcdF9zaGlwcGluZ1JlcXVlc3Q6IHtcblx0XHRcdFBhY2thZ2VJRDogXCJcIixcblx0XHRcdFNlcnZpY2U6IFwiXCIsXG5cdFx0XHRaaXBPcmlnaW5hdGlvbjogXCJcIixcblx0XHRcdFppcERlc3RpbmF0aW9uOiBcIlwiLFxuXHRcdFx0UG91bmRzOiAwLFxuXHRcdFx0T3VuY2VzOiAwLFxuXHRcdFx0Q29udGFpbmVyOiBcIlwiLFxuXHRcdFx0U2l6ZTogXCJcIixcblx0XHRcdFdpZHRoOiAwLjAsXG5cdFx0XHRMZW5ndGg6IDAuMCxcblx0XHRcdEhlaWdodDogMC4wLFxuXHRcdFx0R2lydGg6IDAuMCxcblx0XHRcdFZhbHVlOiAwLjBcblx0XHR9LFxuXHRcdF9zaGlwcGluZ09wdGlvbnM6IHtcblx0XHRcdHpvbmVzOiBbXSxcblx0XHRcdHBvc3RhZ2U6IFtdXG5cdFx0fSxcblx0XHRfdXNwc1VzZXJuYW1lOiBcIlwiLFxuXHRcdF9nZW5lcmFsUGFyc2U6IF9nZW5lcmFsUGFyc2UsXG5cdFx0X2ZpbHRlclBvc3RhZ2VPcHRpb25zOiBfZmlsdGVyUG9zdGFnZU9wdGlvbnMsXG5cdFx0X3BhcnNlQ2l0eVN0YXRlUmVzcG9uc2U6IF9wYXJzZUNpdHlTdGF0ZVJlc3BvbnNlLFxuXHRcdGdldFNoaXBwaW5nUmVxdWVzdDogZ2V0U2hpcHBpbmdSZXF1ZXN0LFxuXHRcdGNpdHlTdGF0ZUxvb2t1cDogY2l0eVN0YXRlTG9va3VwLFxuXHRcdHByaWNlQ2FsY3VsYXRvcjogcHJpY2VDYWxjdWxhdG9yXG5cdH07XG5cblx0Lypcblx0Klx0R0VORVJBTCBQQVJTRVxuXHQqXHRcblx0Klx0VGhpcyBmdW5jdGlvbiB1c2VzIGEgM3JkIHBhcnR5IHNjcmlwdCB0byBjb252ZXJ0IHhtbCB0byBqc29uXG5cdCovXG5cdGZ1bmN0aW9uIF9nZW5lcmFsUGFyc2UoeG1sKSB7XG5cdFx0dmFyIHgyanMgPSBuZXcgWDJKUygpO1xuXHRcdHZhciBhZnRlckNudiA9IHgyanMueG1sX3N0cjJqc29uKHhtbCk7XG5cdFx0Y29uc29sZS5sb2coYWZ0ZXJDbnYpO1xuXHRcdHJldHVybiBhZnRlckNudjtcblx0fTtcblxuXHQvKlxuXHQqXHRGSUxURVIgUE9TVEFHRSBPUFRJT05TXG5cdCpcblx0Klx0VGhpcyBmdW5jdGlvbiBzZWxlY3RzIHRoZSBtb3N0IGNvc3QgZWZmZWN0aXZlIHNoaXBwaW5nIG9yaWdpbiBhbmQgcmV0dXJuc1xuXHQqXHRhbGwgdGhlIHBvc3RhZ2Ugb3B0aW9ucyBmcm9tIHRoYXQgbG9jYXRpb25cblx0Klx0QHBhcmFtIFwiYWxsT3B0aW9uc1wiIC0gaXMgYWxsIHRoZSByZXNwb25zZSBkYXRhIGZyb20gVVNQU1xuXHQqXHRAcmV0dXJuIFwiZmlsdGVyZWRPcHRpb25zXCIgLSBbXSBpcyBhbiBhcnJheSBvZiB0aGUgYmVzdCBvcHRpb25zXG5cdCovXG5cdGZ1bmN0aW9uIF9maWx0ZXJQb3N0YWdlT3B0aW9ucyhhbGxPcHRpb25zKSB7XG5cdFx0Ly9kZWZpbmUgbG9jYWwgdmFyaWFibGVzXG5cdFx0dmFyIHNlbGYgPSB0aGlzO1xuXHRcdHZhciBmaWx0ZXJlZE9wdGlvbnMgPSB7fTtcblx0XHR2YXIgcGFja2FnZUxpc3QgPSBhbGxPcHRpb25zLlJhdGVWNFJlc3BvbnNlLlBhY2thZ2U7XG5cdFx0dmFyIGNsb3Nlc3RaaXAgPSB7emlwOiBcIlwiLCB6b25lOjEwMCB9O1xuXG5cdFx0Ly9pdGVyYXRlIHRocm91Z2ggdGhlIHBhY2thZ2VzXG5cdFx0T2JqZWN0LmtleXMocGFja2FnZUxpc3QpLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG5cblx0XHRcdC8vZGVmaW5lIHRoZSBvcmlnaW5hdGlvbiBsb2NhdGlvblxuXHRcdFx0dmFyIFppcE9yaWdpbmF0aW9uID0gcGFja2FnZUxpc3Rba2V5XS5aaXBPcmlnaW5hdGlvbjtcblxuXHRcdFx0Ly9pZiB3ZSBoYXZlbid0IGFkZGVkIHRoaXMgb3JpZ2luYXRpb24gbG9jYXRpb24gdGhlIG1vZGVsLCBkbyBzb1xuXHRcdFx0aWYoZmlsdGVyZWRPcHRpb25zW1ppcE9yaWdpbmF0aW9uXSA9PSB1bmRlZmluZWQpIGZpbHRlcmVkT3B0aW9uc1taaXBPcmlnaW5hdGlvbl0gPSB7IHpvbmU6IDAsIHNlcnZpY2VzOiBbXSB9O1xuXG5cdFx0XHQvL2RlZmluZSB0aGUgem9uZVxuXHRcdFx0ZmlsdGVyZWRPcHRpb25zW1ppcE9yaWdpbmF0aW9uXS56b25lID0gcGFja2FnZUxpc3Rba2V5XS5ab25lO1xuXG5cdFx0XHR2YXIgcG9zdGFnZSA9IHtcblx0XHRcdFx0bWFpbFNlcnZpY2U6IHBhY2thZ2VMaXN0W2tleV0uUG9zdGFnZS5NYWlsU2VydmljZSxcblx0XHRcdFx0cmF0ZTogcGFja2FnZUxpc3Rba2V5XS5Qb3N0YWdlLlJhdGVcblx0XHRcdH07XG5cblx0XHRcdC8vcHVzaCB0aGUgcG9zdGFnZSBvcHRpb25zIGZvciB0aGlzIHBhY2thZ2Ugb250byB0aGUgbG9jYXRpb25cblx0XHRcdGZpbHRlcmVkT3B0aW9uc1taaXBPcmlnaW5hdGlvbl0uc2VydmljZXMucHVzaChwb3N0YWdlKTtcblxuXHRcdH0pO1xuXG5cdFx0Ly9jaGVjayB0aGUgem9uZXMgdG8gc2hpcCBmcm9tIHRoZSBjbG9zZXN0IGxvY2F0aW9uXG5cdFx0T2JqZWN0LmtleXMoZmlsdGVyZWRPcHRpb25zKS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuXG5cdFx0XHQvL2NvbnNvbGUubG9nKGZpbHRlcmVkT3B0aW9uc1trZXldLnpvbmUsIGtleSwgY2xvc2VzdFppcC56b25lLCBmaWx0ZXJlZE9wdGlvbnNba2V5XS56b25lIDwgY2xvc2VzdFppcC56b25lKVxuXHRcdFx0Ly9zYXZlIHRoZSBjbG9zZXN0IHpvbmVcblx0XHRcdGlmKGZpbHRlcmVkT3B0aW9uc1trZXldLnpvbmUgPCBjbG9zZXN0WmlwLnpvbmUpIGNsb3Nlc3RaaXAgPSB7IHppcDoga2V5LCB6b25lOmZpbHRlcmVkT3B0aW9uc1trZXldLnpvbmUgfVxuXG5cdFx0fSk7XHRcblxuXHRcdC8vaXRlcmF0ZSB0aHJvdWdoIGFsbCB0aGUgb2JqZWN0cywgZGVsZXRlIGFsbCB0aGF0IGFyZW4ndCB0aGUgY2xvc2VzdFxuXHRcdE9iamVjdC5rZXlzKGZpbHRlcmVkT3B0aW9ucykuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcblxuXHRcdFx0Ly9pZiBpdCdzIG5vdCB0aGUgc21hbGxlc3QsIGRlbGV0ZSBpdFxuXHRcdFx0aWYoa2V5ICE9IGNsb3Nlc3RaaXAuemlwKSBkZWxldGUgZmlsdGVyZWRPcHRpb25zW2tleV07XG5cblx0XHR9KTtcblxuXHRcdC8vc2F2ZSB0aGUgdmFsdWVzIG91dHNpZGUgdGhlIG9iamVjdFxuXHRcdE9iamVjdC5rZXlzKGZpbHRlcmVkT3B0aW9ucykuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcblx0XHRcdGZpbHRlcmVkT3B0aW9ucyA9IGZpbHRlcmVkT3B0aW9uc1trZXldLnNlcnZpY2VzO1xuXHRcdH0pO1xuXG5cblx0XHRyZXR1cm4gZmlsdGVyZWRPcHRpb25zXG5cdH07XG5cblx0Lypcblx0Klx0UEFSU0UgQ0lUWSBTVEFURSBSRVNQT05TRVxuXHQqXG5cdCpcdEBwYXJhbSBcImNpdHlTdGF0ZVhNTFwiXG5cdCpcdEByZXR1cm4ge1wiY2l0eVwiLCBcInN0YXRlXCJ9XG5cdCovXG5cdGZ1bmN0aW9uIF9wYXJzZUNpdHlTdGF0ZVJlc3BvbnNlKGNpdHlTdGF0ZVhNTCkge1xuXHRcdC8vZGVmaW5lIGxvY2FsIHZhcmlhYmxlXG5cdFx0dmFyIHNlbGYgPSB0aGlzO1xuXHRcdFxuXHRcdGNvbnNvbGUubG9nKGNpdHlTdGF0ZVhNTCwgdHlwZW9mIGNpdHlTdGF0ZVhNTCk7XG5cblx0XHR2YXIgY2l0eVNwbGl0ID0gY2l0eVN0YXRlWE1MLnNwbGl0KCc8Q2l0eT4nKTtcblx0XHR2YXIgZW5kQ2l0eVNwbGl0ID0gY2l0eVNwbGl0WzFdLnNwbGl0KCc8L0NpdHk+Jyk7XG5cdFx0dmFyIHN0YXRlU3BsaXQgPSBjaXR5U3RhdGVYTUwuc3BsaXQoJzxTdGF0ZT4nKTtcblx0XHR2YXIgZW5kU3RhdGVTcGxpdCA9IHN0YXRlU3BsaXRbMV0uc3BsaXQoJzwvU3RhdGU+Jyk7XG5cdFx0dmFyIGNpdHlTdGF0ZU9iamVjdCA9IHtcblx0XHRcdGNpdHk6IGVuZENpdHlTcGxpdFswXSxcblx0XHRcdHN0YXRlOiBlbmRTdGF0ZVNwbGl0WzBdXG5cdFx0fTtcblxuXHRcdC8vcmV0dXJuIHRoZSByZXR1cm5PYmplY3Rcblx0XHRyZXR1cm4gY2l0eVN0YXRlT2JqZWN0O1xuXHR9O1xuXG5cdC8qXG5cdCpcdEdFVCBTSElQUElORyBSRVFVRVNUXG5cdCpcdFxuXHQqXHRUaGlzIGZ1bmN0aW9uIHRha2VzIG5vIHBhcmFtcyBhbmQgcmV0dXJucyB0aGUgc2hpcHBpbmcgcmVxdWVzdCBvYmplY3Rcblx0Klx0QHJldHVybiBfc2hpcHBpbmdSZXF1ZXN0XG5cdCovXG5cdGZ1bmN0aW9uIGdldFNoaXBwaW5nUmVxdWVzdCgpIHtcblx0XHR2YXIgc2VsZiA9IHRoaXM7XG5cdFx0cmV0dXJuIHNlbGYuX3NoaXBwaW5nUmVxdWVzdDtcblx0fTtcblxuXHQvKlxuXHQqXHRDSVRZIFNUQVRFIExPT0tVUFxuXHQqXHRcblx0Klx0VGhpcyBmdW5jdGlvbiBhY2NlcHRzIGEgemlwY29kZSBhbmQgcmV0dXJucyBcblx0Klx0QHBhcmFtIFwiemlwY29kZVwiXG5cdCpcdEByZXR1cm5zIHtcImNpdHlcIiwgXCJzdGF0ZVwifVxuXHQqL1xuXHRmdW5jdGlvbiBjaXR5U3RhdGVMb29rdXAoemlwY29kZSkge1xuXHRcdC8vZGVmaW5lIGxvY2FsIHZhcmlhYmxlXG5cdFx0dmFyIHNlbGYgPSB0aGlzO1xuXHRcdHZhciB1cmwgPSAnaHR0cDovL3Byb2R1Y3Rpb24uc2hpcHBpbmdhcGlzLmNvbS9TaGlwcGluZ0FQSS5kbGw/QVBJPSBDaXR5U3RhdGVMb29rdXAmWE1MPTxDaXR5U3RhdGVMb29rdXBSZXF1ZXN0JTIwVVNFUklEPVwiJyArIHNlbGYuX3VzcHNVc2VybmFtZSArICdcIj48WmlwQ29kZSBJRD0gXCIwXCI+PFppcDU+JyArIHppcGNvZGUgKyAnPC9aaXA1PjwvWmlwQ29kZT48L0NpdHlTdGF0ZUxvb2t1cFJlcXVlc3Q+Jztcblx0XHR2YXIgY29uZmlnID0gJyc7XG5cdFx0XHRcblx0XHRjb25zb2xlLmxvZyh6aXBjb2RlKTtcblxuXHRcdC8vcmV0dXJuIGFzeW5jIHdvcmtcblx0XHRyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG5cblx0XHRcdC8vdXNlIHRoZSB1cmwgcmVzb3VyY2Vcblx0XHRcdCRodHRwLmdldCh1cmwsIGNvbmZpZylcblx0XHRcdC50aGVuKGZ1bmN0aW9uIHN1Y2Nlc3Mocykge1xuXG5cdFx0XHRcdC8vZGVmaW5lIGxvY2FsIHZhcmlhYmxlc1xuXHRcdFx0XHR2YXIgY2l0eVN0YXRlT2JqZWN0ID0gc2VsZi5fcGFyc2VDaXR5U3RhdGVSZXNwb25zZShzLmRhdGEpO1xuXHRcdFx0XHRcblx0XHRcdFx0Ly9BREQgSU4gRVJST1IgSEFORExJTkdcblx0XHRcdFx0Y29uc29sZS5sb2coY2l0eVN0YXRlT2JqZWN0KTtcblxuXHRcdFx0XHQvL3Bhc3MgdGhlIHZhbHVlIGJhY2tcblx0XHRcdFx0cmVzb2x2ZShjaXR5U3RhdGVPYmplY3QpO1xuXG5cdFx0XHR9LCBmdW5jdGlvbiBlcnJvcihlKSB7XG5cblx0XHRcdFx0cmVqZWN0KGUpO1xuXHRcdFx0fSk7XG5cblx0XHR9KTtcblx0fTtcblxuXHQvKlxuXHQqXHRQUklDRSBDQUxDVUxBVE9SXG5cdCpcblx0Klx0VGhpcyBmdW5jdGlvbiBhY2NlcHRzIHRoZSBiZWxvdyBwYXJhbWV0ZXJzIGNvbnRhaW5lZCBpbiBhIHNoaXBwaW5nUmVxdWVzdCBvYmplY3Rcblx0KlxuXHQqXHRUbyBtYWtlIHRoaW5ncyBtb3JlIGNvbXBsaWNhdGVkIHRoaXMgc2hvdWxkIHRyeSBmcm9tIGJvdGggemlwIGNvZGVzICg5NzAwNSBhbmQgODQwMTUpLCBpdCBzaG91bGQgY2hvb3NlIHdoaWNoZXZlciBpcyBjaGVlcGVyXG5cdCpcblx0Klx0SXQgc2hvdWxkIGFsc28gZ2l2ZSBkZWxpdmVyeSBvcHRpb25zIGZvciBQUklPUklUWSBhbmQgRVhQUkVTUy5cblx0KlxuXHQqXHRAcGFyYW0gXCJaaXBEZXN0aW5hdGlvblwiIC0gcmVxdWlyZWRcblx0Klx0QHBhcmFtIFwiUG91bmRzXCIgLSByZXF1aXJlZFxuXHQqXHRAcGFyYW0gXCJPdW5jZXNcIiAtIHJlcXVpcmVkXG5cdCpcdEBwYXJhbSBcIkNvbnRhaW5lclwiIC0gcmVxdWlyZWQgKFJFQ1RBTkdVTEFSIG9yIE5PTlJFQ1RBTkdVTEFSIG11c3QgYmUgaW5kaWNhdGVkIHdoZW4gPFNpemU+TEFSR0U8L1NpemU+KVxuXHQqXHRAcGFyYW0gXCJTaXplXCIgLSByZXF1aXJlZCAoUkVHVUxBUjogUGFja2FnZSBkaW1lbnNpb25zIGFyZSAxMuKAmeKAmSBvciBsZXNzOyBMQVJHRTogQW55IHBhY2thZ2UgZGltZW5zaW9uIGlzIGxhcmdlciB0aGFuIDEy4oCZ4oCZLilcblx0Klx0QHBhcmFtIFwiV2lkdGhcIiAtIG9wdGlvbmFsIChWYWx1ZSBtdXN0IGJlIG51bWVyaWMuIFVuaXRzIGFyZSBpbmNoZXMuKVxuXHQqXHRAcGFyYW0gXCJMZW5ndGhcIiAtIG9wdGlvbmFsIChWYWx1ZSBtdXN0IGJlIG51bWVyaWMuIFVuaXRzIGFyZSBpbmNoZXMuKVxuXHQqXHRAcGFyYW0gXCJIZWlnaHRcIiAtIG9wdGlvbmFsIChWYWx1ZSBtdXN0IGJlIG51bWVyaWMuIFVuaXRzIGFyZSBpbmNoZXMuKVxuXHQqXHRAcGFyYW0gXCJHaXJ0aFwiIC0gb3B0aW9uYWwgKFZhbHVlIG11c3QgYmUgbnVtZXJpYy4gVW5pdHMgYXJlIGluY2hlcy4pXG5cdCpcdEBwYXJhbSBcIlZhbHVlXCIgLSBvcHRpb25hbCAoUGFja2FnZSB2YWx1ZS4gIFVzZWQgdG8gZGV0ZXJtaW5lIGF2YWlsYWJpbGl0eSBhbmQgY29zdCBvZiBleHRyYSBzZXJ2aWNlcy4pXG5cdCpcdFxuXHQqXHRAcmV0dXJuIFByb21pc2U6IFwic2hpcHBpbmdPcHRpb25zXCJ7em9uZVswXSwgcG9zdGFnZVt7bWFpbFNlcnZpY2UsIHJhdGV9XX1cblx0Ki9cblx0ZnVuY3Rpb24gcHJpY2VDYWxjdWxhdG9yKHNoaXBwaW5nUmVxdWVzdCkge1xuXHRcdC8vZGVmaW5lIGxvY2FsIHZhcmlhYmxlc1xuXHRcdHZhciBzZWxmID0gdGhpcztcblx0XHR2YXIgc2hpcHBpbmdPcHRpb25zID0gc2VsZi5fc2hpcHBpbmdPcHRpb25zO1xuXHRcdHZhciBwb3N0YWdlT3B0aW9uID0gc2VsZi5fcG9zdGFnZTtcblx0XHR2YXIgWmlwT3JpZ2luYXRpb24gPSBbJzk3MDA1JywgJzg0MDE1J107XG5cdFx0dmFyIFNlcnZpY2UgPSBbJ0VYUFJFU1MnLCAnUFJJT1JJVFknXTtcblx0XHR2YXIgcGFja2FnZVNpemUgPSAnJztcblx0XHR2YXIgYmFzZVVybCA9ICdodHRwOi8vcHJvZHVjdGlvbi5zaGlwcGluZ2FwaXMuY29tL1NoaXBwaW5nQXBpLmRsbD9BUEk9UmF0ZVY0JlhNTD08UmF0ZVY0UmVxdWVzdCBVU0VSSUQ9XCInICsgc2VsZi5fdXNwc1VzZXJuYW1lICsgJ1wiPic7XG5cdFx0dmFyIGNsb3NlUmVxdWVzdCA9ICc8L1JhdGVWNFJlcXVlc3Q+ICc7XG5cdFx0dmFyIG9wdGlvbkNvdW50ID0gMDtcblxuXHRcdC8vY29uc3RydWN0IHRoZSB1cmwgYnkgYWRkaW5nIHRvIHRoZSBzdHJpbmdcblx0XHR2YXIgdXJsID0gYmFzZVVybDtcblxuXHRcdC8vRGV0ZXJtaW5lIHRoZSBwYWNrYWdlIHNpemVcblx0XHRpZihzaGlwcGluZ1JlcXVlc3QubCA+IDEyIHx8IHNoaXBwaW5nUmVxdWVzdC53ID4gMTIgfHwgc2hpcHBpbmdSZXF1ZXN0LmggPiAxMikgcGFja2FnZVNpemUgPSBcIkxBUkdFXCJcblx0XHRlbHNlIHBhY2thZ2VTaXplID0gJ1JFR1VMQVInO1xuXG5cdFx0Ly9zdGFydCBieSBpdGVyYXRpbmcgdGhyb3VnaCB0aGUgemlwY29kZXNcblx0XHRaaXBPcmlnaW5hdGlvbi5mb3JFYWNoKGZ1bmN0aW9uKHppcGNvZGUpIHtcblxuXHRcdFx0Ly90aGVuIGl0ZXJhdGUgdGhyb3VnaCBlYWNoIHNlcnZpY2VzIHR5cGVcblx0XHRcdFNlcnZpY2UuZm9yRWFjaChmdW5jdGlvbihzZXJ2aWNlVHlwZSkge1xuXG5cdFx0XHRcdC8vaW5jcmltZW50IHRoZSBvcHRpb24gY291bnRlclxuXHRcdFx0XHRvcHRpb25Db3VudCsrO1xuXG5cdFx0XHRcdC8vYWRkIHRoZSBwYWNrYWdlIHRhZ1xuXHRcdFx0XHR1cmwgKz0gKCc8UGFja2FnZSBJRD1cIicgKyBvcHRpb25Db3VudCArICdcIj4nKTtcblxuXHRcdFx0XHQvL2FkZCB0aGUgc2VydmljZSB0eXBlXG5cdFx0XHRcdHVybCArPSAoXCI8U2VydmljZT5cIiArIHNlcnZpY2VUeXBlICsgXCI8L1NlcnZpY2U+XCIpO1xuXG5cdFx0XHRcdC8vYWRkIHRoZSBvcmlnaW4gemlwXG5cdFx0XHRcdHVybCArPSAoXCI8WmlwT3JpZ2luYXRpb24+XCIgKyB6aXBjb2RlICsgXCI8L1ppcE9yaWdpbmF0aW9uPlwiKTtcblxuXHRcdFx0XHQvL2FkZCB0aGUgZGVzdGluYXRpb24gemlwXG5cdFx0XHRcdHVybCArPSAoXCI8WmlwRGVzdGluYXRpb24+XCIgKyBzaGlwcGluZ1JlcXVlc3QuemlwY29kZSArIFwiPC9aaXBEZXN0aW5hdGlvbj5cIik7XG5cblx0XHRcdFx0Ly9hZGQgdGhlIHBvdW5kc1xuXHRcdFx0XHR1cmwgKz0gKFwiPFBvdW5kcz5cIiArIHNoaXBwaW5nUmVxdWVzdC5wb3VuZHMgKyBcIjwvUG91bmRzPlwiKTtcblxuXHRcdFx0XHQvL2FkZCB0aGUgb3VuY2VzXG5cdFx0XHRcdHVybCArPSAoXCI8T3VuY2VzPlwiICsgc2hpcHBpbmdSZXF1ZXN0Lm91bmNlcyArIFwiPC9PdW5jZXM+XCIpO1xuXG5cdFx0XHRcdC8vYWRkIHRoZSBjb250YWluZXJcblx0XHRcdFx0dXJsICs9IChcIjxDb250YWluZXI+XCIgKyBzaGlwcGluZ1JlcXVlc3QuY29udGFpbmVyICsgXCI8L0NvbnRhaW5lcj5cIik7XG5cblx0XHRcdFx0Ly9hZGQgdGhlIHNpemVcblx0XHRcdFx0dXJsICs9IChcIjxTaXplPlwiICsgcGFja2FnZVNpemUgKyBcIjwvU2l6ZT5cIik7XG5cblx0XHRcdFx0Ly9hZGQgdGhlIHdpZHRoXG5cdFx0XHRcdHVybCArPSAoXCI8V2lkdGg+XCIgKyBzaGlwcGluZ1JlcXVlc3QudyArIFwiPC9XaWR0aD5cIik7XG5cblx0XHRcdFx0Ly9hZGQgdGhlIGxlbmd0aFxuXHRcdFx0XHR1cmwgKz0gKFwiPExlbmd0aD5cIiArIHNoaXBwaW5nUmVxdWVzdC5sICsgXCI8L0xlbmd0aD5cIik7XG5cblx0XHRcdFx0Ly9hZGQgdGhlIGhlaWdodFxuXHRcdFx0XHR1cmwgKz0gKFwiPEhlaWdodD5cIiArIHNoaXBwaW5nUmVxdWVzdC5oICsgXCI8L0hlaWdodD5cIik7XG5cblx0XHRcdFx0Ly9hZGQgdGhlIGdpcnRoXG5cdFx0XHRcdC8vdXJsICs9IChcIjxTaXplPlwiICsgcGFja2FnZVNpemUgKyBcIjwvU2l6ZT5cIik7XG5cblx0XHRcdFx0Ly9jbG9zZSB0aGUgcGFja2FnZSB0YWdcblx0XHRcdFx0dXJsICs9ICc8L1BhY2thZ2U+JztcblxuXHRcdFx0fSk7XG5cblx0XHR9KTtcblxuXHRcdC8vd2hlbiBmaW5pc2hlZCBjbG9zZSB0aGUgcmVxdWVzdFxuXHRcdHVybCArPSBjbG9zZVJlcXVlc3Q7XG5cblx0XHQvL3RoZW4gcGFzcyB0aGUgdXJsIHRvIHNlcnZlclxuXHRcdHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblxuXHRcdFx0Ly91c2UgdGhlIHVybCByZXNvdXJjZVxuXHRcdFx0JGh0dHAuZ2V0KHVybCwgY29uZmlnKVxuXHRcdFx0LnRoZW4oZnVuY3Rpb24gc3VjY2VzcyhzKSB7XG5cblx0XHRcdFx0Ly9wYXJzZSB0aGUgeG1sIHJlc3BvbnNlXG5cdFx0XHRcdHZhciBkYXRhSnNvbk9iamVjdCA9IHNlbGYuX2dlbmVyYWxQYXJzZShzLmRhdGEpO1xuXG5cdFx0XHRcdC8vZGlzdGlsbCB0aGUgcG9zdGFnZSBvcHRpb25zIGRvd24gdG8gbW9zdCBjb3N0IGVmZmVjdGl2ZVxuXHRcdFx0XHR2YXIgYWxsUG9zdGFnZU9wdGlvbnMgPSBzZWxmLl9maWx0ZXJQb3N0YWdlT3B0aW9ucyhkYXRhSnNvbk9iamVjdCk7XG5cblx0XHRcdFx0Ly9jb25zb2xlLmxvZygnYWxsUG9zdGFnZU9wdGlvbnMnLCBhbGxQb3N0YWdlT3B0aW9ucyk7XG5cblx0XHRcdFx0Ly9wYXNzIHRoZSByZXN1bHRzIGJhY2tcblx0XHRcdFx0cmVzb2x2ZShhbGxQb3N0YWdlT3B0aW9ucyk7XG5cblx0XHRcdH0sIGZ1bmN0aW9uIGVycm9yKGUpIHtcblx0XHRcdFx0Ly9wYXNzIGVycm9ycyBiYWNrXG5cdFx0XHRcdHJlamVjdChlKTtcblx0XHRcdH0pO1xuXG5cdFx0fSk7XG5cblx0fTtcblxuXHQvKlxuXHQqXHRBRERSRVNTIFZFUklGSUNBVElPTlxuXHQqXG5cdCovXG5cdGZ1bmN0aW9uIGFkZHJlc3NWZXJpZmljYXRpb24oKSB7fTtcblxuXG5cdHJldHVybiB1c3BzU2VydmljZXM7XG59IiwiLy8gTU9EVUxFXG52YXIgYWhOdXRzID0gYW5ndWxhci5tb2R1bGUoJ2FoTnV0cycsIFsnbmdSb3V0ZSddKTtcbiIsImFuZ3VsYXJcbiAgICAubW9kdWxlKCdhaE51dHMnKVxuICAgIC5ydW4oWydzaG9wcGluZ0NhcnQnLCBmdW5jdGlvbihzaG9wcGluZ0NhcnQpIHtcblx0XHRzaG9wcGluZ0NhcnQuaW5pdCgpO1xuXHR9XSk7IiwiLypcbiBDb3B5cmlnaHQgMjAxMS0yMDEzIEFiZHVsbGEgQWJkdXJha2htYW5vdlxuIE9yaWdpbmFsIHNvdXJjZXMgYXJlIGF2YWlsYWJsZSBhdCBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3gyanMvXG4gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuKGZ1bmN0aW9uIChyb290LCBmYWN0b3J5KSB7XG4gICAgIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuICAgICAgICAgZGVmaW5lKFtdLCBmYWN0b3J5KTtcbiAgICAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG4gICAgIH0gZWxzZSB7XG4gICAgICAgICByb290LlgySlMgPSBmYWN0b3J5KCk7XG4gICAgIH1cbiB9KHRoaXMsIGZ1bmN0aW9uICgpIHtcblx0cmV0dXJuIGZ1bmN0aW9uIChjb25maWcpIHtcblx0XHQndXNlIHN0cmljdCc7XG5cdFx0XHRcblx0XHR2YXIgVkVSU0lPTiA9IFwiMS4yLjBcIjtcblx0XHRcblx0XHRjb25maWcgPSBjb25maWcgfHwge307XG5cdFx0aW5pdENvbmZpZ0RlZmF1bHRzKCk7XG5cdFx0aW5pdFJlcXVpcmVkUG9seWZpbGxzKCk7XG5cdFx0XG5cdFx0ZnVuY3Rpb24gaW5pdENvbmZpZ0RlZmF1bHRzKCkge1xuXHRcdFx0aWYoY29uZmlnLmVzY2FwZU1vZGUgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRjb25maWcuZXNjYXBlTW9kZSA9IHRydWU7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdGNvbmZpZy5hdHRyaWJ1dGVQcmVmaXggPSBjb25maWcuYXR0cmlidXRlUHJlZml4IHx8IFwiX1wiO1xuXHRcdFx0Y29uZmlnLmFycmF5QWNjZXNzRm9ybSA9IGNvbmZpZy5hcnJheUFjY2Vzc0Zvcm0gfHwgXCJub25lXCI7XG5cdFx0XHRjb25maWcuZW1wdHlOb2RlRm9ybSA9IGNvbmZpZy5lbXB0eU5vZGVGb3JtIHx8IFwidGV4dFwiO1x0XHRcblx0XHRcdFxuXHRcdFx0aWYoY29uZmlnLmVuYWJsZVRvU3RyaW5nRnVuYyA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdGNvbmZpZy5lbmFibGVUb1N0cmluZ0Z1bmMgPSB0cnVlOyBcblx0XHRcdH1cblx0XHRcdGNvbmZpZy5hcnJheUFjY2Vzc0Zvcm1QYXRocyA9IGNvbmZpZy5hcnJheUFjY2Vzc0Zvcm1QYXRocyB8fCBbXTsgXG5cdFx0XHRpZihjb25maWcuc2tpcEVtcHR5VGV4dE5vZGVzRm9yT2JqID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0Y29uZmlnLnNraXBFbXB0eVRleHROb2Rlc0Zvck9iaiA9IHRydWU7XG5cdFx0XHR9XG5cdFx0XHRpZihjb25maWcuc3RyaXBXaGl0ZXNwYWNlcyA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdGNvbmZpZy5zdHJpcFdoaXRlc3BhY2VzID0gdHJ1ZTtcblx0XHRcdH1cblx0XHRcdGNvbmZpZy5kYXRldGltZUFjY2Vzc0Zvcm1QYXRocyA9IGNvbmZpZy5kYXRldGltZUFjY2Vzc0Zvcm1QYXRocyB8fCBbXTtcblx0XG5cdFx0XHRpZihjb25maWcudXNlRG91YmxlUXVvdGVzID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0Y29uZmlnLnVzZURvdWJsZVF1b3RlcyA9IGZhbHNlO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRjb25maWcueG1sRWxlbWVudHNGaWx0ZXIgPSBjb25maWcueG1sRWxlbWVudHNGaWx0ZXIgfHwgW107XG5cdFx0XHRjb25maWcuanNvblByb3BlcnRpZXNGaWx0ZXIgPSBjb25maWcuanNvblByb3BlcnRpZXNGaWx0ZXIgfHwgW107XG5cdFx0XHRcblx0XHRcdGlmKGNvbmZpZy5rZWVwQ0RhdGEgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRjb25maWcua2VlcENEYXRhID0gZmFsc2U7XG5cdFx0XHR9XG5cdFx0fVxuXHRcblx0XHR2YXIgRE9NTm9kZVR5cGVzID0ge1xuXHRcdFx0RUxFTUVOVF9OT0RFIFx0ICAgOiAxLFxuXHRcdFx0VEVYVF9OT0RFICAgIFx0ICAgOiAzLFxuXHRcdFx0Q0RBVEFfU0VDVElPTl9OT0RFIDogNCxcblx0XHRcdENPTU1FTlRfTk9ERVx0ICAgOiA4LFxuXHRcdFx0RE9DVU1FTlRfTk9ERSBcdCAgIDogOVxuXHRcdH07XG5cdFx0XG5cdFx0ZnVuY3Rpb24gaW5pdFJlcXVpcmVkUG9seWZpbGxzKCkge1x0XHRcblx0XHR9XG5cdFx0XG5cdFx0ZnVuY3Rpb24gZ2V0Tm9kZUxvY2FsTmFtZSggbm9kZSApIHtcblx0XHRcdHZhciBub2RlTG9jYWxOYW1lID0gbm9kZS5sb2NhbE5hbWU7XHRcdFx0XG5cdFx0XHRpZihub2RlTG9jYWxOYW1lID09IG51bGwpIC8vIFllYWgsIHRoaXMgaXMgSUUhISBcblx0XHRcdFx0bm9kZUxvY2FsTmFtZSA9IG5vZGUuYmFzZU5hbWU7XG5cdFx0XHRpZihub2RlTG9jYWxOYW1lID09IG51bGwgfHwgbm9kZUxvY2FsTmFtZT09XCJcIikgLy8gPT1cIlwiIGlzIElFIHRvb1xuXHRcdFx0XHRub2RlTG9jYWxOYW1lID0gbm9kZS5ub2RlTmFtZTtcblx0XHRcdHJldHVybiBub2RlTG9jYWxOYW1lO1xuXHRcdH1cblx0XHRcblx0XHRmdW5jdGlvbiBnZXROb2RlUHJlZml4KG5vZGUpIHtcblx0XHRcdHJldHVybiBub2RlLnByZWZpeDtcblx0XHR9XG5cdFx0XHRcblx0XHRmdW5jdGlvbiBlc2NhcGVYbWxDaGFycyhzdHIpIHtcblx0XHRcdGlmKHR5cGVvZihzdHIpID09IFwic3RyaW5nXCIpXG5cdFx0XHRcdHJldHVybiBzdHIucmVwbGFjZSgvJi9nLCAnJmFtcDsnKS5yZXBsYWNlKC88L2csICcmbHQ7JykucmVwbGFjZSgvPi9nLCAnJmd0OycpLnJlcGxhY2UoL1wiL2csICcmcXVvdDsnKS5yZXBsYWNlKC8nL2csICcmYXBvczsnKTtcblx0XHRcdGVsc2Vcblx0XHRcdFx0cmV0dXJuIHN0cjtcblx0XHR9XG5cdFxuXHRcdGZ1bmN0aW9uIHVuZXNjYXBlWG1sQ2hhcnMoc3RyKSB7XG5cdFx0XHRyZXR1cm4gc3RyLnJlcGxhY2UoLyZsdDsvZywgJzwnKS5yZXBsYWNlKC8mZ3Q7L2csICc+JykucmVwbGFjZSgvJnF1b3Q7L2csICdcIicpLnJlcGxhY2UoLyZhcG9zOy9nLCBcIidcIikucmVwbGFjZSgvJmFtcDsvZywgJyYnKTtcblx0XHR9XG5cdFx0XG5cdFx0ZnVuY3Rpb24gY2hlY2tJblN0ZEZpbHRlcnNBcnJheUZvcm0oc3RkRmlsdGVyc0FycmF5Rm9ybSwgb2JqLCBuYW1lLCBwYXRoKSB7XG5cdFx0XHR2YXIgaWR4ID0gMDtcblx0XHRcdGZvcig7IGlkeCA8IHN0ZEZpbHRlcnNBcnJheUZvcm0ubGVuZ3RoOyBpZHgrKykge1xuXHRcdFx0XHR2YXIgZmlsdGVyUGF0aCA9IHN0ZEZpbHRlcnNBcnJheUZvcm1baWR4XTtcblx0XHRcdFx0aWYoIHR5cGVvZiBmaWx0ZXJQYXRoID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0XHRcdGlmKGZpbHRlclBhdGggPT0gcGF0aClcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGVsc2Vcblx0XHRcdFx0aWYoIGZpbHRlclBhdGggaW5zdGFuY2VvZiBSZWdFeHApIHtcblx0XHRcdFx0XHRpZihmaWx0ZXJQYXRoLnRlc3QocGF0aCkpXG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVx0XHRcdFx0XG5cdFx0XHRcdGVsc2Vcblx0XHRcdFx0aWYoIHR5cGVvZiBmaWx0ZXJQYXRoID09PSBcImZ1bmN0aW9uXCIpIHtcblx0XHRcdFx0XHRpZihmaWx0ZXJQYXRoKG9iaiwgbmFtZSwgcGF0aCkpXG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGlkeCE9c3RkRmlsdGVyc0FycmF5Rm9ybS5sZW5ndGg7XG5cdFx0fVxuXHRcdFxuXHRcdGZ1bmN0aW9uIHRvQXJyYXlBY2Nlc3NGb3JtKG9iaiwgY2hpbGROYW1lLCBwYXRoKSB7XG5cdFx0XHRzd2l0Y2goY29uZmlnLmFycmF5QWNjZXNzRm9ybSkge1xuXHRcdFx0XHRjYXNlIFwicHJvcGVydHlcIjpcblx0XHRcdFx0XHRpZighKG9ialtjaGlsZE5hbWVdIGluc3RhbmNlb2YgQXJyYXkpKVxuXHRcdFx0XHRcdFx0b2JqW2NoaWxkTmFtZStcIl9hc0FycmF5XCJdID0gW29ialtjaGlsZE5hbWVdXTtcblx0XHRcdFx0XHRlbHNlXG5cdFx0XHRcdFx0XHRvYmpbY2hpbGROYW1lK1wiX2FzQXJyYXlcIl0gPSBvYmpbY2hpbGROYW1lXTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0LypjYXNlIFwibm9uZVwiOlxuXHRcdFx0XHRcdGJyZWFrOyovXG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdGlmKCEob2JqW2NoaWxkTmFtZV0gaW5zdGFuY2VvZiBBcnJheSkgJiYgY29uZmlnLmFycmF5QWNjZXNzRm9ybVBhdGhzLmxlbmd0aCA+IDApIHtcblx0XHRcdFx0aWYoY2hlY2tJblN0ZEZpbHRlcnNBcnJheUZvcm0oY29uZmlnLmFycmF5QWNjZXNzRm9ybVBhdGhzLCBvYmosIGNoaWxkTmFtZSwgcGF0aCkpIHtcblx0XHRcdFx0XHRvYmpbY2hpbGROYW1lXSA9IFtvYmpbY2hpbGROYW1lXV07XG5cdFx0XHRcdH1cdFx0XHRcblx0XHRcdH1cblx0XHR9XG5cdFx0XG5cdFx0ZnVuY3Rpb24gZnJvbVhtbERhdGVUaW1lKHByb3ApIHtcblx0XHRcdC8vIEltcGxlbWVudGF0aW9uIGJhc2VkIHVwIG9uIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvODE3ODU5OC94bWwtZGF0ZXRpbWUtdG8tamF2YXNjcmlwdC1kYXRlLW9iamVjdFxuXHRcdFx0Ly8gSW1wcm92ZWQgdG8gc3VwcG9ydCBmdWxsIHNwZWMgYW5kIG9wdGlvbmFsIHBhcnRzXG5cdFx0XHR2YXIgYml0cyA9IHByb3Auc3BsaXQoL1stVDorWl0vZyk7XG5cdFx0XHRcblx0XHRcdHZhciBkID0gbmV3IERhdGUoYml0c1swXSwgYml0c1sxXS0xLCBiaXRzWzJdKTtcdFx0XHRcblx0XHRcdHZhciBzZWNvbmRCaXRzID0gYml0c1s1XS5zcGxpdChcIlxcLlwiKTtcblx0XHRcdGQuc2V0SG91cnMoYml0c1szXSwgYml0c1s0XSwgc2Vjb25kQml0c1swXSk7XG5cdFx0XHRpZihzZWNvbmRCaXRzLmxlbmd0aD4xKVxuXHRcdFx0XHRkLnNldE1pbGxpc2Vjb25kcyhzZWNvbmRCaXRzWzFdKTtcblx0XG5cdFx0XHQvLyBHZXQgc3VwcGxpZWQgdGltZSB6b25lIG9mZnNldCBpbiBtaW51dGVzXG5cdFx0XHRpZihiaXRzWzZdICYmIGJpdHNbN10pIHtcblx0XHRcdFx0dmFyIG9mZnNldE1pbnV0ZXMgPSBiaXRzWzZdICogNjAgKyBOdW1iZXIoYml0c1s3XSk7XG5cdFx0XHRcdHZhciBzaWduID0gL1xcZFxcZC1cXGRcXGQ6XFxkXFxkJC8udGVzdChwcm9wKT8gJy0nIDogJysnO1xuXHRcblx0XHRcdFx0Ly8gQXBwbHkgdGhlIHNpZ25cblx0XHRcdFx0b2Zmc2V0TWludXRlcyA9IDAgKyAoc2lnbiA9PSAnLSc/IC0xICogb2Zmc2V0TWludXRlcyA6IG9mZnNldE1pbnV0ZXMpO1xuXHRcblx0XHRcdFx0Ly8gQXBwbHkgb2Zmc2V0IGFuZCBsb2NhbCB0aW1lem9uZVxuXHRcdFx0XHRkLnNldE1pbnV0ZXMoZC5nZXRNaW51dGVzKCkgLSBvZmZzZXRNaW51dGVzIC0gZC5nZXRUaW1lem9uZU9mZnNldCgpKVxuXHRcdFx0fVxuXHRcdFx0ZWxzZVxuXHRcdFx0XHRpZihwcm9wLmluZGV4T2YoXCJaXCIsIHByb3AubGVuZ3RoIC0gMSkgIT09IC0xKSB7XG5cdFx0XHRcdFx0ZCA9IG5ldyBEYXRlKERhdGUuVVRDKGQuZ2V0RnVsbFllYXIoKSwgZC5nZXRNb250aCgpLCBkLmdldERhdGUoKSwgZC5nZXRIb3VycygpLCBkLmdldE1pbnV0ZXMoKSwgZC5nZXRTZWNvbmRzKCksIGQuZ2V0TWlsbGlzZWNvbmRzKCkpKTtcdFx0XHRcdFx0XG5cdFx0XHRcdH1cblx0XG5cdFx0XHQvLyBkIGlzIG5vdyBhIGxvY2FsIHRpbWUgZXF1aXZhbGVudCB0byB0aGUgc3VwcGxpZWQgdGltZVxuXHRcdFx0cmV0dXJuIGQ7XG5cdFx0fVxuXHRcdFxuXHRcdGZ1bmN0aW9uIGNoZWNrRnJvbVhtbERhdGVUaW1lUGF0aHModmFsdWUsIGNoaWxkTmFtZSwgZnVsbFBhdGgpIHtcblx0XHRcdGlmKGNvbmZpZy5kYXRldGltZUFjY2Vzc0Zvcm1QYXRocy5sZW5ndGggPiAwKSB7XG5cdFx0XHRcdHZhciBwYXRoID0gZnVsbFBhdGguc3BsaXQoXCJcXC4jXCIpWzBdO1xuXHRcdFx0XHRpZihjaGVja0luU3RkRmlsdGVyc0FycmF5Rm9ybShjb25maWcuZGF0ZXRpbWVBY2Nlc3NGb3JtUGF0aHMsIHZhbHVlLCBjaGlsZE5hbWUsIHBhdGgpKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZyb21YbWxEYXRlVGltZSh2YWx1ZSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZWxzZVxuXHRcdFx0XHRcdHJldHVybiB2YWx1ZTtcdFx0XHRcblx0XHRcdH1cblx0XHRcdGVsc2Vcblx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdH1cblx0XHRcblx0XHRmdW5jdGlvbiBjaGVja1htbEVsZW1lbnRzRmlsdGVyKG9iaiwgY2hpbGRUeXBlLCBjaGlsZE5hbWUsIGNoaWxkUGF0aCkge1xuXHRcdFx0aWYoIGNoaWxkVHlwZSA9PSBET01Ob2RlVHlwZXMuRUxFTUVOVF9OT0RFICYmIGNvbmZpZy54bWxFbGVtZW50c0ZpbHRlci5sZW5ndGggPiAwKSB7XG5cdFx0XHRcdHJldHVybiBjaGVja0luU3RkRmlsdGVyc0FycmF5Rm9ybShjb25maWcueG1sRWxlbWVudHNGaWx0ZXIsIG9iaiwgY2hpbGROYW1lLCBjaGlsZFBhdGgpO1x0XG5cdFx0XHR9XG5cdFx0XHRlbHNlXG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cdFxuXHRcblx0XHRmdW5jdGlvbiBwYXJzZURPTUNoaWxkcmVuKCBub2RlLCBwYXRoICkge1xuXHRcdFx0aWYobm9kZS5ub2RlVHlwZSA9PSBET01Ob2RlVHlwZXMuRE9DVU1FTlRfTk9ERSkge1xuXHRcdFx0XHR2YXIgcmVzdWx0ID0gbmV3IE9iamVjdDtcblx0XHRcdFx0dmFyIG5vZGVDaGlsZHJlbiA9IG5vZGUuY2hpbGROb2Rlcztcblx0XHRcdFx0Ly8gQWx0ZXJuYXRpdmUgZm9yIGZpcnN0RWxlbWVudENoaWxkIHdoaWNoIGlzIG5vdCBzdXBwb3J0ZWQgaW4gc29tZSBlbnZpcm9ubWVudHNcblx0XHRcdFx0Zm9yKHZhciBjaWR4PTA7IGNpZHggPG5vZGVDaGlsZHJlbi5sZW5ndGg7IGNpZHgrKykge1xuXHRcdFx0XHRcdHZhciBjaGlsZCA9IG5vZGVDaGlsZHJlbi5pdGVtKGNpZHgpO1xuXHRcdFx0XHRcdGlmKGNoaWxkLm5vZGVUeXBlID09IERPTU5vZGVUeXBlcy5FTEVNRU5UX05PREUpIHtcblx0XHRcdFx0XHRcdHZhciBjaGlsZE5hbWUgPSBnZXROb2RlTG9jYWxOYW1lKGNoaWxkKTtcblx0XHRcdFx0XHRcdHJlc3VsdFtjaGlsZE5hbWVdID0gcGFyc2VET01DaGlsZHJlbihjaGlsZCwgY2hpbGROYW1lKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHRcdH1cblx0XHRcdGVsc2Vcblx0XHRcdGlmKG5vZGUubm9kZVR5cGUgPT0gRE9NTm9kZVR5cGVzLkVMRU1FTlRfTk9ERSkge1xuXHRcdFx0XHR2YXIgcmVzdWx0ID0gbmV3IE9iamVjdDtcblx0XHRcdFx0cmVzdWx0Ll9fY250PTA7XG5cdFx0XHRcdFxuXHRcdFx0XHR2YXIgbm9kZUNoaWxkcmVuID0gbm9kZS5jaGlsZE5vZGVzO1xuXHRcdFx0XHRcblx0XHRcdFx0Ly8gQ2hpbGRyZW4gbm9kZXNcblx0XHRcdFx0Zm9yKHZhciBjaWR4PTA7IGNpZHggPG5vZGVDaGlsZHJlbi5sZW5ndGg7IGNpZHgrKykge1xuXHRcdFx0XHRcdHZhciBjaGlsZCA9IG5vZGVDaGlsZHJlbi5pdGVtKGNpZHgpOyAvLyBub2RlQ2hpbGRyZW5bY2lkeF07XG5cdFx0XHRcdFx0dmFyIGNoaWxkTmFtZSA9IGdldE5vZGVMb2NhbE5hbWUoY2hpbGQpO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdGlmKGNoaWxkLm5vZGVUeXBlIT0gRE9NTm9kZVR5cGVzLkNPTU1FTlRfTk9ERSkge1xuXHRcdFx0XHRcdFx0dmFyIGNoaWxkUGF0aCA9IHBhdGgrXCIuXCIrY2hpbGROYW1lO1xuXHRcdFx0XHRcdFx0aWYgKGNoZWNrWG1sRWxlbWVudHNGaWx0ZXIocmVzdWx0LGNoaWxkLm5vZGVUeXBlLGNoaWxkTmFtZSxjaGlsZFBhdGgpKSB7XG5cdFx0XHRcdFx0XHRcdHJlc3VsdC5fX2NudCsrO1xuXHRcdFx0XHRcdFx0XHRpZihyZXN1bHRbY2hpbGROYW1lXSA9PSBudWxsKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmVzdWx0W2NoaWxkTmFtZV0gPSBwYXJzZURPTUNoaWxkcmVuKGNoaWxkLCBjaGlsZFBhdGgpO1xuXHRcdFx0XHRcdFx0XHRcdHRvQXJyYXlBY2Nlc3NGb3JtKHJlc3VsdCwgY2hpbGROYW1lLCBjaGlsZFBhdGgpO1x0XHRcdFx0XHRcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRpZihyZXN1bHRbY2hpbGROYW1lXSAhPSBudWxsKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiggIShyZXN1bHRbY2hpbGROYW1lXSBpbnN0YW5jZW9mIEFycmF5KSkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXN1bHRbY2hpbGROYW1lXSA9IFtyZXN1bHRbY2hpbGROYW1lXV07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRvQXJyYXlBY2Nlc3NGb3JtKHJlc3VsdCwgY2hpbGROYW1lLCBjaGlsZFBhdGgpO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHQocmVzdWx0W2NoaWxkTmFtZV0pW3Jlc3VsdFtjaGlsZE5hbWVdLmxlbmd0aF0gPSBwYXJzZURPTUNoaWxkcmVuKGNoaWxkLCBjaGlsZFBhdGgpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVx0XHRcdFx0XHRcdFx0XHRcblx0XHRcdFx0fVxuXHRcdFx0XHRcblx0XHRcdFx0Ly8gQXR0cmlidXRlc1xuXHRcdFx0XHRmb3IodmFyIGFpZHg9MDsgYWlkeCA8bm9kZS5hdHRyaWJ1dGVzLmxlbmd0aDsgYWlkeCsrKSB7XG5cdFx0XHRcdFx0dmFyIGF0dHIgPSBub2RlLmF0dHJpYnV0ZXMuaXRlbShhaWR4KTsgLy8gW2FpZHhdO1xuXHRcdFx0XHRcdHJlc3VsdC5fX2NudCsrO1xuXHRcdFx0XHRcdHJlc3VsdFtjb25maWcuYXR0cmlidXRlUHJlZml4K2F0dHIubmFtZV09YXR0ci52YWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRcblx0XHRcdFx0Ly8gTm9kZSBuYW1lc3BhY2UgcHJlZml4XG5cdFx0XHRcdHZhciBub2RlUHJlZml4ID0gZ2V0Tm9kZVByZWZpeChub2RlKTtcblx0XHRcdFx0aWYobm9kZVByZWZpeCE9bnVsbCAmJiBub2RlUHJlZml4IT1cIlwiKSB7XG5cdFx0XHRcdFx0cmVzdWx0Ll9fY250Kys7XG5cdFx0XHRcdFx0cmVzdWx0Ll9fcHJlZml4PW5vZGVQcmVmaXg7XG5cdFx0XHRcdH1cblx0XHRcdFx0XG5cdFx0XHRcdGlmKHJlc3VsdFtcIiN0ZXh0XCJdIT1udWxsKSB7XHRcdFx0XHRcblx0XHRcdFx0XHRyZXN1bHQuX190ZXh0ID0gcmVzdWx0W1wiI3RleHRcIl07XG5cdFx0XHRcdFx0aWYocmVzdWx0Ll9fdGV4dCBpbnN0YW5jZW9mIEFycmF5KSB7XG5cdFx0XHRcdFx0XHRyZXN1bHQuX190ZXh0ID0gcmVzdWx0Ll9fdGV4dC5qb2luKFwiXFxuXCIpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHQvL2lmKGNvbmZpZy5lc2NhcGVNb2RlKVxuXHRcdFx0XHRcdC8vXHRyZXN1bHQuX190ZXh0ID0gdW5lc2NhcGVYbWxDaGFycyhyZXN1bHQuX190ZXh0KTtcblx0XHRcdFx0XHRpZihjb25maWcuc3RyaXBXaGl0ZXNwYWNlcylcblx0XHRcdFx0XHRcdHJlc3VsdC5fX3RleHQgPSByZXN1bHQuX190ZXh0LnRyaW0oKTtcblx0XHRcdFx0XHRkZWxldGUgcmVzdWx0W1wiI3RleHRcIl07XG5cdFx0XHRcdFx0aWYoY29uZmlnLmFycmF5QWNjZXNzRm9ybT09XCJwcm9wZXJ0eVwiKVxuXHRcdFx0XHRcdFx0ZGVsZXRlIHJlc3VsdFtcIiN0ZXh0X2FzQXJyYXlcIl07XG5cdFx0XHRcdFx0cmVzdWx0Ll9fdGV4dCA9IGNoZWNrRnJvbVhtbERhdGVUaW1lUGF0aHMocmVzdWx0Ll9fdGV4dCwgY2hpbGROYW1lLCBwYXRoK1wiLlwiK2NoaWxkTmFtZSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYocmVzdWx0W1wiI2NkYXRhLXNlY3Rpb25cIl0hPW51bGwpIHtcblx0XHRcdFx0XHRyZXN1bHQuX19jZGF0YSA9IHJlc3VsdFtcIiNjZGF0YS1zZWN0aW9uXCJdO1xuXHRcdFx0XHRcdGRlbGV0ZSByZXN1bHRbXCIjY2RhdGEtc2VjdGlvblwiXTtcblx0XHRcdFx0XHRpZihjb25maWcuYXJyYXlBY2Nlc3NGb3JtPT1cInByb3BlcnR5XCIpXG5cdFx0XHRcdFx0XHRkZWxldGUgcmVzdWx0W1wiI2NkYXRhLXNlY3Rpb25fYXNBcnJheVwiXTtcblx0XHRcdFx0fVxuXHRcdFx0XHRcblx0XHRcdFx0aWYoIHJlc3VsdC5fX2NudCA9PSAwICYmIGNvbmZpZy5lbXB0eU5vZGVGb3JtPT1cInRleHRcIiApIHtcblx0XHRcdFx0XHRyZXN1bHQgPSAnJztcblx0XHRcdFx0fVxuXHRcdFx0XHRlbHNlXG5cdFx0XHRcdGlmKCByZXN1bHQuX19jbnQgPT0gMSAmJiByZXN1bHQuX190ZXh0IT1udWxsICApIHtcblx0XHRcdFx0XHRyZXN1bHQgPSByZXN1bHQuX190ZXh0O1xuXHRcdFx0XHR9XG5cdFx0XHRcdGVsc2Vcblx0XHRcdFx0aWYoIHJlc3VsdC5fX2NudCA9PSAxICYmIHJlc3VsdC5fX2NkYXRhIT1udWxsICYmICFjb25maWcua2VlcENEYXRhICApIHtcblx0XHRcdFx0XHRyZXN1bHQgPSByZXN1bHQuX19jZGF0YTtcblx0XHRcdFx0fVx0XHRcdFxuXHRcdFx0XHRlbHNlXHRcdFx0XG5cdFx0XHRcdGlmICggcmVzdWx0Ll9fY250ID4gMSAmJiByZXN1bHQuX190ZXh0IT1udWxsICYmIGNvbmZpZy5za2lwRW1wdHlUZXh0Tm9kZXNGb3JPYmopIHtcblx0XHRcdFx0XHRpZiggKGNvbmZpZy5zdHJpcFdoaXRlc3BhY2VzICYmIHJlc3VsdC5fX3RleHQ9PVwiXCIpIHx8IChyZXN1bHQuX190ZXh0LnRyaW0oKT09XCJcIikpIHtcblx0XHRcdFx0XHRcdGRlbGV0ZSByZXN1bHQuX190ZXh0O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRkZWxldGUgcmVzdWx0Ll9fY250O1x0XHRcdFxuXHRcdFx0XHRcblx0XHRcdFx0aWYoIGNvbmZpZy5lbmFibGVUb1N0cmluZ0Z1bmMgJiYgKHJlc3VsdC5fX3RleHQhPW51bGwgfHwgcmVzdWx0Ll9fY2RhdGEhPW51bGwgKSkge1xuXHRcdFx0XHRcdHJlc3VsdC50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuICh0aGlzLl9fdGV4dCE9bnVsbD8gdGhpcy5fX3RleHQ6JycpKyggdGhpcy5fX2NkYXRhIT1udWxsID8gdGhpcy5fX2NkYXRhOicnKTtcblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdFx0fVxuXHRcdFx0ZWxzZVxuXHRcdFx0aWYobm9kZS5ub2RlVHlwZSA9PSBET01Ob2RlVHlwZXMuVEVYVF9OT0RFIHx8IG5vZGUubm9kZVR5cGUgPT0gRE9NTm9kZVR5cGVzLkNEQVRBX1NFQ1RJT05fTk9ERSkge1xuXHRcdFx0XHRyZXR1cm4gbm9kZS5ub2RlVmFsdWU7XG5cdFx0XHR9XHRcblx0XHR9XG5cdFx0XG5cdFx0ZnVuY3Rpb24gc3RhcnRUYWcoanNvbk9iaiwgZWxlbWVudCwgYXR0ckxpc3QsIGNsb3NlZCkge1xuXHRcdFx0dmFyIHJlc3VsdFN0ciA9IFwiPFwiKyAoIChqc29uT2JqIT1udWxsICYmIGpzb25PYmouX19wcmVmaXghPW51bGwpPyAoanNvbk9iai5fX3ByZWZpeCtcIjpcIik6XCJcIikgKyBlbGVtZW50O1xuXHRcdFx0aWYoYXR0ckxpc3QhPW51bGwpIHtcblx0XHRcdFx0Zm9yKHZhciBhaWR4ID0gMDsgYWlkeCA8IGF0dHJMaXN0Lmxlbmd0aDsgYWlkeCsrKSB7XG5cdFx0XHRcdFx0dmFyIGF0dHJOYW1lID0gYXR0ckxpc3RbYWlkeF07XG5cdFx0XHRcdFx0dmFyIGF0dHJWYWwgPSBqc29uT2JqW2F0dHJOYW1lXTtcblx0XHRcdFx0XHRpZihjb25maWcuZXNjYXBlTW9kZSlcblx0XHRcdFx0XHRcdGF0dHJWYWw9ZXNjYXBlWG1sQ2hhcnMoYXR0clZhbCk7XG5cdFx0XHRcdFx0cmVzdWx0U3RyKz1cIiBcIithdHRyTmFtZS5zdWJzdHIoY29uZmlnLmF0dHJpYnV0ZVByZWZpeC5sZW5ndGgpK1wiPVwiO1xuXHRcdFx0XHRcdGlmKGNvbmZpZy51c2VEb3VibGVRdW90ZXMpXG5cdFx0XHRcdFx0XHRyZXN1bHRTdHIrPSdcIicrYXR0clZhbCsnXCInO1xuXHRcdFx0XHRcdGVsc2Vcblx0XHRcdFx0XHRcdHJlc3VsdFN0cis9XCInXCIrYXR0clZhbCtcIidcIjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aWYoIWNsb3NlZClcblx0XHRcdFx0cmVzdWx0U3RyKz1cIj5cIjtcblx0XHRcdGVsc2Vcblx0XHRcdFx0cmVzdWx0U3RyKz1cIi8+XCI7XG5cdFx0XHRyZXR1cm4gcmVzdWx0U3RyO1xuXHRcdH1cblx0XHRcblx0XHRmdW5jdGlvbiBlbmRUYWcoanNvbk9iaixlbGVtZW50TmFtZSkge1xuXHRcdFx0cmV0dXJuIFwiPC9cIisgKGpzb25PYmouX19wcmVmaXghPW51bGw/IChqc29uT2JqLl9fcHJlZml4K1wiOlwiKTpcIlwiKStlbGVtZW50TmFtZStcIj5cIjtcblx0XHR9XG5cdFx0XG5cdFx0ZnVuY3Rpb24gZW5kc1dpdGgoc3RyLCBzdWZmaXgpIHtcblx0XHRcdHJldHVybiBzdHIuaW5kZXhPZihzdWZmaXgsIHN0ci5sZW5ndGggLSBzdWZmaXgubGVuZ3RoKSAhPT0gLTE7XG5cdFx0fVxuXHRcdFxuXHRcdGZ1bmN0aW9uIGpzb25YbWxTcGVjaWFsRWxlbSAoIGpzb25PYmosIGpzb25PYmpGaWVsZCApIHtcblx0XHRcdGlmKChjb25maWcuYXJyYXlBY2Nlc3NGb3JtPT1cInByb3BlcnR5XCIgJiYgZW5kc1dpdGgoanNvbk9iakZpZWxkLnRvU3RyaW5nKCksKFwiX2FzQXJyYXlcIikpKSBcblx0XHRcdFx0XHR8fCBqc29uT2JqRmllbGQudG9TdHJpbmcoKS5pbmRleE9mKGNvbmZpZy5hdHRyaWJ1dGVQcmVmaXgpPT0wIFxuXHRcdFx0XHRcdHx8IGpzb25PYmpGaWVsZC50b1N0cmluZygpLmluZGV4T2YoXCJfX1wiKT09MFxuXHRcdFx0XHRcdHx8IChqc29uT2JqW2pzb25PYmpGaWVsZF0gaW5zdGFuY2VvZiBGdW5jdGlvbikgKVxuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdGVsc2Vcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0XHRcblx0XHRmdW5jdGlvbiBqc29uWG1sRWxlbUNvdW50ICgganNvbk9iaiApIHtcblx0XHRcdHZhciBlbGVtZW50c0NudCA9IDA7XG5cdFx0XHRpZihqc29uT2JqIGluc3RhbmNlb2YgT2JqZWN0ICkge1xuXHRcdFx0XHRmb3IoIHZhciBpdCBpbiBqc29uT2JqICApIHtcblx0XHRcdFx0XHRpZihqc29uWG1sU3BlY2lhbEVsZW0gKCBqc29uT2JqLCBpdCkgKVxuXHRcdFx0XHRcdFx0Y29udGludWU7XHRcdFx0XG5cdFx0XHRcdFx0ZWxlbWVudHNDbnQrKztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGVsZW1lbnRzQ250O1xuXHRcdH1cblx0XHRcblx0XHRmdW5jdGlvbiBjaGVja0pzb25PYmpQcm9wZXJ0aWVzRmlsdGVyKGpzb25PYmosIHByb3BlcnR5TmFtZSwganNvbk9ialBhdGgpIHtcblx0XHRcdHJldHVybiBjb25maWcuanNvblByb3BlcnRpZXNGaWx0ZXIubGVuZ3RoID09IDBcblx0XHRcdFx0fHwganNvbk9ialBhdGg9PVwiXCJcblx0XHRcdFx0fHwgY2hlY2tJblN0ZEZpbHRlcnNBcnJheUZvcm0oY29uZmlnLmpzb25Qcm9wZXJ0aWVzRmlsdGVyLCBqc29uT2JqLCBwcm9wZXJ0eU5hbWUsIGpzb25PYmpQYXRoKTtcdFxuXHRcdH1cblx0XHRcblx0XHRmdW5jdGlvbiBwYXJzZUpTT05BdHRyaWJ1dGVzICgganNvbk9iaiApIHtcblx0XHRcdHZhciBhdHRyTGlzdCA9IFtdO1xuXHRcdFx0aWYoanNvbk9iaiBpbnN0YW5jZW9mIE9iamVjdCApIHtcblx0XHRcdFx0Zm9yKCB2YXIgYWl0IGluIGpzb25PYmogICkge1xuXHRcdFx0XHRcdGlmKGFpdC50b1N0cmluZygpLmluZGV4T2YoXCJfX1wiKT09IC0xICYmIGFpdC50b1N0cmluZygpLmluZGV4T2YoY29uZmlnLmF0dHJpYnV0ZVByZWZpeCk9PTApIHtcblx0XHRcdFx0XHRcdGF0dHJMaXN0LnB1c2goYWl0KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBhdHRyTGlzdDtcblx0XHR9XG5cdFx0XG5cdFx0ZnVuY3Rpb24gcGFyc2VKU09OVGV4dEF0dHJzICgganNvblR4dE9iaiApIHtcblx0XHRcdHZhciByZXN1bHQgPVwiXCI7XG5cdFx0XHRcblx0XHRcdGlmKGpzb25UeHRPYmouX19jZGF0YSE9bnVsbCkge1x0XHRcdFx0XHRcdFx0XHRcdFx0XG5cdFx0XHRcdHJlc3VsdCs9XCI8IVtDREFUQVtcIitqc29uVHh0T2JqLl9fY2RhdGErXCJdXT5cIjtcdFx0XHRcdFx0XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdGlmKGpzb25UeHRPYmouX190ZXh0IT1udWxsKSB7XHRcdFx0XG5cdFx0XHRcdGlmKGNvbmZpZy5lc2NhcGVNb2RlKVxuXHRcdFx0XHRcdHJlc3VsdCs9ZXNjYXBlWG1sQ2hhcnMoanNvblR4dE9iai5fX3RleHQpO1xuXHRcdFx0XHRlbHNlXG5cdFx0XHRcdFx0cmVzdWx0Kz1qc29uVHh0T2JqLl9fdGV4dDtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0fVxuXHRcdFxuXHRcdGZ1bmN0aW9uIHBhcnNlSlNPTlRleHRPYmplY3QgKCBqc29uVHh0T2JqICkge1xuXHRcdFx0dmFyIHJlc3VsdCA9XCJcIjtcblx0XG5cdFx0XHRpZigganNvblR4dE9iaiBpbnN0YW5jZW9mIE9iamVjdCApIHtcblx0XHRcdFx0cmVzdWx0Kz1wYXJzZUpTT05UZXh0QXR0cnMgKCBqc29uVHh0T2JqICk7XG5cdFx0XHR9XG5cdFx0XHRlbHNlXG5cdFx0XHRcdGlmKGpzb25UeHRPYmohPW51bGwpIHtcblx0XHRcdFx0XHRpZihjb25maWcuZXNjYXBlTW9kZSlcblx0XHRcdFx0XHRcdHJlc3VsdCs9ZXNjYXBlWG1sQ2hhcnMoanNvblR4dE9iaik7XG5cdFx0XHRcdFx0ZWxzZVxuXHRcdFx0XHRcdFx0cmVzdWx0Kz1qc29uVHh0T2JqO1xuXHRcdFx0XHR9XG5cdFx0XHRcblx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0fVxuXHRcdFxuXHRcdGZ1bmN0aW9uIGdldEpzb25Qcm9wZXJ0eVBhdGgoanNvbk9ialBhdGgsIGpzb25Qcm9wTmFtZSkge1xuXHRcdFx0aWYgKGpzb25PYmpQYXRoPT09XCJcIikge1xuXHRcdFx0XHRyZXR1cm4ganNvblByb3BOYW1lO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZVxuXHRcdFx0XHRyZXR1cm4ganNvbk9ialBhdGgrXCIuXCIranNvblByb3BOYW1lO1xuXHRcdH1cblx0XHRcblx0XHRmdW5jdGlvbiBwYXJzZUpTT05BcnJheSAoIGpzb25BcnJSb290LCBqc29uQXJyT2JqLCBhdHRyTGlzdCwganNvbk9ialBhdGggKSB7XG5cdFx0XHR2YXIgcmVzdWx0ID0gXCJcIjsgXG5cdFx0XHRpZihqc29uQXJyUm9vdC5sZW5ndGggPT0gMCkge1xuXHRcdFx0XHRyZXN1bHQrPXN0YXJ0VGFnKGpzb25BcnJSb290LCBqc29uQXJyT2JqLCBhdHRyTGlzdCwgdHJ1ZSk7XG5cdFx0XHR9XG5cdFx0XHRlbHNlIHtcblx0XHRcdFx0Zm9yKHZhciBhcklkeCA9IDA7IGFySWR4IDwganNvbkFyclJvb3QubGVuZ3RoOyBhcklkeCsrKSB7XG5cdFx0XHRcdFx0cmVzdWx0Kz1zdGFydFRhZyhqc29uQXJyUm9vdFthcklkeF0sIGpzb25BcnJPYmosIHBhcnNlSlNPTkF0dHJpYnV0ZXMoanNvbkFyclJvb3RbYXJJZHhdKSwgZmFsc2UpO1xuXHRcdFx0XHRcdHJlc3VsdCs9cGFyc2VKU09OT2JqZWN0KGpzb25BcnJSb290W2FySWR4XSwgZ2V0SnNvblByb3BlcnR5UGF0aChqc29uT2JqUGF0aCxqc29uQXJyT2JqKSk7XG5cdFx0XHRcdFx0cmVzdWx0Kz1lbmRUYWcoanNvbkFyclJvb3RbYXJJZHhdLGpzb25BcnJPYmopO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdH1cblx0XHRcblx0XHRmdW5jdGlvbiBwYXJzZUpTT05PYmplY3QgKCBqc29uT2JqLCBqc29uT2JqUGF0aCApIHtcblx0XHRcdHZhciByZXN1bHQgPSBcIlwiO1x0XG5cdFxuXHRcdFx0dmFyIGVsZW1lbnRzQ250ID0ganNvblhtbEVsZW1Db3VudCAoIGpzb25PYmogKTtcblx0XHRcdFxuXHRcdFx0aWYoZWxlbWVudHNDbnQgPiAwKSB7XG5cdFx0XHRcdGZvciggdmFyIGl0IGluIGpzb25PYmogKSB7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0aWYoanNvblhtbFNwZWNpYWxFbGVtICgganNvbk9iaiwgaXQpIHx8IChqc29uT2JqUGF0aCE9XCJcIiAmJiAhY2hlY2tKc29uT2JqUHJvcGVydGllc0ZpbHRlcihqc29uT2JqLCBpdCwgZ2V0SnNvblByb3BlcnR5UGF0aChqc29uT2JqUGF0aCxpdCkpKSApXG5cdFx0XHRcdFx0XHRjb250aW51ZTtcdFx0XHRcblx0XHRcdFx0XHRcblx0XHRcdFx0XHR2YXIgc3ViT2JqID0ganNvbk9ialtpdF07XHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0dmFyIGF0dHJMaXN0ID0gcGFyc2VKU09OQXR0cmlidXRlcyggc3ViT2JqIClcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRpZihzdWJPYmogPT0gbnVsbCB8fCBzdWJPYmogPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0XHRyZXN1bHQrPXN0YXJ0VGFnKHN1Yk9iaiwgaXQsIGF0dHJMaXN0LCB0cnVlKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZWxzZVxuXHRcdFx0XHRcdGlmKHN1Yk9iaiBpbnN0YW5jZW9mIE9iamVjdCkge1xuXHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRpZihzdWJPYmogaW5zdGFuY2VvZiBBcnJheSkge1x0XHRcdFx0XHRcblx0XHRcdFx0XHRcdFx0cmVzdWx0Kz1wYXJzZUpTT05BcnJheSggc3ViT2JqLCBpdCwgYXR0ckxpc3QsIGpzb25PYmpQYXRoICk7XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0ZWxzZSBpZihzdWJPYmogaW5zdGFuY2VvZiBEYXRlKSB7XG5cdFx0XHRcdFx0XHRcdHJlc3VsdCs9c3RhcnRUYWcoc3ViT2JqLCBpdCwgYXR0ckxpc3QsIGZhbHNlKTtcblx0XHRcdFx0XHRcdFx0cmVzdWx0Kz1zdWJPYmoudG9JU09TdHJpbmcoKTtcblx0XHRcdFx0XHRcdFx0cmVzdWx0Kz1lbmRUYWcoc3ViT2JqLGl0KTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGVsc2Uge1xuXHRcdFx0XHRcdFx0XHR2YXIgc3ViT2JqRWxlbWVudHNDbnQgPSBqc29uWG1sRWxlbUNvdW50ICggc3ViT2JqICk7XG5cdFx0XHRcdFx0XHRcdGlmKHN1Yk9iakVsZW1lbnRzQ250ID4gMCB8fCBzdWJPYmouX190ZXh0IT1udWxsIHx8IHN1Yk9iai5fX2NkYXRhIT1udWxsKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmVzdWx0Kz1zdGFydFRhZyhzdWJPYmosIGl0LCBhdHRyTGlzdCwgZmFsc2UpO1xuXHRcdFx0XHRcdFx0XHRcdHJlc3VsdCs9cGFyc2VKU09OT2JqZWN0KHN1Yk9iaiwgZ2V0SnNvblByb3BlcnR5UGF0aChqc29uT2JqUGF0aCxpdCkpO1xuXHRcdFx0XHRcdFx0XHRcdHJlc3VsdCs9ZW5kVGFnKHN1Yk9iaixpdCk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0ZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0cmVzdWx0Kz1zdGFydFRhZyhzdWJPYmosIGl0LCBhdHRyTGlzdCwgdHJ1ZSk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZWxzZSB7XG5cdFx0XHRcdFx0XHRyZXN1bHQrPXN0YXJ0VGFnKHN1Yk9iaiwgaXQsIGF0dHJMaXN0LCBmYWxzZSk7XG5cdFx0XHRcdFx0XHRyZXN1bHQrPXBhcnNlSlNPTlRleHRPYmplY3Qoc3ViT2JqKTtcblx0XHRcdFx0XHRcdHJlc3VsdCs9ZW5kVGFnKHN1Yk9iaixpdCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXN1bHQrPXBhcnNlSlNPTlRleHRPYmplY3QoanNvbk9iaik7XG5cdFx0XHRcblx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0fVxuXHRcdFxuXHRcdHRoaXMucGFyc2VYbWxTdHJpbmcgPSBmdW5jdGlvbih4bWxEb2NTdHIpIHtcblx0XHRcdHZhciBpc0lFUGFyc2VyID0gd2luZG93LkFjdGl2ZVhPYmplY3QgfHwgXCJBY3RpdmVYT2JqZWN0XCIgaW4gd2luZG93O1xuXHRcdFx0aWYgKHhtbERvY1N0ciA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0fVxuXHRcdFx0dmFyIHhtbERvYztcblx0XHRcdGlmICh3aW5kb3cuRE9NUGFyc2VyKSB7XG5cdFx0XHRcdHZhciBwYXJzZXI9bmV3IHdpbmRvdy5ET01QYXJzZXIoKTtcdFx0XHRcblx0XHRcdFx0dmFyIHBhcnNlcmVycm9yTlMgPSBudWxsO1xuXHRcdFx0XHQvLyBJRTkrIG5vdyBpcyBoZXJlXG5cdFx0XHRcdGlmKCFpc0lFUGFyc2VyKSB7XG5cdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdHBhcnNlcmVycm9yTlMgPSBwYXJzZXIucGFyc2VGcm9tU3RyaW5nKFwiSU5WQUxJRFwiLCBcInRleHQveG1sXCIpLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwicGFyc2VyZXJyb3JcIilbMF0ubmFtZXNwYWNlVVJJO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRjYXRjaChlcnIpIHtcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRwYXJzZXJlcnJvck5TID0gbnVsbDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHR4bWxEb2MgPSBwYXJzZXIucGFyc2VGcm9tU3RyaW5nKCB4bWxEb2NTdHIsIFwidGV4dC94bWxcIiApO1xuXHRcdFx0XHRcdGlmKCBwYXJzZXJlcnJvck5TIT0gbnVsbCAmJiB4bWxEb2MuZ2V0RWxlbWVudHNCeVRhZ05hbWVOUyhwYXJzZXJlcnJvck5TLCBcInBhcnNlcmVycm9yXCIpLmxlbmd0aCA+IDApIHtcblx0XHRcdFx0XHRcdC8vdGhyb3cgbmV3IEVycm9yKCdFcnJvciBwYXJzaW5nIFhNTDogJyt4bWxEb2NTdHIpO1xuXHRcdFx0XHRcdFx0eG1sRG9jID0gbnVsbDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0Y2F0Y2goZXJyKSB7XG5cdFx0XHRcdFx0eG1sRG9jID0gbnVsbDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0ZWxzZSB7XG5cdFx0XHRcdC8vIElFIDooXG5cdFx0XHRcdGlmKHhtbERvY1N0ci5pbmRleE9mKFwiPD9cIik9PTApIHtcblx0XHRcdFx0XHR4bWxEb2NTdHIgPSB4bWxEb2NTdHIuc3Vic3RyKCB4bWxEb2NTdHIuaW5kZXhPZihcIj8+XCIpICsgMiApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHhtbERvYz1uZXcgQWN0aXZlWE9iamVjdChcIk1pY3Jvc29mdC5YTUxET01cIik7XG5cdFx0XHRcdHhtbERvYy5hc3luYz1cImZhbHNlXCI7XG5cdFx0XHRcdHhtbERvYy5sb2FkWE1MKHhtbERvY1N0cik7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4geG1sRG9jO1xuXHRcdH07XG5cdFx0XG5cdFx0dGhpcy5hc0FycmF5ID0gZnVuY3Rpb24ocHJvcCkge1xuXHRcdFx0aWYgKHByb3AgPT09IHVuZGVmaW5lZCB8fCBwcm9wID09IG51bGwpXG5cdFx0XHRcdHJldHVybiBbXTtcblx0XHRcdGVsc2Vcblx0XHRcdGlmKHByb3AgaW5zdGFuY2VvZiBBcnJheSlcblx0XHRcdFx0cmV0dXJuIHByb3A7XG5cdFx0XHRlbHNlXG5cdFx0XHRcdHJldHVybiBbcHJvcF07XG5cdFx0fTtcblx0XHRcblx0XHR0aGlzLnRvWG1sRGF0ZVRpbWUgPSBmdW5jdGlvbihkdCkge1xuXHRcdFx0aWYoZHQgaW5zdGFuY2VvZiBEYXRlKVxuXHRcdFx0XHRyZXR1cm4gZHQudG9JU09TdHJpbmcoKTtcblx0XHRcdGVsc2Vcblx0XHRcdGlmKHR5cGVvZihkdCkgPT09ICdudW1iZXInIClcblx0XHRcdFx0cmV0dXJuIG5ldyBEYXRlKGR0KS50b0lTT1N0cmluZygpO1xuXHRcdFx0ZWxzZVx0XG5cdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdH07XG5cdFx0XG5cdFx0dGhpcy5hc0RhdGVUaW1lID0gZnVuY3Rpb24ocHJvcCkge1xuXHRcdFx0aWYodHlwZW9mKHByb3ApID09IFwic3RyaW5nXCIpIHtcblx0XHRcdFx0cmV0dXJuIGZyb21YbWxEYXRlVGltZShwcm9wKTtcblx0XHRcdH1cblx0XHRcdGVsc2Vcblx0XHRcdFx0cmV0dXJuIHByb3A7XG5cdFx0fTtcblx0XG5cdFx0dGhpcy54bWwyanNvbiA9IGZ1bmN0aW9uICh4bWxEb2MpIHtcblx0XHRcdHJldHVybiBwYXJzZURPTUNoaWxkcmVuICggeG1sRG9jICk7XG5cdFx0fTtcblx0XHRcblx0XHR0aGlzLnhtbF9zdHIyanNvbiA9IGZ1bmN0aW9uICh4bWxEb2NTdHIpIHtcblx0XHRcdHZhciB4bWxEb2MgPSB0aGlzLnBhcnNlWG1sU3RyaW5nKHhtbERvY1N0cik7XG5cdFx0XHRpZih4bWxEb2MhPW51bGwpXG5cdFx0XHRcdHJldHVybiB0aGlzLnhtbDJqc29uKHhtbERvYyk7XG5cdFx0XHRlbHNlXG5cdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdH07XG5cdFxuXHRcdHRoaXMuanNvbjJ4bWxfc3RyID0gZnVuY3Rpb24gKGpzb25PYmopIHtcblx0XHRcdHJldHVybiBwYXJzZUpTT05PYmplY3QgKCBqc29uT2JqLCBcIlwiICk7XG5cdFx0fTtcblx0XG5cdFx0dGhpcy5qc29uMnhtbCA9IGZ1bmN0aW9uIChqc29uT2JqKSB7XG5cdFx0XHR2YXIgeG1sRG9jU3RyID0gdGhpcy5qc29uMnhtbF9zdHIgKGpzb25PYmopO1xuXHRcdFx0cmV0dXJuIHRoaXMucGFyc2VYbWxTdHJpbmcoeG1sRG9jU3RyKTtcblx0XHR9O1xuXHRcdFxuXHRcdHRoaXMuZ2V0VmVyc2lvbiA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdHJldHVybiBWRVJTSU9OO1xuXHRcdH07XHRcblx0fVxufSkpIl19
