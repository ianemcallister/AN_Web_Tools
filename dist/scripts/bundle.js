function aProductController(t,e,r,o){var n=this;n.product=o,n.returnHome=function(){r.path("/")}}function accountsController(t,e,r){var o=this;o.registeredUser=!1,o.forgotPassword=!1,t.info("in the accounts controller"),function(t){"CreateProfile"==t||"ForgotPassword"==t?"ForgotPassword"==t&&(o.forgotPassword=!0):o.registeredUser=!0}(e.param)}function allProductsController(t,e,r,o){var n=this;n.allProducts=o,void 0!=e.filter&&(n.selectedProducts=e.filter),n.selectAProuct=function(t){var e="/product/"+t;r.path(e).search("filter",null)}}function cartController(t,e,r,o){var n=this;n.cart=o,t.info("in the cart controller",n.cart),n.cart.calcTotalCost()}function checkoutController(t,e,r,o,n){var i=this;i.cart=n,i.squareCreds=o,t.info("in the checkout controller"),i.backBtn=function(){r.path("/cart")},i.submitOrder=function(){r.path("/order-confirmation/TESTING")}}function internalActtsController(t,e,r,o){var n=this,i=o;t.info("in the internal controller"),n.submit=function(){console.log("submitting"),i.post("/api/shiftEarnings",{test:"test"}).then(function(t){console.log("got this response",t)})}}function landingController(t,e,r,o,n){}function locationsController(t,e,r){t.info("in the locations controller")}function loginController(t,e,r,o){var n=this,i=o;t.info("in the login controller"),n.email="",n.password="",n.login=function(){i.post("/api/authenticate",{email:n.email,pass:n.password},"").then(function(e){var o="#/teamMember/"+e;t.info("got this token back",o),r.path("/")})}}function mainController(t,e,r,o){t.teamMember=!1}function orderConfirmationController(t,e,r,o){e.info("in the order confirmation controller")}function productGettingController(t,e,r,o,n,i,c,l){var a=this;a.product=r.item,a.cart=n,a.state=i,a.usps=c,a.usps._uspsUsername=l,a.order=function(){a.cart.updateAquisitionMethod(),a.cart.aquisitionMethod="delivery",o.path("/cart")},a.cityStateLookup=function(){c.cityStateLookup(a.cart.aquisitionDetails.deliveryLocation.zip).then(function(t){a.cart.aquisitionDetails.deliveryLocation.city=t.city,a.cart.aquisitionDetails.deliveryLocation.state=t.state}).catch(function(t){console.log("error:",t)})},a.zipGo=function(e){a.usps.priceCalculator({l:5,w:5,h:5,zipcode:a.cart.aquisitionDetails.deliveryLocation.zip,pounds:1,ounces:8,container:"VARIABLE"}).then(function(e){var r="";console.log("got this back",e),Object.keys(e).forEach(function(t){r=t}),a.cart.aquisitionDetails.deliveryMethod.shippingOrigin=r,a.uspsOptions=e[r].services,t.$apply()}).catch(function(t){console.log("error",t)})}}function registerAcctController(t,e,r){console.log("in the registerAcctController ")}function ahHeader(){function t(t,e,r,o){}function e(t,e,r,o){var n=this;n.cart=o,n.navbnt=function(t){e.info("clicked",t),"menu"!=t&&r.path("/"+t)}}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/ah.header.directive.htm",replace:!0,scope:{},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log","$location","shoppingCart"],r}function ahFooter(){function t(t,e,r,o){}function e(t,e){}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/ah.footer.directive.htm",replace:!0,scope:{},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],r}function cartItemsList(){function t(t,e,r,o){}function e(t,e,r){var o=this,n=r;e.info("in the cartItemsListController directive",o.cartItems),o.removeItem=function(t){console.log("removing itemId",t),n.removeItem(t)},o.updateQty=function(t,e){n.updateItemQty(t,e)}}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/cartItemsList.directive.htm",replace:!0,scope:{cartItems:"="},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log","shoppingCart"],r}function cartNavigation(){function t(t,e,r,o){}function e(t,e,r){var o=this;e.info("in the cart navigation directive"),o.shopMore=function(){r.path("/all-products")},o.checkout=function(){r.path("/checkout")}}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/cartNavigation.directive.htm",replace:!0,scope:{},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log","$location"],r}function cartSummary(){function t(t,e,r,o){}function e(t,e){e.info("in the cart summary directive")}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/cartSummary.directive.htm",replace:!0,scope:{noItems:"=",subtotal:"="},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],r}function checkoutBilling(){function t(t,e,r,o){}function e(t,e){var r=this;r.payDet={name:{first:"",last:""},street1:"",street2:"",street3:"",city:"",state:"",zip:"",phone:"",po:"",email:""},e.info("in the checkoutBilling directive",r.aquDet,r.payDet),r.copyDelAdd=function(){r.payDet.name.first=r.aquDet.deliveryLocation.receiver.first,r.payDet.name.last=r.aquDet.deliveryLocation.receiver.last,r.payDet.street1=r.aquDet.deliveryLocation.street1,r.payDet.street2=r.aquDet.deliveryLocation.street2,r.payDet.street3=r.aquDet.deliveryLocation.street3,r.payDet.city=r.aquDet.deliveryLocation.city,r.payDet.state=r.aquDet.deliveryLocation.state,r.payDet.zip=r.aquDet.deliveryLocation.zip}}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/checkoutBilling.directive.htm",replace:!0,scope:{aquDet:"=",payDet:"="},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],r}function checkoutFollowup(){function t(t,e,r,o){}function e(t,e){e.info("in the checkoutFollowupController directive")}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/checkoutFollowup.directive.htm",replace:!0,scope:{},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],r}function checkoutPayment(){function t(t,e,r,o){}function e(t,e,r){var o=this;o.data=r;e.info("in the checkoutPayment directive");var n=new SqPaymentForm({applicationId:"REPLACE_ME",locationId:"REPLACE_ME",inputClass:"sq-input",inputStyles:[{fontSize:"15px"}],cardNumber:{elementId:"sq-card-number",placeholder:"•••• •••• •••• ••••"},cvv:{elementId:"sq-cvv",placeholder:"CVV"},expirationDate:{elementId:"sq-expiration-date",placeholder:"MM/YY"},postalCode:{elementId:"sq-postal-code"},applePay:{elementId:"sq-apple-pay"},callbacks:{methodsSupported:function(t){!0===t.applePay&&(document.getElementById("sq-apple-pay").style.display="inline-block")},createPaymentRequest:function(){return{requestShippingAddress:!0,currencyCode:"USD",countryCode:"US",total:{label:"{{ MERCHANT NAME }}",amount:"{{TOTAL AMOUNT}}",pending:!1},lineItems:[{label:"Subtotal",amount:"{{SUBTOTAL AMOUNT}}",pending:!1},{label:"Shipping",amount:"{{SHIPPING AMOUNT}}",pending:!0},{label:"Tax",amount:"{{TAX AMOUNT}}",pending:!1}]}},cardNonceResponseReceived:function(t,e,r){if(t)return console.log("Encountered errors:"),void t.forEach(function(t){console.log("  "+t.message)});document.getElementById("card-nonce").value=e,document.getElementById("nonce-form").submit(),o.data.post("/process-card",{nonce:e})},unsupportedBrowserDetected:function(){},inputEventReceived:function(t){t.eventType},paymentFormLoaded:function(){}}});o.requestCardNonce=function(t){console.log("requestion card Nonce"),t.preventDefault(),n.requestCardNonce()},n.build()}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/checkoutPayment.directive.htm",replace:!0,scope:{squareCreds:"="},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log","dataServices"],r}function couponSubmission(){function t(t,e,r,o){}function e(t,e){e.info("in the coupon-submission directive")}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/couponSubmission.directive.htm",replace:!0,scope:{},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],r}function createNewAccount(){function t(t,e,r,o){}function e(t,e,r){e.info("in the create new account directive")}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/createNewAccount.directive.htm",replace:!0,scope:{},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log","$location"],r}function defineDeliveryAddress(){function t(t,e,r,o){}function e(t,e){}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/defineDeliveryAddress.directive.htm",replace:!0,scope:{deliverTo:"="},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],r}function deliveryDetails(){function t(t,e,r,o){}function e(t,e,r){var o=this;e.info("in the deliveryDetails directive",o.deliverTo),o.changeDetails=function(){r.path("/getting-the-product/10")}}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/deliveryDetails.directive.htm",replace:!0,scope:{deliverTo:"="},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log","$location"],r}function featuredProducts(){function t(t,e,r,o){}function e(t,e,r){var o=this;o.mrPrdctsBtn=function(){r.path("/all-products")},o.productSelectionBtn=function(t){r.path("/all-products").search("filter",t)}}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/featuredProducts.directive.htm",replace:!0,scope:{},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log","$location"],r}function fedexOptions(){function t(t,e,r,o){}function e(t,e){}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/fedexOptions.directive.htm",replace:!0,scope:{},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],r}function fullProductProfile(){function t(t,e,r,o){}function e(t,e,r,o){var n=this;n.cart=o,n.itemSelections=n.product.sizes,n.addToCart=function(t){n.itemSelections.forEach(function(t){t.qty>0&&n.cart.addItem(t)}),n.cart.acqMethIsDefined()?r.path("/cart"):r.path("/getting-the-product/10")}}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/fullProductProfile.directive.htm",replace:!0,scope:{product:"="},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log","$location","shoppingCart"],r}function heroBanner(){function t(t,e,r,o){}function e(t,e){}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/heroBanner.directive.htm",replace:!0,scope:{},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],r}function passwordReset(){function t(t,e,r,o){}function e(t,e,r){var o=this;e.info("in the passwordReset directive"),o.email="",o.back=function(){r.path("/login")},o.submit=function(){e.info("submitting email",o.email)}}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/passwordReset.directive.htm",replace:!0,scope:{},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log","$location"],r}function pickupOrDelivery(){function t(t,e,r,o){}function e(t,e){var r=this;e.info("in the pickup-or-delivery directive",r.method,r.details)}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/pickupOrDelivery.directive.htm",replace:!0,scope:{method:"=",details:"="},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],r}function primaryContent(){function t(t,e,r,o){}function e(t,e){e.info("in the header directive")}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/primaryContent.directive.htm",replace:!0,scope:{},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],r}function productSizePicker(){function t(t,e,r,o){}function e(t,e){}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/productSizePicker.directive.htm",replace:!0,scope:{sizes:"="},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],r}function prdctThmbnl(){function t(t,e,r,o){}function e(t,e){}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/prdctThmbnl.directive.htm",replace:!0,scope:{product:"="},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],r}function selectDeliveryMethod(){function t(t,e,r,o){}function e(t,e){}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/selectDeliveryMethod.directive.htm",replace:!0,scope:{usps:"="},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],r}function selectPOrD(){function t(t,e,r,o){}function e(t,e){}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/selectPOrD.directive.htm",replace:!0,scope:{},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],r}function selectPickupLocation(){function t(t,e,r,o){}function e(t,e){}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/selectPickupLocation.directive.htm",replace:!0,scope:{},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],r}function sizeQtySelector(){function t(t,e,r,o){}function e(t,e){var r=this;r.incriment=function(){r.size.qty++},r.decriment=function(){r.size.qty>=1&&r.size.qty--}}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/sizeQtySelector.directive.htm",replace:!0,scope:{size:"="},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],r}function toZipOnDate(){function t(t,e,r,o){t.$watch("form.zipcode.$valid",function(e,r){console.log("$valid",e),e&&""!=t.zipcode?t.completed=!0:t.completed=!1})}function e(t,e,r){var o=this;console.log(o.goFn),o.zipcodeFinder=function(){alert("finding zipcode")},o.submitZip=function(){console.log("passed through here")},o.checkzipcode=function(){r.cityStateLookup(o.goingTo.zip).then(function(e){o.goingTo.city=e.city,o.goingTo.state=e.state,t.$apply()}).catch(function(t){})}}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/toZipOnDate.directive.htm",replace:!0,scope:{goingTo:"=",vipIdentified:"=",goFn:"&"},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log","uspsServices"],r}function upsOptions(){function t(t,e,r,o){}function e(t,e){}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/upsOptions.directive.htm",replace:!0,scope:{},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],r}function userDashboard(){function t(t,e,r,o){}function e(t,e,r){e.info("in the userDashboard directive")}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/userDashboard.directive.htm",replace:!0,scope:{},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log","$location"],r}function uspsOptions(){function t(t,e,r,o){}function e(t,e,r){this.uspsOptions=r.aquisitionDetails.deliveryMethod,console.log(t)}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/uspsOptions.directive.htm",replace:!0,scope:{options:"="},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log","shoppingCart"],r}function dataServices(t,e){return{get:function(t,r){return new Promise(function(o,n){e.get(t,r).then(function(t){o(t.data)},function(t){n(t)})})},post:function(t,r,o){return new Promise(function(n,i){e.post(t,r,o).then(function(t){n(t.data)},function(t){i(t)})})}}}function shoppingCart(t,e,r){function o(t){var e={};return Object.keys(t).forEach(function(r){e[r]=t[r]}),console.log("adding this new item",e),e}function n(t){var e=this,r=0;return console.log("allItems",t),Object.keys(t).forEach(function(e){r+=t[e].qty}),console.log("_countNoItems",r),0==r&&(e.isEmpty=!0),r}function i(t){var e=0;return Object.keys(t).forEach(function(r){e+=t[r].qty*t[r].price}),e}return{isEmpty:!0,orderNumber:void 0,aquisitionMethod:void 0,noOfItems:0,subtotal:0,shippingPrice:0,discounts:0,totalCost:0,aquisitionDetails:{pickupLocation:{},deliveryLocation:{receiver:{first:"",last:""},street1:"",street2:"",street3:"",city:"",state:"",zip:""},deliveryMethod:{shippingService:"",shippingOrigin:""}},paymentDetails:{},items:{},_saveToBrowser:function(){var t=this,e={isEmpty:t.isEmpty,orderNumber:t.orderNumber,aquisitionMethod:t.aquisitionMethod,noOfItems:t.noOfItems,subtotal:t.subtotal,shippingPrice:t.shippingPrice,discounts:t.discounts,totalCost:t.totalCost,aquisitionDetails:t.aquisitionDetails,items:t.items};r.sessionStorage.setItem("ah-nuts-cart",JSON.stringify(e))},_getCart:function(){return r.sessionStorage["ah-nuts-cart"]},_removeCart:function(){r.sessionStorage.removeItem("ah-nuts-cart")},_addNewItem:o,_countNoItems:n,_calcSubtotal:i,init:function(){var t=this;if(null!=r.sessionStorage.getItem("ah-nuts-cart")){var e=JSON.parse(r.sessionStorage.getItem("ah-nuts-cart"));t.isEmpty=e.isEmpty,t.orderNumber=e.orderNumber,t.aquisitionMethod=e.aquisitionMethod,t.noOfItems=e.noOfItems,t.subtotal=e.subtotal,t.shippingPrice=e.shippingPrice,t.discounts=e.discounts,t.totalCost=e.totalCost,t.aquisitionDetails=e.aquisitionDetails,t.items=e.items}console.log(t)},addItem:function(t){var e=this,r=t.code;return e.isEmpty=!1,void 0==e.items[r]?(console.log("adding a new item"),e.items[r]=o(t),e.noOfItems=n(e.items),e.subtotal=i(e.items)):console.log("updating a new qty"),e._saveToBrowser(),!0},removeItem:function(t){var e=this;Object.keys(e.items).forEach(function(r){console.log(r,t),r==t&&delete e.items[r]}),e.noOfItems=e._countNoItems(e.items),e.subtotal=e._calcSubtotal(e.items),e.calcTotalCost(),e._saveToBrowser()},updateAquisitionMethod:function(){this._saveToBrowser()},calcTotalCost:function(){var t=this;t.totalCost=t.subtotal+t.shippingPrice+t.discounts},updateItemQty:function(t,e){var r=this;if(0==parseInt(e))return r.removeItem(t),0;r.items[t].qty=parseInt(e),r.noOfItems=r._countNoItems(r.items),r.subtotal=r._calcSubtotal(r.items),r.calcTotalCost(),r._saveToBrowser()},acqMethIsDefined:function(){return void 0!=this.aquisitionMethod}}}function stateService(t){return{aquisitionDetails:{delZipIdentified:!1,delDateIdentified:!1,shippedOrPUSelected:!1,willShip:!1,willPU:!1,puLocSelected:!1,delMthSelected:!1}}}function userAuthentication(t,e){}function uspsServices(t,e){return{_shippingRequest:{PackageID:"",Service:"",ZipOrigination:"",ZipDestination:"",Pounds:0,Ounces:0,Container:"",Size:"",Width:0,Length:0,Height:0,Girth:0,Value:0},_shippingOptions:{zones:[],postage:[]},_uspsUsername:"",_generalParse:function(t){var e=(new X2JS).xml_str2json(t);return console.log(e),e},_filterPostageOptions:function(t){var e={},r=t.RateV4Response.Package,o={zip:"",zone:100};return Object.keys(r).forEach(function(t){var o=r[t].ZipOrigination;void 0==e[o]&&(e[o]={zone:0,services:[]}),e[o].zone=r[t].Zone;var n={mailService:r[t].Postage.MailService,rate:r[t].Postage.Rate};e[o].services.push(n)}),Object.keys(e).forEach(function(t){e[t].zone<o.zone&&(o={zip:t,zone:e[t].zone})}),Object.keys(e).forEach(function(t){t!=o.zip&&delete e[t]}),Object.keys(e).forEach(function(t){Object.keys(e[t].services).forEach(function(r){e[t].services[r].mailService=e[t].services[r].mailService.replace("&lt;sup&gt;&#8482;&lt;/sup&gt;","™")})}),e},_parseCityStateResponse:function(t){console.log(t,typeof t);var e=t.split("<City>")[1].split("</City>"),r=t.split("<State>")[1].split("</State>");return{city:e[0],state:r[0]}},getShippingRequest:function(){return this._shippingRequest},cityStateLookup:function(t){var r=this,o='http://production.shippingapis.com/ShippingAPI.dll?API= CityStateLookup&XML=<CityStateLookupRequest%20USERID="'+r._uspsUsername+'"><ZipCode ID= "0"><Zip5>'+t+"</Zip5></ZipCode></CityStateLookupRequest>";return console.log(t),new Promise(function(t,n){e.get(o,"").then(function(e){var o=r._parseCityStateResponse(e.data);console.log(o),t(o)},function(t){n(t)})})},priceCalculator:function(t){var r=this,o=(r._shippingOptions,r._postage,["97005","84015"]),n=["EXPRESS","PRIORITY"],i="",c=0,l='http://production.shippingapis.com/ShippingApi.dll?API=RateV4&XML=<RateV4Request USERID="'+r._uspsUsername+'">';return i=t.l>12||t.w>12||t.h>12?"LARGE":"REGULAR",o.forEach(function(e){n.forEach(function(r){l+='<Package ID="'+ ++c+'">',l+="<Service>"+r+"</Service>",l+="<ZipOrigination>"+e+"</ZipOrigination>",l+="<ZipDestination>"+t.zipcode+"</ZipDestination>",l+="<Pounds>"+t.pounds+"</Pounds>",l+="<Ounces>"+t.ounces+"</Ounces>",l+="<Container>"+t.container+"</Container>",l+="<Size>"+i+"</Size>",l+="<Width>"+t.w+"</Width>",l+="<Length>"+t.l+"</Length>",l+="<Height>"+t.h+"</Height>",l+="</Package>"})}),l+="</RateV4Request> ",new Promise(function(t,o){e.get(l,config).then(function(e){var o=r._generalParse(e.data),n=r._filterPostageOptions(o);t(n)},function(t){o(t)})})}}}function config(t){t.when("/",{templateUrl:"views/landingPage.htm",controller:"landingController",controllerAs:"vm"}).when("/all-products",{templateUrl:"views/allProductsPage.htm",controller:"allProductsController",controllerAs:"vm",resolve:{productList:productList}}).when("/product/:prdctId",{templateUrl:"views/aProductPage.htm",controller:"aProductController",controllerAs:"vm",resolve:{aProduct:aProduct}}).when("/getting-the-product/:itemId",{templateUrl:"views/productGettingPage.htm",controller:"productGettingController",controllerAs:"vm",resolve:{uspsUsername:uspsUsername}}).when("/locations",{templateUrl:"views/locationsPage.htm",controller:"locationsController",controllerAs:"vm"}).when("/login",{templateUrl:"views/loginPage.htm",controller:"loginController",controllerAs:"vm"}).when("/cart",{templateUrl:"views/cartPage.htm",controller:"cartController",controllerAs:"vm"}).when("/checkout",{templateUrl:"views/checkoutPage.htm",controller:"checkoutController",controllerAs:"vm",resolve:{squareCreds:squareCreds}}).when("/order-confirmation/:confId",{templateUrl:"views/orderConfirmationPage.htm",controller:"orderConfirmationController",controllerAs:"vm"}).when("/registerUser",{templateUrl:"views/registrationPage.htm",controller:"registerAcctController",controllerAs:"vm"}).when("/MyAccount/:param",{templateUrl:"views/accountsPage.htm",controller:"accountsController",controllerAs:"vm"}).when("/teamMember/:param",{templateUrl:"views/internalActtsPage.htm",controller:"internalActtsController",controllerAs:"vm",resolve:{authentication:authentication}})}function authentication(){console.log("authenticating")}function squareCreds(t){var e=t;return console.log("getting square creds"),new Promise(function(t,r){e.post("/api/square-creds",{key:"owine91n-sn#bsinwi#k"}).then(function(e){console.log("got this",e),t(e)}).catch(function(e){t(e)})})}function productList(t,e){var r=t,o="/api/productlist";return void 0!=e.current.params&&(o+="?filter="+e.current.params.filter),new Promise(function(t,e){r.get(o).then(function(e){t(e)}).catch(function(t){e(t)})})}function aProduct(t,e){var r=t,o="/api/productlist?select="+e.current.params.prdctId;return console.log("path",o),new Promise(function(t,e){r.get(o).then(function(e){t(e)}).catch(function(t){e(t)})})}function uspsUsername(t){var e=t;return new Promise(function(t,r){e.get("/api/secrets/usps-username").then(function(e){console.log("got this secret",e),t(e)}).catch(function(t){r(t)})})}config.$inject=["$routeProvider"],productList.$inject=["dataServices","$route"],aProduct.$inject=["dataServices","$route"],uspsUsername.$inject=["dataServices"],squareCreds.$inject=["dataServices"];var ahNuts=angular.module("ahNuts",["ngRoute"]);angular.module("ahNuts").run(["shoppingCart",function(t){t.init()}]),function(t,e){"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?module.exports=e():t.X2JS=e()}(this,function(){return function(t){"use strict";function e(t){var e=t.localName;return null==e&&(e=t.baseName),null!=e&&""!=e||(e=t.nodeName),e}function r(t){return t.prefix}function o(t){return"string"==typeof t?t.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&apos;"):t}function n(t,e,r,o){for(var n=0;n<t.length;n++){var i=t[n];if("string"==typeof i){if(i==o)break}else if(i instanceof RegExp){if(i.test(o))break}else if("function"==typeof i&&i(e,r,o))break}return n!=t.length}function i(e,r,o){switch(t.arrayAccessForm){case"property":e[r]instanceof Array?e[r+"_asArray"]=e[r]:e[r+"_asArray"]=[e[r]]}!(e[r]instanceof Array)&&t.arrayAccessFormPaths.length>0&&n(t.arrayAccessFormPaths,e,r,o)&&(e[r]=[e[r]])}function c(t){var e=t.split(/[-T:+Z]/g),r=new Date(e[0],e[1]-1,e[2]),o=e[5].split(".");if(r.setHours(e[3],e[4],o[0]),o.length>1&&r.setMilliseconds(o[1]),e[6]&&e[7]){var n=60*e[6]+Number(e[7]);n=0+("-"==(/\d\d-\d\d:\d\d$/.test(t)?"-":"+")?-1*n:n),r.setMinutes(r.getMinutes()-n-r.getTimezoneOffset())}else-1!==t.indexOf("Z",t.length-1)&&(r=new Date(Date.UTC(r.getFullYear(),r.getMonth(),r.getDate(),r.getHours(),r.getMinutes(),r.getSeconds(),r.getMilliseconds())));return r}function l(e,r,o){if(t.datetimeAccessFormPaths.length>0){var i=o.split(".#")[0];return n(t.datetimeAccessFormPaths,e,r,i)?c(e):e}return e}function a(e,r,o,i){return!(r==_.ELEMENT_NODE&&t.xmlElementsFilter.length>0)||n(t.xmlElementsFilter,e,o,i)}function s(o,n){if(o.nodeType==_.DOCUMENT_NODE){for(var c=new Object,u=o.childNodes,p=0;p<u.length;p++)(d=u.item(p)).nodeType==_.ELEMENT_NODE&&(c[m=e(d)]=s(d,m));return c}if(o.nodeType==_.ELEMENT_NODE){(c=new Object).__cnt=0;for(var u=o.childNodes,p=0;p<u.length;p++){var d=u.item(p),m=e(d);if(d.nodeType!=_.COMMENT_NODE){var f=n+"."+m;a(c,d.nodeType,m,f)&&(c.__cnt++,null==c[m]?(c[m]=s(d,f),i(c,m,f)):(null!=c[m]&&(c[m]instanceof Array||(c[m]=[c[m]],i(c,m,f))),c[m][c[m].length]=s(d,f)))}}for(var v=0;v<o.attributes.length;v++){var h=o.attributes.item(v);c.__cnt++,c[t.attributePrefix+h.name]=h.value}var g=r(o);return null!=g&&""!=g&&(c.__cnt++,c.__prefix=g),null!=c["#text"]&&(c.__text=c["#text"],c.__text instanceof Array&&(c.__text=c.__text.join("\n")),t.stripWhitespaces&&(c.__text=c.__text.trim()),delete c["#text"],"property"==t.arrayAccessForm&&delete c["#text_asArray"],c.__text=l(c.__text,m,n+"."+m)),null!=c["#cdata-section"]&&(c.__cdata=c["#cdata-section"],delete c["#cdata-section"],"property"==t.arrayAccessForm&&delete c["#cdata-section_asArray"]),0==c.__cnt&&"text"==t.emptyNodeForm?c="":1==c.__cnt&&null!=c.__text?c=c.__text:1!=c.__cnt||null==c.__cdata||t.keepCData?c.__cnt>1&&null!=c.__text&&t.skipEmptyTextNodesForObj&&(t.stripWhitespaces&&""==c.__text||""==c.__text.trim())&&delete c.__text:c=c.__cdata,delete c.__cnt,!t.enableToStringFunc||null==c.__text&&null==c.__cdata||(c.toString=function(){return(null!=this.__text?this.__text:"")+(null!=this.__cdata?this.__cdata:"")}),c}if(o.nodeType==_.TEXT_NODE||o.nodeType==_.CDATA_SECTION_NODE)return o.nodeValue}function u(e,r,n,i){var c="<"+(null!=e&&null!=e.__prefix?e.__prefix+":":"")+r;if(null!=n)for(var l=0;l<n.length;l++){var a=n[l],s=e[a];t.escapeMode&&(s=o(s)),c+=" "+a.substr(t.attributePrefix.length)+"=",t.useDoubleQuotes?c+='"'+s+'"':c+="'"+s+"'"}return c+=i?"/>":">"}function p(t,e){return"</"+(null!=t.__prefix?t.__prefix+":":"")+e+">"}function d(t,e){return-1!==t.indexOf(e,t.length-e.length)}function m(e,r){return!!("property"==t.arrayAccessForm&&d(r.toString(),"_asArray")||0==r.toString().indexOf(t.attributePrefix)||0==r.toString().indexOf("__")||e[r]instanceof Function)}function f(t){var e=0;if(t instanceof Object)for(var r in t)m(t,r)||e++;return e}function v(e,r,o){return 0==t.jsonPropertiesFilter.length||""==o||n(t.jsonPropertiesFilter,e,r,o)}function h(e){var r=[];if(e instanceof Object)for(var o in e)-1==o.toString().indexOf("__")&&0==o.toString().indexOf(t.attributePrefix)&&r.push(o);return r}function g(e){var r="";return null!=e.__cdata&&(r+="<![CDATA["+e.__cdata+"]]>"),null!=e.__text&&(t.escapeMode?r+=o(e.__text):r+=e.__text),r}function $(e){var r="";return e instanceof Object?r+=g(e):null!=e&&(t.escapeMode?r+=o(e):r+=e),r}function C(t,e){return""===t?e:t+"."+e}function y(t,e,r,o){var n="";if(0==t.length)n+=u(t,e,r,!0);else for(var i=0;i<t.length;i++)n+=u(t[i],e,h(t[i]),!1),n+=A(t[i],C(o,e)),n+=p(t[i],e);return n}function A(t,e){var r="";if(f(t)>0)for(var o in t)if(!m(t,o)&&(""==e||v(t,o,C(e,o)))){var n=t[o],i=h(n);null==n||void 0==n?r+=u(n,o,i,!0):n instanceof Object?n instanceof Array?r+=y(n,o,i,e):n instanceof Date?(r+=u(n,o,i,!1),r+=n.toISOString(),r+=p(n,o)):f(n)>0||null!=n.__text||null!=n.__cdata?(r+=u(n,o,i,!1),r+=A(n,C(e,o)),r+=p(n,o)):r+=u(n,o,i,!0):(r+=u(n,o,i,!1),r+=$(n),r+=p(n,o))}return r+=$(t)}void 0===(t=t||{}).escapeMode&&(t.escapeMode=!0),t.attributePrefix=t.attributePrefix||"_",t.arrayAccessForm=t.arrayAccessForm||"none",t.emptyNodeForm=t.emptyNodeForm||"text",void 0===t.enableToStringFunc&&(t.enableToStringFunc=!0),t.arrayAccessFormPaths=t.arrayAccessFormPaths||[],void 0===t.skipEmptyTextNodesForObj&&(t.skipEmptyTextNodesForObj=!0),void 0===t.stripWhitespaces&&(t.stripWhitespaces=!0),t.datetimeAccessFormPaths=t.datetimeAccessFormPaths||[],void 0===t.useDoubleQuotes&&(t.useDoubleQuotes=!1),t.xmlElementsFilter=t.xmlElementsFilter||[],t.jsonPropertiesFilter=t.jsonPropertiesFilter||[],void 0===t.keepCData&&(t.keepCData=!1);var _={ELEMENT_NODE:1,TEXT_NODE:3,CDATA_SECTION_NODE:4,COMMENT_NODE:8,DOCUMENT_NODE:9};this.parseXmlString=function(t){var e=window.ActiveXObject||"ActiveXObject"in window;if(void 0===t)return null;var r;if(window.DOMParser){var o=new window.DOMParser,n=null;if(!e)try{n=o.parseFromString("INVALID","text/xml").getElementsByTagName("parsererror")[0].namespaceURI}catch(t){n=null}try{r=o.parseFromString(t,"text/xml"),null!=n&&r.getElementsByTagNameNS(n,"parsererror").length>0&&(r=null)}catch(t){r=null}}else 0==t.indexOf("<?")&&(t=t.substr(t.indexOf("?>")+2)),(r=new ActiveXObject("Microsoft.XMLDOM")).async="false",r.loadXML(t);return r},this.asArray=function(t){return void 0===t||null==t?[]:t instanceof Array?t:[t]},this.toXmlDateTime=function(t){return t instanceof Date?t.toISOString():"number"==typeof t?new Date(t).toISOString():null},this.asDateTime=function(t){return"string"==typeof t?c(t):t},this.xml2json=function(t){return s(t)},this.xml_str2json=function(t){var e=this.parseXmlString(t);return null!=e?this.xml2json(e):null},this.json2xml_str=function(t){return A(t,"")},this.json2xml=function(t){var e=this.json2xml_str(t);return this.parseXmlString(e)},this.getVersion=function(){return"1.2.0"}}}),angular.module("ahNuts").controller("aProductController",aProductController),aProductController.$inject=["$log","$routeParams","$location","aProduct"],angular.module("ahNuts").controller("accountsController",accountsController),accountsController.$inject=["$log","$routeParams","$location"],angular.module("ahNuts").controller("allProductsController",allProductsController),allProductsController.$inject=["$log","$routeParams","$location","productList"],angular.module("ahNuts").controller("cartController",cartController),cartController.$inject=["$log","$routeParams","$location","shoppingCart"],angular.module("ahNuts").controller("checkoutController",checkoutController),checkoutController.$inject=["$log","$routeParams","$location","squareCreds","shoppingCart"],angular.module("ahNuts").controller("internalActtsController",internalActtsController),internalActtsController.$inject=["$log","$routeParams","$location","dataServices"],angular.module("ahNuts").controller("landingController",landingController),landingController.$inject=["$scope","$log","$routeParams","$location","dataServices"],angular.module("ahNuts").controller("locationsController",locationsController),locationsController.$inject=["$log","$routeParams","$location"],angular.module("ahNuts").controller("loginController",loginController),loginController.$inject=["$log","$routeParams","$location","dataServices"],angular.module("ahNuts").controller("mainController",mainController),mainController.$inject=["$scope","$log","$routeParams","$location"],angular.module("ahNuts").controller("orderConfirmationController",orderConfirmationController),orderConfirmationController.$inject=["$scope","$log","$routeParams","$location"],angular.module("ahNuts").controller("productGettingController",productGettingController),productGettingController.$inject=["$scope","$log","$routeParams","$location","shoppingCart","stateService","uspsServices","uspsUsername"],angular.module("ahNuts").controller("registerAcctController",registerAcctController),registerAcctController.$inject=["$log","$routeParams","$location"],angular.module("ahNuts").directive("ahHeader",ahHeader),angular.module("ahNuts").directive("ahFooter",ahFooter),angular.module("ahNuts").directive("cartItemsList",cartItemsList),angular.module("ahNuts").directive("cartNavigation",cartNavigation),angular.module("ahNuts").directive("cartSummary",cartSummary),angular.module("ahNuts").directive("checkoutBilling",checkoutBilling),angular.module("ahNuts").directive("checkoutFollowup",checkoutFollowup),angular.module("ahNuts").directive("checkoutPayment",checkoutPayment),angular.module("ahNuts").directive("couponSubmission",couponSubmission),angular.module("ahNuts").directive("createNewAccount",createNewAccount),angular.module("ahNuts").directive("defineDeliveryAddress",defineDeliveryAddress),angular.module("ahNuts").directive("deliveryDetails",deliveryDetails),angular.module("ahNuts").directive("featuredProducts",featuredProducts),angular.module("ahNuts").directive("fedexOptions",fedexOptions),angular.module("ahNuts").directive("fullProductProfile",fullProductProfile),angular.module("ahNuts").directive("heroBanner",heroBanner),angular.module("ahNuts").directive("passwordReset",passwordReset),angular.module("ahNuts").directive("pickupOrDelivery",pickupOrDelivery),angular.module("ahNuts").directive("primaryContent",primaryContent),angular.module("ahNuts").directive("productSizePicker",productSizePicker),angular.module("ahNuts").directive("prdctThmbnl",prdctThmbnl),angular.module("ahNuts").directive("selectDeliveryMethod",selectDeliveryMethod),angular.module("ahNuts").directive("selectPOrD",selectPOrD),angular.module("ahNuts").directive("selectPickupLocation",selectPickupLocation),angular.module("ahNuts").directive("sizeQtySelector",sizeQtySelector),angular.module("ahNuts").directive("toZipOnDate",toZipOnDate),angular.module("ahNuts").directive("upsOptions",upsOptions),angular.module("ahNuts").directive("userDashboard",userDashboard),angular.module("ahNuts").directive("uspsOptions",uspsOptions),angular.module("ahNuts").factory("dataServices",dataServices),dataServices.$inject=["$log","$http"],angular.module("ahNuts").factory("shoppingCart",shoppingCart),shoppingCart.$inject=["$log","$http","$window"],angular.module("ahNuts").factory("stateService",stateService),stateService.$inject=["$log"],angular.module("ahNuts").service("userAuthentication",userAuthentication),userAuthentication.$inject=["$http","$window"],angular.module("ahNuts").factory("uspsServices",uspsServices),uspsServices.$inject=["$log","$http"],angular.module("ahNuts").config(config);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
