function accountsController(o,e,r){var t=this;t.registeredUser=!1,o.info("in the accounts controller"),function(o){"CreateProfile"==o||(t.registeredUser=!0)}(e.param)}function cartController(o,e,r){o.info("in the cart controller")}function landingController(o,e,r){o.info("in the landing controller")}function locationsController(o,e,r){o.info("in the locations controller")}function loginController(o,e,r){o.info("in the login controller")}function mainController(o,e,r){o.info("in the main controller")}function ahHeader(){function o(o,e,r,t){}function e(o,e,r){var t=this;e.info("in the header directive"),t.navbnt=function(o){e.info("clicked",o),"menu"!=o&&r.path("/"+o)}}o.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/ah.header.directive.htm",replace:!0,scope:{},link:o,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log","$location"],r}function ahFooter(){function o(o,e,r,t){}function e(o,e){e.info("in the header directive")}o.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/ah.footer.directive.htm",replace:!0,scope:{},link:o,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],r}function createNewAccount(){function o(o,e,r,t){}function e(o,e,r){e.info("in the create new account directive")}o.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/createNewAccount.directive.htm",replace:!0,scope:{},link:o,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log","$location"],r}function userDashboard(){function o(o,e,r,t){}function e(o,e,r){e.info("in the userDashboard directive")}o.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/userDashboard.directive.htm",replace:!0,scope:{},link:o,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log","$location"],r}function config(o){o.when("/",{templateUrl:"views/landingPage.htm",controller:"landingController",controllerAs:"vm"}).when("/locations",{templateUrl:"views/locationsPage.htm",controller:"locationsController",controllerAs:"vm"}).when("/login",{templateUrl:"views/loginPage.htm",controller:"loginController",controllerAs:"vm"}).when("/cart",{templateUrl:"views/cartPage.htm",controller:"cartController",controllerAs:"vm"}).when("/MyAccount/:param",{templateUrl:"views/accountsPage.htm",controller:"accountsController",controllerAs:"vm"})}config.$inject=["$routeProvider"];var ahNuts=angular.module("ahNuts",["ngRoute"]);angular.module("ahNuts").controller("accountsController",accountsController),accountsController.$inject=["$log","$routeParams","$location"],angular.module("ahNuts").controller("cartController",cartController),cartController.$inject=["$log","$routeParams","$location"],angular.module("ahNuts").controller("landingController",landingController),landingController.$inject=["$log","$routeParams","$location"],angular.module("ahNuts").controller("locationsController",locationsController),locationsController.$inject=["$log","$routeParams","$location"],angular.module("ahNuts").controller("loginController",loginController),loginController.$inject=["$log","$routeParams","$location"],angular.module("ahNuts").controller("mainController",mainController),mainController.$inject=["$log","$routeParams","$location"],angular.module("ahNuts").directive("ahHeader",ahHeader),angular.module("ahNuts").directive("ahFooter",ahFooter),angular.module("ahNuts").directive("createNewAccount",createNewAccount),angular.module("ahNuts").directive("userDashboard",userDashboard),angular.module("ahNuts").config(config);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
