function aProductController(t,e,r,o){var n=this;n.product=o,n.returnHome=function(){r.path("/")}}function accountsController(t,e,r){var o=this;o.registeredUser=!1,o.forgotPassword=!1,t.info("in the accounts controller"),function(t){"CreateProfile"==t||"ForgotPassword"==t?"ForgotPassword"==t&&(o.forgotPassword=!0):o.registeredUser=!0}(e.param)}function allProductsController(t,e,r,o){var n=this;n.allProducts=o,void 0!=e.filter&&(n.selectedProducts=e.filter),n.selectAProuct=function(t){var e="/product/"+t;r.path(e).search("filter",null)}}function cartController(t,e,r,o){var n=this;n.cart=o,t.info("in the cart controller",n.cart),n.cart.calcTotalCost()}function checkoutController(t,e,r,o,n){var i=this;i.cart=n,i.squareCreds=o,t.info("in the checkout controller"),i.backBtn=function(){r.path("/cart")},i.submitOrder=function(){r.path("/order-confirmation/TESTING")}}function internalActtsController(t,e,r,o){var n=this,i=o;t.info("in the internal controller"),n.submit=function(){console.log("submitting"),i.post("/api/shiftEarnings",{test:"test"}).then(function(t){console.log("got this response",t)})}}function landingController(t,e,r,o,n){}function locationsController(t,e,r){t.info("in the locations controller")}function loginController(t,e,r,o){var n=this,i=o;t.info("in the login controller"),n.email="",n.password="",n.login=function(){i.post("/api/authenticate",{email:n.email,pass:n.password},"").then(function(e){var o="#/teamMember/"+e;t.info("got this token back",o),r.path("/")})}}function mainController(t,e,r,o){t.teamMember=!1}function orderConfirmationController(t,e,r,o){e.info("in the order confirmation controller")}function productGettingController(t,e,r,o,n,i,c){var l=this;l.product=r.item,l.cart=n,l.usps=i,l.usps._uspsUsername=c,l.order=function(){l.cart.updateAquisitionMethod(),l.cart.aquisitionMethod="delivery",o.path("/cart")},l.cityStateLookup=function(){i.cityStateLookup(l.cart.aquisitionDetails.deliveryLocation.zip).then(function(t){l.cart.aquisitionDetails.deliveryLocation.city=t.city,l.cart.aquisitionDetails.deliveryLocation.state=t.state}).catch(function(t){console.log("error:",t)})},l.zipGo=function(e){l.usps.priceCalculator({l:5,w:5,h:5,zipcode:l.cart.aquisitionDetails.deliveryLocation.zip,pounds:1,ounces:8,container:"VARIABLE"}).then(function(e){var r="";console.log("got this back",e),Object.keys(e).forEach(function(t){r=t}),l.cart.aquisitionDetails.deliveryMethod.shippingOrigin=r,l.uspsOptions=e[r].services,t.$apply()}).catch(function(t){console.log("error",t)})}}function registerAcctController(t,e,r){console.log("in the registerAcctController ")}function ahHeader(){function t(t,e,r,o){}function e(t,e,r,o){var n=this;n.cart=o,n.navbnt=function(t){e.info("clicked",t),"menu"!=t&&r.path("/"+t)}}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/ah.header.directive.htm",replace:!0,scope:{},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log","$location","shoppingCart"],r}function ahFooter(){function t(t,e,r,o){}function e(t,e){}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/ah.footer.directive.htm",replace:!0,scope:{},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],r}function cartItemsList(){function t(t,e,r,o){}function e(t,e,r){var o=this,n=r;e.info("in the cartItemsListController directive",o.cartItems),o.removeItem=function(t){console.log("removing itemId",t),n.removeItem(t)},o.updateQty=function(t,e){n.updateItemQty(t,e)}}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/cartItemsList.directive.htm",replace:!0,scope:{cartItems:"="},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log","shoppingCart"],r}function cartNavigation(){function t(t,e,r,o){}function e(t,e,r){var o=this;e.info("in the cart navigation directive"),o.shopMore=function(){r.path("/all-products")},o.checkout=function(){r.path("/checkout")}}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/cartNavigation.directive.htm",replace:!0,scope:{},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log","$location"],r}function cartSummary(){function t(t,e,r,o){}function e(t,e){e.info("in the cart summary directive")}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/cartSummary.directive.htm",replace:!0,scope:{noItems:"=",subtotal:"="},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],r}function checkoutBilling(){function t(t,e,r,o){}function e(t,e){var r=this;r.payDet={name:{first:"",last:""},street1:"",street2:"",street3:"",city:"",state:"",zip:"",phone:"",po:"",email:""},e.info("in the checkoutBilling directive",r.aquDet,r.payDet),r.copyDelAdd=function(){r.payDet.name.first=r.aquDet.deliveryLocation.receiver.first,r.payDet.name.last=r.aquDet.deliveryLocation.receiver.last,r.payDet.street1=r.aquDet.deliveryLocation.street1,r.payDet.street2=r.aquDet.deliveryLocation.street2,r.payDet.street3=r.aquDet.deliveryLocation.street3,r.payDet.city=r.aquDet.deliveryLocation.city,r.payDet.state=r.aquDet.deliveryLocation.state,r.payDet.zip=r.aquDet.deliveryLocation.zip}}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/checkoutBilling.directive.htm",replace:!0,scope:{aquDet:"=",payDet:"="},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],r}function checkoutFollowup(){function t(t,e,r,o){}function e(t,e){e.info("in the checkoutFollowupController directive")}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/checkoutFollowup.directive.htm",replace:!0,scope:{},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],r}function checkoutPayment(){function t(t,e,r,o){}function e(t,e,r){var o=this;o.data=r;e.info("in the checkoutPayment directive");var n=new SqPaymentForm({applicationId:"REPLACE_ME",locationId:"REPLACE_ME",inputClass:"sq-input",inputStyles:[{fontSize:"15px"}],cardNumber:{elementId:"sq-card-number",placeholder:"•••• •••• •••• ••••"},cvv:{elementId:"sq-cvv",placeholder:"CVV"},expirationDate:{elementId:"sq-expiration-date",placeholder:"MM/YY"},postalCode:{elementId:"sq-postal-code"},applePay:{elementId:"sq-apple-pay"},callbacks:{methodsSupported:function(t){!0===t.applePay&&(document.getElementById("sq-apple-pay").style.display="inline-block")},createPaymentRequest:function(){return{requestShippingAddress:!0,currencyCode:"USD",countryCode:"US",total:{label:"{{ MERCHANT NAME }}",amount:"{{TOTAL AMOUNT}}",pending:!1},lineItems:[{label:"Subtotal",amount:"{{SUBTOTAL AMOUNT}}",pending:!1},{label:"Shipping",amount:"{{SHIPPING AMOUNT}}",pending:!0},{label:"Tax",amount:"{{TAX AMOUNT}}",pending:!1}]}},cardNonceResponseReceived:function(t,e,r){if(t)return console.log("Encountered errors:"),void t.forEach(function(t){console.log("  "+t.message)});document.getElementById("card-nonce").value=e,document.getElementById("nonce-form").submit(),o.data.post("/process-card",{nonce:e})},unsupportedBrowserDetected:function(){},inputEventReceived:function(t){t.eventType},paymentFormLoaded:function(){}}});o.requestCardNonce=function(t){console.log("requestion card Nonce"),t.preventDefault(),n.requestCardNonce()},n.build()}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/checkoutPayment.directive.htm",replace:!0,scope:{squareCreds:"="},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log","dataServices"],r}function couponSubmission(){function t(t,e,r,o){}function e(t,e){e.info("in the coupon-submission directive")}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/couponSubmission.directive.htm",replace:!0,scope:{},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],r}function createNewAccount(){function t(t,e,r,o){}function e(t,e,r){e.info("in the create new account directive")}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/createNewAccount.directive.htm",replace:!0,scope:{},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log","$location"],r}function defineDeliveryAddress(){function t(t,e,r,o){}function e(t,e){}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/defineDeliveryAddress.directive.htm",replace:!0,scope:{deliverTo:"="},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],r}function deliveryDetails(){function t(t,e,r,o){}function e(t,e,r){var o=this;e.info("in the deliveryDetails directive",o.deliverTo),o.changeDetails=function(){r.path("/getting-the-product/10")}}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/deliveryDetails.directive.htm",replace:!0,scope:{deliverTo:"="},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log","$location"],r}function featuredProducts(){function t(t,e,r,o){}function e(t,e,r){var o=this;o.mrPrdctsBtn=function(){r.path("/all-products")},o.productSelectionBtn=function(t){r.path("/all-products").search("filter",t)}}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/featuredProducts.directive.htm",replace:!0,scope:{},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log","$location"],r}function fedexOptions(){function t(t,e,r,o){}function e(t,e){}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/fedexOptions.directive.htm",replace:!0,scope:{},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],r}function fullProductProfile(){function t(t,e,r,o){}function e(t,e,r,o){var n=this;n.cart=o,n.itemSelections=n.product.sizes,n.addToCart=function(t){n.itemSelections.forEach(function(t){t.qty>0&&n.cart.addItem(t)}),n.cart.acqMethIsDefined()?r.path("/cart"):r.path("/getting-the-product/10")}}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/fullProductProfile.directive.htm",replace:!0,scope:{product:"="},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log","$location","shoppingCart"],r}function heroBanner(){function t(t,e,r,o){}function e(t,e){}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/heroBanner.directive.htm",replace:!0,scope:{},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],r}function passwordReset(){function t(t,e,r,o){}function e(t,e,r){var o=this;e.info("in the passwordReset directive"),o.email="",o.back=function(){r.path("/login")},o.submit=function(){e.info("submitting email",o.email)}}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/passwordReset.directive.htm",replace:!0,scope:{},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log","$location"],r}function pickupOrDelivery(){function t(t,e,r,o){}function e(t,e){var r=this;e.info("in the pickup-or-delivery directive",r.method,r.details)}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/pickupOrDelivery.directive.htm",replace:!0,scope:{method:"=",details:"="},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],r}function primaryContent(){function t(t,e,r,o){}function e(t,e){e.info("in the header directive")}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/primaryContent.directive.htm",replace:!0,scope:{},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],r}function productSizePicker(){function t(t,e,r,o){}function e(t,e){}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/productSizePicker.directive.htm",replace:!0,scope:{sizes:"="},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],r}function prdctThmbnl(){function t(t,e,r,o){}function e(t,e){}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/prdctThmbnl.directive.htm",replace:!0,scope:{product:"="},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],r}function selectDeliveryMethod(){function t(t,e,r,o){}function e(t,e){}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/selectDeliveryMethod.directive.htm",replace:!0,scope:{usps:"="},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],r}function selectPOrD(){function t(t,e,r,o){}function e(t,e){}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/selectPOrD.directive.htm",replace:!0,scope:{},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],r}function selectPickupLocation(){function t(t,e,r,o){}function e(t,e){}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/selectPickupLocation.directive.htm",replace:!0,scope:{},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],r}function sizeQtySelector(){function t(t,e,r,o){}function e(t,e){var r=this;r.incriment=function(){r.size.qty++},r.decriment=function(){r.size.qty>=1&&r.size.qty--}}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/sizeQtySelector.directive.htm",replace:!0,scope:{size:"="},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],r}function toZipOnDate(){function t(t,e,r,o){t.$watch("form.zipcode.$valid",function(e,r){console.log("$valid",e),e&&""!=t.zipcode?t.completed=!0:t.completed=!1})}function e(t,e,r){var o=this;console.log(o.goFn),o.zipcodeFinder=function(){alert("finding zipcode")},o.submitZip=function(){console.log("passed through here")},o.checkzipcode=function(){r.cityStateLookup(o.goingTo.zip).then(function(e){o.goingTo.city=e.city,o.goingTo.state=e.state,t.$apply()}).catch(function(t){})}}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/toZipOnDate.directive.htm",replace:!0,scope:{goingTo:"=",vipIdentified:"=",goFn:"&"},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log","uspsServices"],r}function upsOptions(){function t(t,e,r,o){}function e(t,e){}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/upsOptions.directive.htm",replace:!0,scope:{},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],r}function userDashboard(){function t(t,e,r,o){}function e(t,e,r){e.info("in the userDashboard directive")}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/userDashboard.directive.htm",replace:!0,scope:{},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log","$location"],r}function uspsOptions(){function t(t,e,r,o){}function e(t,e){}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/uspsOptions.directive.htm",replace:!0,scope:{options:"="},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],r}function dataServices(t,e){return{get:function(t,r){return new Promise(function(o,n){e.get(t,r).then(function(t){o(t.data)},function(t){n(t)})})},post:function(t,r,o){return new Promise(function(n,i){e.post(t,r,o).then(function(t){n(t.data)},function(t){i(t)})})}}}function shoppingCart(t,e,r){function o(t){var e={};return Object.keys(t).forEach(function(r){e[r]=t[r]}),console.log("adding this new item",e),e}function n(t){var e=this,r=0;return console.log("allItems",t),Object.keys(t).forEach(function(e){r+=t[e].qty}),console.log("_countNoItems",r),0==r&&(e.isEmpty=!0),r}function i(t){var e=0;return Object.keys(t).forEach(function(r){e+=t[r].qty*t[r].price}),e}return{isEmpty:!0,orderNumber:void 0,aquisitionMethod:void 0,noOfItems:0,subtotal:0,shippingPrice:0,discounts:0,totalCost:0,aquisitionDetails:{delZipIdentified:!1,delDateIdentified:!1,shippedOrPUSelected:!1,willShippp:!1,willPU:!1,puLocSelected:!1,delMthSelected:!1,pickupLocation:{},deliveryLocation:{receiver:{first:"",last:""},street1:"",street2:"",street3:"",city:"",state:"",zip:""},deliveryMethod:{shippingOrigin:""}},paymentDetails:{},items:{},_saveToBrowser:function(){var t=this,e={isEmpty:t.isEmpty,orderNumber:t.orderNumber,aquisitionMethod:t.aquisitionMethod,noOfItems:t.noOfItems,subtotal:t.subtotal,shippingPrice:t.shippingPrice,discounts:t.discounts,totalCost:t.totalCost,aquisitionDetails:t.aquisitionDetails,items:t.items};r.sessionStorage.setItem("ah-nuts-cart",JSON.stringify(e))},_getCart:function(){return r.sessionStorage["ah-nuts-cart"]},_removeCart:function(){r.sessionStorage.removeItem("ah-nuts-cart")},_addNewItem:o,_countNoItems:n,_calcSubtotal:i,init:function(){var t=this;if(null!=r.sessionStorage.getItem("ah-nuts-cart")){var e=JSON.parse(r.sessionStorage.getItem("ah-nuts-cart"));t.isEmpty=e.isEmpty,t.orderNumber=e.orderNumber,t.aquisitionMethod=e.aquisitionMethod,t.noOfItems=e.noOfItems,t.subtotal=e.subtotal,t.shippingPrice=e.shippingPrice,t.discounts=e.discounts,t.totalCost=e.totalCost,t.aquisitionDetails=e.aquisitionDetails,t.items=e.items}console.log(t)},addItem:function(t){var e=this,r=t.code;return e.isEmpty=!1,void 0==e.items[r]?(console.log("adding a new item"),e.items[r]=o(t),e.noOfItems=n(e.items),e.subtotal=i(e.items)):console.log("updating a new qty"),e._saveToBrowser(),!0},removeItem:function(t){var e=this;Object.keys(e.items).forEach(function(r){console.log(r,t),r==t&&delete e.items[r]}),e.noOfItems=e._countNoItems(e.items),e.subtotal=e._calcSubtotal(e.items),e.calcTotalCost(),e._saveToBrowser()},updateAquisitionMethod:function(){this._saveToBrowser()},calcTotalCost:function(){var t=this;t.totalCost=t.subtotal+t.shippingPrice+t.discounts},updateItemQty:function(t,e){var r=this;if(0==parseInt(e))return r.removeItem(t),0;r.items[t].qty=parseInt(e),r.noOfItems=r._countNoItems(r.items),r.subtotal=r._calcSubtotal(r.items),r.calcTotalCost(),r._saveToBrowser()},acqMethIsDefined:function(){return void 0!=this.aquisitionMethod}}}function testObject(t){return{image:void 0,code:1203,rating:void 0,name:"Specialty Cones",sizes:[{code:1203001,title:"Impressive",oz:16,price:1800},{code:1203002,title:"Average",oz:8,price:1300},{code:1203003,title:"Small",oz:4,price:700}],description:"The most amazing pecans you've ever taste",ingredients:["Pecans","Sugar","Vanilla","Salt"]}}function userAuthentication(t,e){}function uspsServices(t,e){return{_shippingRequest:{PackageID:"",Service:"",ZipOrigination:"",ZipDestination:"",Pounds:0,Ounces:0,Container:"",Size:"",Width:0,Length:0,Height:0,Girth:0,Value:0},_shippingOptions:{zones:[],postage:[]},_uspsUsername:"",_generalParse:function(t){var e=(new X2JS).xml_str2json(t);return console.log(e),e},_filterPostageOptions:function(t){var e={},r=t.RateV4Response.Package,o={zip:"",zone:100};return Object.keys(r).forEach(function(t){var o=r[t].ZipOrigination;void 0==e[o]&&(e[o]={zone:0,services:[]}),e[o].zone=r[t].Zone;var n={mailService:r[t].Postage.MailService,rate:r[t].Postage.Rate};e[o].services.push(n)}),Object.keys(e).forEach(function(t){e[t].zone<o.zone&&(o={zip:t,zone:e[t].zone})}),Object.keys(e).forEach(function(t){t!=o.zip&&delete e[t]}),Object.keys(e).forEach(function(t){Object.keys(e[t].services).forEach(function(r){e[t].services[r].mailService=e[t].services[r].mailService.replace("&lt;sup&gt;&#8482;&lt;/sup&gt;","™")})}),e},_parseCityStateResponse:function(t){console.log(t,typeof t);var e=t.split("<City>")[1].split("</City>"),r=t.split("<State>")[1].split("</State>");return{city:e[0],state:r[0]}},getShippingRequest:function(){return this._shippingRequest},cityStateLookup:function(t){var r=this,o='http://production.shippingapis.com/ShippingAPI.dll?API= CityStateLookup&XML=<CityStateLookupRequest%20USERID="'+r._uspsUsername+'"><ZipCode ID= "0"><Zip5>'+t+"</Zip5></ZipCode></CityStateLookupRequest>";return console.log(t),new Promise(function(t,n){e.get(o,"").then(function(e){var o=r._parseCityStateResponse(e.data);console.log(o),t(o)},function(t){n(t)})})},priceCalculator:function(t){var r=this,o=(r._shippingOptions,r._postage,["97005","84015"]),n=["EXPRESS","PRIORITY"],i="",c=0,l='http://production.shippingapis.com/ShippingApi.dll?API=RateV4&XML=<RateV4Request USERID="'+r._uspsUsername+'">';return i=t.l>12||t.w>12||t.h>12?"LARGE":"REGULAR",o.forEach(function(e){n.forEach(function(r){l+='<Package ID="'+ ++c+'">',l+="<Service>"+r+"</Service>",l+="<ZipOrigination>"+e+"</ZipOrigination>",l+="<ZipDestination>"+t.zipcode+"</ZipDestination>",l+="<Pounds>"+t.pounds+"</Pounds>",l+="<Ounces>"+t.ounces+"</Ounces>",l+="<Container>"+t.container+"</Container>",l+="<Size>"+i+"</Size>",l+="<Width>"+t.w+"</Width>",l+="<Length>"+t.l+"</Length>",l+="<Height>"+t.h+"</Height>",l+="</Package>"})}),l+="</RateV4Request> ",new Promise(function(t,o){e.get(l,config).then(function(e){var o=r._generalParse(e.data),n=r._filterPostageOptions(o);t(n)},function(t){o(t)})})}}}function config(t){t.when("/",{templateUrl:"views/landingPage.htm",controller:"landingController",controllerAs:"vm"}).when("/all-products",{templateUrl:"views/allProductsPage.htm",controller:"allProductsController",controllerAs:"vm",resolve:{productList:productList}}).when("/product/:prdctId",{templateUrl:"views/aProductPage.htm",controller:"aProductController",controllerAs:"vm",resolve:{aProduct:aProduct}}).when("/getting-the-product/:itemId",{templateUrl:"views/productGettingPage.htm",controller:"productGettingController",controllerAs:"vm",resolve:{uspsUsername:uspsUsername}}).when("/locations",{templateUrl:"views/locationsPage.htm",controller:"locationsController",controllerAs:"vm"}).when("/login",{templateUrl:"views/loginPage.htm",controller:"loginController",controllerAs:"vm"}).when("/cart",{templateUrl:"views/cartPage.htm",controller:"cartController",controllerAs:"vm"}).when("/checkout",{templateUrl:"views/checkoutPage.htm",controller:"checkoutController",controllerAs:"vm",resolve:{squareCreds:squareCreds}}).when("/order-confirmation/:confId",{templateUrl:"views/orderConfirmationPage.htm",controller:"orderConfirmationController",controllerAs:"vm"}).when("/registerUser",{templateUrl:"views/registrationPage.htm",controller:"registerAcctController",controllerAs:"vm"}).when("/MyAccount/:param",{templateUrl:"views/accountsPage.htm",controller:"accountsController",controllerAs:"vm"}).when("/teamMember/:param",{templateUrl:"views/internalActtsPage.htm",controller:"internalActtsController",controllerAs:"vm",resolve:{authentication:authentication}})}function authentication(){console.log("authenticating")}function squareCreds(t){var e=t;return console.log("getting square creds"),new Promise(function(t,r){e.post("/api/square-creds",{key:"owine91n-sn#bsinwi#k"}).then(function(e){console.log("got this",e),t(e)}).catch(function(e){t(e)})})}function productList(t,e){var r=t,o="/api/productlist";return void 0!=e.current.params&&(o+="?filter="+e.current.params.filter),new Promise(function(t,e){r.get(o).then(function(e){t(e)}).catch(function(t){e(t)})})}function aProduct(t,e){var r=t,o="/api/productlist?select="+e.current.params.prdctId;return console.log("path",o),new Promise(function(t,e){r.get(o).then(function(e){t(e)}).catch(function(t){e(t)})})}function uspsUsername(t){var e=t;return new Promise(function(t,r){e.get("/api/secrets/usps-username").then(function(e){console.log("got this secret",e),t(e)}).catch(function(t){r(t)})})}config.$inject=["$routeProvider"],productList.$inject=["dataServices","$route"],aProduct.$inject=["dataServices","$route"],uspsUsername.$inject=["dataServices"],squareCreds.$inject=["dataServices"];var ahNuts=angular.module("ahNuts",["ngRoute"]);angular.module("ahNuts").run(["shoppingCart",function(t){t.init()}]),function(t,e){"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?module.exports=e():t.X2JS=e()}(this,function(){return function(t){"use strict";function e(t){var e=t.localName;return null==e&&(e=t.baseName),null!=e&&""!=e||(e=t.nodeName),e}function r(t){return t.prefix}function o(t){return"string"==typeof t?t.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&apos;"):t}function n(t,e,r,o){for(var n=0;n<t.length;n++){var i=t[n];if("string"==typeof i){if(i==o)break}else if(i instanceof RegExp){if(i.test(o))break}else if("function"==typeof i&&i(e,r,o))break}return n!=t.length}function i(e,r,o){switch(t.arrayAccessForm){case"property":e[r]instanceof Array?e[r+"_asArray"]=e[r]:e[r+"_asArray"]=[e[r]]}!(e[r]instanceof Array)&&t.arrayAccessFormPaths.length>0&&n(t.arrayAccessFormPaths,e,r,o)&&(e[r]=[e[r]])}function c(t){var e=t.split(/[-T:+Z]/g),r=new Date(e[0],e[1]-1,e[2]),o=e[5].split(".");if(r.setHours(e[3],e[4],o[0]),o.length>1&&r.setMilliseconds(o[1]),e[6]&&e[7]){var n=60*e[6]+Number(e[7]);n=0+("-"==(/\d\d-\d\d:\d\d$/.test(t)?"-":"+")?-1*n:n),r.setMinutes(r.getMinutes()-n-r.getTimezoneOffset())}else-1!==t.indexOf("Z",t.length-1)&&(r=new Date(Date.UTC(r.getFullYear(),r.getMonth(),r.getDate(),r.getHours(),r.getMinutes(),r.getSeconds(),r.getMilliseconds())));return r}function l(e,r,o){if(t.datetimeAccessFormPaths.length>0){var i=o.split(".#")[0];return n(t.datetimeAccessFormPaths,e,r,i)?c(e):e}return e}function a(e,r,o,i){return!(r==_.ELEMENT_NODE&&t.xmlElementsFilter.length>0)||n(t.xmlElementsFilter,e,o,i)}function s(o,n){if(o.nodeType==_.DOCUMENT_NODE){for(var c=new Object,u=o.childNodes,p=0;p<u.length;p++)(d=u.item(p)).nodeType==_.ELEMENT_NODE&&(c[m=e(d)]=s(d,m));return c}if(o.nodeType==_.ELEMENT_NODE){(c=new Object).__cnt=0;for(var u=o.childNodes,p=0;p<u.length;p++){var d=u.item(p),m=e(d);if(d.nodeType!=_.COMMENT_NODE){var f=n+"."+m;a(c,d.nodeType,m,f)&&(c.__cnt++,null==c[m]?(c[m]=s(d,f),i(c,m,f)):(null!=c[m]&&(c[m]instanceof Array||(c[m]=[c[m]],i(c,m,f))),c[m][c[m].length]=s(d,f)))}}for(var v=0;v<o.attributes.length;v++){var h=o.attributes.item(v);c.__cnt++,c[t.attributePrefix+h.name]=h.value}var g=r(o);return null!=g&&""!=g&&(c.__cnt++,c.__prefix=g),null!=c["#text"]&&(c.__text=c["#text"],c.__text instanceof Array&&(c.__text=c.__text.join("\n")),t.stripWhitespaces&&(c.__text=c.__text.trim()),delete c["#text"],"property"==t.arrayAccessForm&&delete c["#text_asArray"],c.__text=l(c.__text,m,n+"."+m)),null!=c["#cdata-section"]&&(c.__cdata=c["#cdata-section"],delete c["#cdata-section"],"property"==t.arrayAccessForm&&delete c["#cdata-section_asArray"]),0==c.__cnt&&"text"==t.emptyNodeForm?c="":1==c.__cnt&&null!=c.__text?c=c.__text:1!=c.__cnt||null==c.__cdata||t.keepCData?c.__cnt>1&&null!=c.__text&&t.skipEmptyTextNodesForObj&&(t.stripWhitespaces&&""==c.__text||""==c.__text.trim())&&delete c.__text:c=c.__cdata,delete c.__cnt,!t.enableToStringFunc||null==c.__text&&null==c.__cdata||(c.toString=function(){return(null!=this.__text?this.__text:"")+(null!=this.__cdata?this.__cdata:"")}),c}if(o.nodeType==_.TEXT_NODE||o.nodeType==_.CDATA_SECTION_NODE)return o.nodeValue}function u(e,r,n,i){var c="<"+(null!=e&&null!=e.__prefix?e.__prefix+":":"")+r;if(null!=n)for(var l=0;l<n.length;l++){var a=n[l],s=e[a];t.escapeMode&&(s=o(s)),c+=" "+a.substr(t.attributePrefix.length)+"=",t.useDoubleQuotes?c+='"'+s+'"':c+="'"+s+"'"}return c+=i?"/>":">"}function p(t,e){return"</"+(null!=t.__prefix?t.__prefix+":":"")+e+">"}function d(t,e){return-1!==t.indexOf(e,t.length-e.length)}function m(e,r){return!!("property"==t.arrayAccessForm&&d(r.toString(),"_asArray")||0==r.toString().indexOf(t.attributePrefix)||0==r.toString().indexOf("__")||e[r]instanceof Function)}function f(t){var e=0;if(t instanceof Object)for(var r in t)m(t,r)||e++;return e}function v(e,r,o){return 0==t.jsonPropertiesFilter.length||""==o||n(t.jsonPropertiesFilter,e,r,o)}function h(e){var r=[];if(e instanceof Object)for(var o in e)-1==o.toString().indexOf("__")&&0==o.toString().indexOf(t.attributePrefix)&&r.push(o);return r}function g(e){var r="";return null!=e.__cdata&&(r+="<![CDATA["+e.__cdata+"]]>"),null!=e.__text&&(t.escapeMode?r+=o(e.__text):r+=e.__text),r}function $(e){var r="";return e instanceof Object?r+=g(e):null!=e&&(t.escapeMode?r+=o(e):r+=e),r}function C(t,e){return""===t?e:t+"."+e}function y(t,e,r,o){var n="";if(0==t.length)n+=u(t,e,r,!0);else for(var i=0;i<t.length;i++)n+=u(t[i],e,h(t[i]),!1),n+=A(t[i],C(o,e)),n+=p(t[i],e);return n}function A(t,e){var r="";if(f(t)>0)for(var o in t)if(!m(t,o)&&(""==e||v(t,o,C(e,o)))){var n=t[o],i=h(n);null==n||void 0==n?r+=u(n,o,i,!0):n instanceof Object?n instanceof Array?r+=y(n,o,i,e):n instanceof Date?(r+=u(n,o,i,!1),r+=n.toISOString(),r+=p(n,o)):f(n)>0||null!=n.__text||null!=n.__cdata?(r+=u(n,o,i,!1),r+=A(n,C(e,o)),r+=p(n,o)):r+=u(n,o,i,!0):(r+=u(n,o,i,!1),r+=$(n),r+=p(n,o))}return r+=$(t)}void 0===(t=t||{}).escapeMode&&(t.escapeMode=!0),t.attributePrefix=t.attributePrefix||"_",t.arrayAccessForm=t.arrayAccessForm||"none",t.emptyNodeForm=t.emptyNodeForm||"text",void 0===t.enableToStringFunc&&(t.enableToStringFunc=!0),t.arrayAccessFormPaths=t.arrayAccessFormPaths||[],void 0===t.skipEmptyTextNodesForObj&&(t.skipEmptyTextNodesForObj=!0),void 0===t.stripWhitespaces&&(t.stripWhitespaces=!0),t.datetimeAccessFormPaths=t.datetimeAccessFormPaths||[],void 0===t.useDoubleQuotes&&(t.useDoubleQuotes=!1),t.xmlElementsFilter=t.xmlElementsFilter||[],t.jsonPropertiesFilter=t.jsonPropertiesFilter||[],void 0===t.keepCData&&(t.keepCData=!1);var _={ELEMENT_NODE:1,TEXT_NODE:3,CDATA_SECTION_NODE:4,COMMENT_NODE:8,DOCUMENT_NODE:9};this.parseXmlString=function(t){var e=window.ActiveXObject||"ActiveXObject"in window;if(void 0===t)return null;var r;if(window.DOMParser){var o=new window.DOMParser,n=null;if(!e)try{n=o.parseFromString("INVALID","text/xml").getElementsByTagName("parsererror")[0].namespaceURI}catch(t){n=null}try{r=o.parseFromString(t,"text/xml"),null!=n&&r.getElementsByTagNameNS(n,"parsererror").length>0&&(r=null)}catch(t){r=null}}else 0==t.indexOf("<?")&&(t=t.substr(t.indexOf("?>")+2)),(r=new ActiveXObject("Microsoft.XMLDOM")).async="false",r.loadXML(t);return r},this.asArray=function(t){return void 0===t||null==t?[]:t instanceof Array?t:[t]},this.toXmlDateTime=function(t){return t instanceof Date?t.toISOString():"number"==typeof t?new Date(t).toISOString():null},this.asDateTime=function(t){return"string"==typeof t?c(t):t},this.xml2json=function(t){return s(t)},this.xml_str2json=function(t){var e=this.parseXmlString(t);return null!=e?this.xml2json(e):null},this.json2xml_str=function(t){return A(t,"")},this.json2xml=function(t){var e=this.json2xml_str(t);return this.parseXmlString(e)},this.getVersion=function(){return"1.2.0"}}}),angular.module("ahNuts").controller("aProductController",aProductController),aProductController.$inject=["$log","$routeParams","$location","aProduct"],angular.module("ahNuts").controller("accountsController",accountsController),accountsController.$inject=["$log","$routeParams","$location"],angular.module("ahNuts").controller("allProductsController",allProductsController),allProductsController.$inject=["$log","$routeParams","$location","productList"],angular.module("ahNuts").controller("cartController",cartController),cartController.$inject=["$log","$routeParams","$location","shoppingCart"],angular.module("ahNuts").controller("checkoutController",checkoutController),checkoutController.$inject=["$log","$routeParams","$location","squareCreds","shoppingCart"],angular.module("ahNuts").controller("internalActtsController",internalActtsController),internalActtsController.$inject=["$log","$routeParams","$location","dataServices"],angular.module("ahNuts").controller("landingController",landingController),landingController.$inject=["$scope","$log","$routeParams","$location","dataServices"],angular.module("ahNuts").controller("locationsController",locationsController),locationsController.$inject=["$log","$routeParams","$location"],angular.module("ahNuts").controller("loginController",loginController),loginController.$inject=["$log","$routeParams","$location","dataServices"],angular.module("ahNuts").controller("mainController",mainController),mainController.$inject=["$scope","$log","$routeParams","$location"],angular.module("ahNuts").controller("orderConfirmationController",orderConfirmationController),orderConfirmationController.$inject=["$scope","$log","$routeParams","$location"],angular.module("ahNuts").controller("productGettingController",productGettingController),productGettingController.$inject=["$scope","$log","$routeParams","$location","shoppingCart","uspsServices","uspsUsername"],angular.module("ahNuts").controller("registerAcctController",registerAcctController),registerAcctController.$inject=["$log","$routeParams","$location"],angular.module("ahNuts").directive("ahHeader",ahHeader),angular.module("ahNuts").directive("ahFooter",ahFooter),angular.module("ahNuts").directive("cartItemsList",cartItemsList),angular.module("ahNuts").directive("cartNavigation",cartNavigation),angular.module("ahNuts").directive("cartSummary",cartSummary),angular.module("ahNuts").directive("checkoutBilling",checkoutBilling),angular.module("ahNuts").directive("checkoutFollowup",checkoutFollowup),angular.module("ahNuts").directive("checkoutPayment",checkoutPayment),angular.module("ahNuts").directive("couponSubmission",couponSubmission),angular.module("ahNuts").directive("createNewAccount",createNewAccount),angular.module("ahNuts").directive("defineDeliveryAddress",defineDeliveryAddress),angular.module("ahNuts").directive("deliveryDetails",deliveryDetails),angular.module("ahNuts").directive("featuredProducts",featuredProducts),angular.module("ahNuts").directive("fedexOptions",fedexOptions),angular.module("ahNuts").directive("fullProductProfile",fullProductProfile),angular.module("ahNuts").directive("heroBanner",heroBanner),angular.module("ahNuts").directive("passwordReset",passwordReset),angular.module("ahNuts").directive("pickupOrDelivery",pickupOrDelivery),angular.module("ahNuts").directive("primaryContent",primaryContent),angular.module("ahNuts").directive("productSizePicker",productSizePicker),angular.module("ahNuts").directive("prdctThmbnl",prdctThmbnl),angular.module("ahNuts").directive("selectDeliveryMethod",selectDeliveryMethod),angular.module("ahNuts").directive("selectPOrD",selectPOrD),angular.module("ahNuts").directive("selectPickupLocation",selectPickupLocation),angular.module("ahNuts").directive("sizeQtySelector",sizeQtySelector),angular.module("ahNuts").directive("toZipOnDate",toZipOnDate),angular.module("ahNuts").directive("upsOptions",upsOptions),angular.module("ahNuts").directive("userDashboard",userDashboard),angular.module("ahNuts").directive("uspsOptions",uspsOptions),angular.module("ahNuts").factory("dataServices",dataServices),dataServices.$inject=["$log","$http"],angular.module("ahNuts").factory("shoppingCart",shoppingCart),shoppingCart.$inject=["$log","$http","$window"],angular.module("ahNuts").factory("testObject",testObject),testObject.$inject=["$log"],angular.module("ahNuts").service("userAuthentication",userAuthentication),userAuthentication.$inject=["$http","$window"],angular.module("ahNuts").factory("uspsServices",uspsServices),uspsServices.$inject=["$log","$http"],angular.module("ahNuts").config(config);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNjcmlwdHMvY29udHJvbGxlcnMvYVByb2R1Y3QuY29udHJvbGxlci5qcyIsInNjcmlwdHMvY29udHJvbGxlcnMvYWNjb3VudHMuY29udHJvbGxlci5qcyIsInNjcmlwdHMvY29udHJvbGxlcnMvYWxsUHJvZHVjdHMuY29udHJvbGxlci5qcyIsInNjcmlwdHMvY29udHJvbGxlcnMvY2FydC5jb250cm9sbGVyLmpzIiwic2NyaXB0cy9jb250cm9sbGVycy9jaGVja291dC5jb250cm9sbGVyLmpzIiwic2NyaXB0cy9jb250cm9sbGVycy9pbnRlcm5hbC5hY2NvdW50cy5jb250cm9sbGVyLmpzIiwic2NyaXB0cy9jb250cm9sbGVycy9sYW5kaW5nLmNvbnRyb2xsZXIuanMiLCJzY3JpcHRzL2NvbnRyb2xsZXJzL2xvY2F0aW9ucy5jb250cm9sbGVyLmpzIiwic2NyaXB0cy9jb250cm9sbGVycy9sb2dpbi5jb250cm9sbGVyLmpzIiwic2NyaXB0cy9jb250cm9sbGVycy9tYWluLmNvbnRyb2xsZXIuanMiLCJzY3JpcHRzL2NvbnRyb2xsZXJzL29yZGVyQ29uZmlybWF0aW9uLmNvbnRyb2xsZXIuanMiLCJzY3JpcHRzL2NvbnRyb2xsZXJzL3Byb2R1Y3RHZXR0aW5nLmNvbnRyb2xsZXIuanMiLCJzY3JpcHRzL2NvbnRyb2xsZXJzL3JlZ2lzdGVyQWNjdC5jb250cm9sbGVyLmpzIiwic2NyaXB0cy9kaXJlY3RpdmVzL2FoLmhlYWRlci5kaXJlY3RpdmUuanMiLCJzY3JpcHRzL2RpcmVjdGl2ZXMvYWhGb290ZXIuZGlyZWN0aXZlLmpzIiwic2NyaXB0cy9kaXJlY3RpdmVzL2NhcnRJdGVtc0xpc3QuZGlyZWN0aXZlLmpzIiwic2NyaXB0cy9kaXJlY3RpdmVzL2NhcnROYXZpZ2F0aW9uLmRpcmVjdGl2ZS5qcyIsInNjcmlwdHMvZGlyZWN0aXZlcy9jYXJ0U3VtbWFyeS5kaXJlY3RpdmUuanMiLCJzY3JpcHRzL2RpcmVjdGl2ZXMvY2hlY2tvdXRCaWxsaW5nLmRpcmVjdGl2ZS5qcyIsInNjcmlwdHMvZGlyZWN0aXZlcy9jaGVja291dEZvbGxvd3VwLmRpcmVjdGl2ZS5qcyIsInNjcmlwdHMvZGlyZWN0aXZlcy9jaGVja291dFBheW1lbnQuZGlyZWN0aXZlLmpzIiwic2NyaXB0cy9kaXJlY3RpdmVzL2NvdXBvblN1Ym1pc3Npb24uZGlyZWN0aXZlLmpzIiwic2NyaXB0cy9kaXJlY3RpdmVzL2NyZWF0ZU5ld0FjY291bnQuZGlyZWN0aXZlLmpzIiwic2NyaXB0cy9kaXJlY3RpdmVzL2RlZmluZURlbGl2ZXJ5QWRkcmVzcy5kaXJlY3RpdmUuanMiLCJzY3JpcHRzL2RpcmVjdGl2ZXMvZGVsaXZlcnlEZXRhaWxzLmRpcmVjdGl2ZS5qcyIsInNjcmlwdHMvZGlyZWN0aXZlcy9mZWF0dXJlZFByb2R1Y3RzLmRpcmVjdGl2ZS5qcyIsInNjcmlwdHMvZGlyZWN0aXZlcy9mZWRleE9wdGlvbnMuZGlyZWN0aXZlLmpzIiwic2NyaXB0cy9kaXJlY3RpdmVzL2Z1bGxQcm9kdWN0UHJvZmlsZS5kaXJlY3RpdmUuanMiLCJzY3JpcHRzL2RpcmVjdGl2ZXMvaGVyb0Jhbm5lci5kaXJlY3RpdmUuanMiLCJzY3JpcHRzL2RpcmVjdGl2ZXMvcGFzc3dvcmRSZXNldC5kaXJlY3RpdmUuanMiLCJzY3JpcHRzL2RpcmVjdGl2ZXMvcGlja3VwT3JEZWxpdmVyeS5kaXJlY3RpdmUuanMiLCJzY3JpcHRzL2RpcmVjdGl2ZXMvcHJpbWFyeUNvbnRlbnRDb250cm9sbGVyLmRpcmVjdGl2ZS5qcyIsInNjcmlwdHMvZGlyZWN0aXZlcy9wcm9kdWN0U2l6ZVBpY2tlci5kaXJlY3RpdmUuanMiLCJzY3JpcHRzL2RpcmVjdGl2ZXMvcHJvZHVjdFRodW1ibmFpbHMuZGlyZWN0aXZlLmpzIiwic2NyaXB0cy9kaXJlY3RpdmVzL3NlbGVjdERlbGl2ZXJ5TWV0aG9kLmRpcmVjdGl2ZS5qcyIsInNjcmlwdHMvZGlyZWN0aXZlcy9zZWxlY3RQT3JELmRpcmVjdGl2ZS5qcyIsInNjcmlwdHMvZGlyZWN0aXZlcy9zZWxlY3RQaWNrdXBMb2NhdGlvbi5kaXJlY3RpdmUuanMiLCJzY3JpcHRzL2RpcmVjdGl2ZXMvc2l6ZVF0eVNlbGVjdG9yLmRpcmVjdGl2ZS5qcyIsInNjcmlwdHMvZGlyZWN0aXZlcy90b1ppcE9uRGF0ZS5kaXJlY3RpdmUuanMiLCJzY3JpcHRzL2RpcmVjdGl2ZXMvdXBzT3B0aW9ucy5kaXJlY3RpdmUuanMiLCJzY3JpcHRzL2RpcmVjdGl2ZXMvdXNlckRhc2hib2FyZC5kaXJlY3RpdmUuanMiLCJzY3JpcHRzL2RpcmVjdGl2ZXMvdXNwc09wdGlvbnMuZGlyZWN0aXZlLmpzIiwic2NyaXB0cy9mYWN0b3JpZXMvZGF0YS5zZXJ2aWNlcy5mYWN0b3J5LmpzIiwic2NyaXB0cy9mYWN0b3JpZXMvc2hvcHBpbmdDYXJ0LnNlcnZpY2VzLmZhY3RvcnkuanMiLCJzY3JpcHRzL2ZhY3Rvcmllcy90ZXN0T2JqZWN0LnNlcnZpY2VzLmZhY3RvcnkuanMiLCJzY3JpcHRzL2ZhY3Rvcmllcy91c2VyQXV0aGVudGljYXRpb24uc2VydmljZS5qcyIsInNjcmlwdHMvZmFjdG9yaWVzL3VzcHNTZXJ2aWNlcy5zZXJ2aWNlLmpzIiwic2NyaXB0cy9yb3V0ZXMvcm91dGVzLWNvbmZpZy5qcyIsInNjcmlwdHMvYXBwLmpzIiwic2NyaXB0cy9ydW4uanMiLCJzY3JpcHRzLzNyZF9wYXJ0eS94bWwyanNvbi5qcyJdLCJuYW1lcyI6WyJhUHJvZHVjdENvbnRyb2xsZXIiLCIkbG9nIiwiJHJvdXRlUGFyYW1zIiwiJGxvY2F0aW9uIiwiYVByb2R1Y3QiLCJ2bSIsInRoaXMiLCJwcm9kdWN0IiwicmV0dXJuSG9tZSIsInBhdGgiLCJhY2NvdW50c0NvbnRyb2xsZXIiLCJyZWdpc3RlcmVkVXNlciIsImZvcmdvdFBhc3N3b3JkIiwiaW5mbyIsInVzZXJJZCIsInVzZXJDaGVjayIsInBhcmFtIiwiYWxsUHJvZHVjdHNDb250cm9sbGVyIiwicHJvZHVjdExpc3QiLCJhbGxQcm9kdWN0cyIsInVuZGVmaW5lZCIsImZpbHRlciIsInNlbGVjdGVkUHJvZHVjdHMiLCJzZWxlY3RBUHJvdWN0IiwicHJkY3RDb2RlIiwic2VhcmNoIiwiY2FydENvbnRyb2xsZXIiLCJzaG9wcGluZ0NhcnQiLCJjYXJ0IiwiY2FsY1RvdGFsQ29zdCIsImNoZWNrb3V0Q29udHJvbGxlciIsInNxdWFyZUNyZWRzIiwiYmFja0J0biIsInN1Ym1pdE9yZGVyIiwiaW50ZXJuYWxBY3R0c0NvbnRyb2xsZXIiLCJkYXRhU2VydmljZXMiLCJkYXRhIiwic3VibWl0IiwiY29uc29sZSIsImxvZyIsInBvc3QiLCJ0ZXN0IiwidGhlbiIsInJlc3BvbnNlIiwibGFuZGluZ0NvbnRyb2xsZXIiLCIkc2NvcGUiLCJsb2NhdGlvbnNDb250cm9sbGVyIiwibG9naW5Db250cm9sbGVyIiwiZW1haWwiLCJwYXNzd29yZCIsImxvZ2luIiwicGFzcyIsInRva2VuIiwibWFpbkNvbnRyb2xsZXIiLCJ0ZWFtTWVtYmVyIiwib3JkZXJDb25maXJtYXRpb25Db250cm9sbGVyIiwicHJvZHVjdEdldHRpbmdDb250cm9sbGVyIiwidXNwc1NlcnZpY2VzIiwidXNwc1VzZXJuYW1lIiwiaXRlbSIsInVzcHMiLCJfdXNwc1VzZXJuYW1lIiwib3JkZXIiLCJ1cGRhdGVBcXVpc2l0aW9uTWV0aG9kIiwiYXF1aXNpdGlvbk1ldGhvZCIsImNpdHlTdGF0ZUxvb2t1cCIsImFxdWlzaXRpb25EZXRhaWxzIiwiZGVsaXZlcnlMb2NhdGlvbiIsInppcCIsImNpdHlTdGF0ZU9iamVjdCIsImNpdHkiLCJzdGF0ZSIsImNhdGNoIiwiZSIsInppcEdvIiwidmFsdWUiLCJwcmljZUNhbGN1bGF0b3IiLCJsIiwidyIsImgiLCJ6aXBjb2RlIiwicG91bmRzIiwib3VuY2VzIiwiY29udGFpbmVyIiwicyIsIm9yaWdpblppcCIsIk9iamVjdCIsImtleXMiLCJmb3JFYWNoIiwic2hpcHBpbmdPcmlnaW4iLCJkZWxpdmVyeU1ldGhvZCIsInVzcHNPcHRpb25zIiwic2VydmljZXMiLCIkYXBwbHkiLCJyZWdpc3RlckFjY3RDb250cm9sbGVyIiwibGlua0Z1bmMiLCJzY29wZSIsImVsIiwiYXR0ciIsImN0cmwiLCJhaEhlYWRlckNvbnRyb2xsZXIiLCJuYXZibnQiLCJidXR0b24iLCJkaXJlY3RpdmUiLCJyZXN0cmljdCIsInRlbXBsYXRlVXJsIiwicmVwbGFjZSIsImxpbmsiLCJjb250cm9sbGVyIiwiY29udHJvbGxlckFzIiwiYmluZFRvQ29udHJvbGxlciIsIiRpbmplY3QiLCJhaEZvb3RlckNvbnRyb2xsZXIiLCJjYXJ0SXRlbXNMaXN0Q29udHJvbGxlciIsImNhcnRJdGVtcyIsInJlbW92ZUl0ZW0iLCJpdGVtSWQiLCJ1cGRhdGVRdHkiLCJxdHkiLCJ1cGRhdGVJdGVtUXR5IiwiY2FydE5hdmlnYXRpb25Db250cm9sbGVyIiwic2hvcE1vcmUiLCJjaGVja291dCIsImNhcnRTdW1tYXJ5Q29udHJvbGxlciIsIm5vSXRlbXMiLCJzdWJ0b3RhbCIsImNoZWNrb3V0QmlsbGluZ0NvbnRyb2xsZXIiLCJwYXlEZXQiLCJuYW1lIiwiZmlyc3QiLCJsYXN0Iiwic3RyZWV0MSIsInN0cmVldDIiLCJzdHJlZXQzIiwicGhvbmUiLCJwbyIsImFxdURldCIsImNvcHlEZWxBZGQiLCJyZWNlaXZlciIsImNoZWNrb3V0Rm9sbG93dXBDb250cm9sbGVyIiwiY2hlY2tvdXRQYXltZW50Q29udHJvbGxlciIsInBheW1lbnRGb3JtIiwiU3FQYXltZW50Rm9ybSIsImFwcGxpY2F0aW9uSWQiLCJsb2NhdGlvbklkIiwiaW5wdXRDbGFzcyIsImlucHV0U3R5bGVzIiwiZm9udFNpemUiLCJjYXJkTnVtYmVyIiwiZWxlbWVudElkIiwicGxhY2Vob2xkZXIiLCJjdnYiLCJleHBpcmF0aW9uRGF0ZSIsInBvc3RhbENvZGUiLCJhcHBsZVBheSIsImNhbGxiYWNrcyIsIm1ldGhvZHNTdXBwb3J0ZWQiLCJtZXRob2RzIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsInN0eWxlIiwiZGlzcGxheSIsImNyZWF0ZVBheW1lbnRSZXF1ZXN0IiwicmVxdWVzdFNoaXBwaW5nQWRkcmVzcyIsImN1cnJlbmN5Q29kZSIsImNvdW50cnlDb2RlIiwidG90YWwiLCJsYWJlbCIsImFtb3VudCIsInBlbmRpbmciLCJsaW5lSXRlbXMiLCJjYXJkTm9uY2VSZXNwb25zZVJlY2VpdmVkIiwiZXJyb3JzIiwibm9uY2UiLCJjYXJkRGF0YSIsImVycm9yIiwibWVzc2FnZSIsInVuc3VwcG9ydGVkQnJvd3NlckRldGVjdGVkIiwiaW5wdXRFdmVudFJlY2VpdmVkIiwiaW5wdXRFdmVudCIsImV2ZW50VHlwZSIsInBheW1lbnRGb3JtTG9hZGVkIiwicmVxdWVzdENhcmROb25jZSIsImV2ZW50IiwicHJldmVudERlZmF1bHQiLCJidWlsZCIsImNvdXBvblN1Ym1pc3Npb25Db250cm9sbGVyIiwiY3JlYXRlTmV3QWNjb3VudENvbnRyb2xsZXIiLCJkZWZpbmVEZWxpdmVyeUFkZHJlc3NDb250cm9sbGVyIiwiZGVsaXZlclRvIiwiZGVsaXZlcnlEZXRhaWxzQ29udHJvbGxlciIsImNoYW5nZURldGFpbHMiLCJmZWF0dXJlZFByb2R1Y3RzQ29udHJvbGxlciIsIm1yUHJkY3RzQnRuIiwicHJvZHVjdFNlbGVjdGlvbkJ0biIsInByb2R1Y3ROYW1lIiwiZmVkZXhPcHRpb25zQ29udHJvbGxlciIsImZ1bGxQcm9kdWN0UHJvZmlsZUNvbnRyb2xsZXIiLCJpdGVtU2VsZWN0aW9ucyIsInNpemVzIiwiYWRkVG9DYXJ0Iiwic2l6ZSIsImFkZEl0ZW0iLCJhY3FNZXRoSXNEZWZpbmVkIiwiaGVyb0Jhbm5lckNvbnRyb2xsZXIiLCJwYXNzd29yZFJlc2V0Q29udHJvbGxlciIsImJhY2siLCJwaWNrdXBPckRlbGl2ZXJ5Q29udHJvbGxlciIsIm1ldGhvZCIsImRldGFpbHMiLCJwcmltYXJ5Q29udGVudENvbnRyb2xsZXIiLCJwcm9kdWN0U2l6ZVBpY2tlckNvbnRyb2xsZXIiLCJwcmRjdFRobWJubENvbnRyb2xsZXIiLCJzZWxlY3REZWxpdmVyeU1ldGhvZENvbnRyb2xsZXIiLCJzZWxlY3RQT3JEQ29udHJvbGxlciIsInNlbGVjdFBpY2t1cExvY2F0aW9uQ29udHJvbGxlciIsInNpemVRdHlTZWxlY3RvckNvbnRyb2xsZXIiLCJpbmNyaW1lbnQiLCJkZWNyaW1lbnQiLCIkd2F0Y2giLCJuZXdWYWx1ZSIsIm9sZFZhbHVlIiwiY29tcGxldGVkIiwidG9aaXBPbkRhdGVDb250cm9sbGVyIiwiZ29GbiIsInppcGNvZGVGaW5kZXIiLCJhbGVydCIsInN1Ym1pdFppcCIsImNoZWNremlwY29kZSIsImdvaW5nVG8iLCJ2aXBJZGVudGlmaWVkIiwidXBzT3B0aW9uc0NvbnRyb2xsZXIiLCJ1c2VyRGFzaGJvYXJkQ29udHJvbGxlciIsInVzcHNPcHRpb25zQ29udHJvbGxlciIsIm9wdGlvbnMiLCIkaHR0cCIsImdldCIsInVybCIsImNvbmZpZyIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiJHdpbmRvdyIsIl9hZGROZXdJdGVtIiwibmV3SXRlbSIsInJldHVybk9iamVjdCIsImtleSIsIl9jb3VudE5vSXRlbXMiLCJhbGxJdGVtcyIsInNlbGYiLCJuZXdUb3RhbCIsImlzRW1wdHkiLCJfY2FsY1N1YnRvdGFsIiwicHJpY2UiLCJvcmRlck51bWJlciIsIm5vT2ZJdGVtcyIsInNoaXBwaW5nUHJpY2UiLCJkaXNjb3VudHMiLCJ0b3RhbENvc3QiLCJkZWxaaXBJZGVudGlmaWVkIiwiZGVsRGF0ZUlkZW50aWZpZWQiLCJzaGlwcGVkT3JQVVNlbGVjdGVkIiwid2lsbFNoaXBwcCIsIndpbGxQVSIsInB1TG9jU2VsZWN0ZWQiLCJkZWxNdGhTZWxlY3RlZCIsInBpY2t1cExvY2F0aW9uIiwicGF5bWVudERldGFpbHMiLCJpdGVtcyIsIl9zYXZlVG9Ccm93c2VyIiwic2Vzc2lvblN0b3JhZ2UiLCJzZXRJdGVtIiwiSlNPTiIsInN0cmluZ2lmeSIsIl9nZXRDYXJ0IiwiX3JlbW92ZUNhcnQiLCJpbml0IiwiZ2V0SXRlbSIsInNhdmVkQ2FydCIsInBhcnNlIiwiaXRtQ29kZSIsImNvZGUiLCJwcm9kdWN0SWQiLCJwYXJzZUludCIsInRlc3RPYmplY3QiLCJpbWFnZSIsInJhdGluZyIsInRpdGxlIiwib3oiLCJkZXNjcmlwdGlvbiIsImluZ3JlZGllbnRzIiwidXNlckF1dGhlbnRpY2F0aW9uIiwiX3NoaXBwaW5nUmVxdWVzdCIsIlBhY2thZ2VJRCIsIlNlcnZpY2UiLCJaaXBPcmlnaW5hdGlvbiIsIlppcERlc3RpbmF0aW9uIiwiUG91bmRzIiwiT3VuY2VzIiwiQ29udGFpbmVyIiwiU2l6ZSIsIldpZHRoIiwiTGVuZ3RoIiwiSGVpZ2h0IiwiR2lydGgiLCJWYWx1ZSIsIl9zaGlwcGluZ09wdGlvbnMiLCJ6b25lcyIsInBvc3RhZ2UiLCJfZ2VuZXJhbFBhcnNlIiwieG1sIiwiYWZ0ZXJDbnYiLCJYMkpTIiwieG1sX3N0cjJqc29uIiwiX2ZpbHRlclBvc3RhZ2VPcHRpb25zIiwiYWxsT3B0aW9ucyIsImZpbHRlcmVkT3B0aW9ucyIsInBhY2thZ2VMaXN0IiwiUmF0ZVY0UmVzcG9uc2UiLCJQYWNrYWdlIiwiY2xvc2VzdFppcCIsInpvbmUiLCJab25lIiwibWFpbFNlcnZpY2UiLCJQb3N0YWdlIiwiTWFpbFNlcnZpY2UiLCJyYXRlIiwiUmF0ZSIsInB1c2giLCJzZXJ2aWNlIiwiX3BhcnNlQ2l0eVN0YXRlUmVzcG9uc2UiLCJjaXR5U3RhdGVYTUwiLCJlbmRDaXR5U3BsaXQiLCJzcGxpdCIsImVuZFN0YXRlU3BsaXQiLCJnZXRTaGlwcGluZ1JlcXVlc3QiLCJzaGlwcGluZ1JlcXVlc3QiLCJfcG9zdGFnZSIsInBhY2thZ2VTaXplIiwib3B0aW9uQ291bnQiLCJzZXJ2aWNlVHlwZSIsImRhdGFKc29uT2JqZWN0IiwiYWxsUG9zdGFnZU9wdGlvbnMiLCIkcm91dGVQcm92aWRlciIsIndoZW4iLCJhdXRoZW50aWNhdGlvbiIsIiRyb3V0ZSIsImN1cnJlbnQiLCJwYXJhbXMiLCJwcmRjdElkIiwiYWhOdXRzIiwiYW5ndWxhciIsIm1vZHVsZSIsInJ1biIsInJvb3QiLCJmYWN0b3J5IiwiZGVmaW5lIiwiYW1kIiwiZXhwb3J0cyIsImdldE5vZGVMb2NhbE5hbWUiLCJub2RlIiwibm9kZUxvY2FsTmFtZSIsImxvY2FsTmFtZSIsImJhc2VOYW1lIiwibm9kZU5hbWUiLCJnZXROb2RlUHJlZml4IiwicHJlZml4IiwiZXNjYXBlWG1sQ2hhcnMiLCJzdHIiLCJjaGVja0luU3RkRmlsdGVyc0FycmF5Rm9ybSIsInN0ZEZpbHRlcnNBcnJheUZvcm0iLCJvYmoiLCJpZHgiLCJsZW5ndGgiLCJmaWx0ZXJQYXRoIiwiUmVnRXhwIiwidG9BcnJheUFjY2Vzc0Zvcm0iLCJjaGlsZE5hbWUiLCJhcnJheUFjY2Vzc0Zvcm0iLCJBcnJheSIsImFycmF5QWNjZXNzRm9ybVBhdGhzIiwiZnJvbVhtbERhdGVUaW1lIiwicHJvcCIsImJpdHMiLCJkIiwiRGF0ZSIsInNlY29uZEJpdHMiLCJzZXRIb3VycyIsInNldE1pbGxpc2Vjb25kcyIsIm9mZnNldE1pbnV0ZXMiLCJOdW1iZXIiLCJzZXRNaW51dGVzIiwiZ2V0TWludXRlcyIsImdldFRpbWV6b25lT2Zmc2V0IiwiaW5kZXhPZiIsIlVUQyIsImdldEZ1bGxZZWFyIiwiZ2V0TW9udGgiLCJnZXREYXRlIiwiZ2V0SG91cnMiLCJnZXRTZWNvbmRzIiwiZ2V0TWlsbGlzZWNvbmRzIiwiY2hlY2tGcm9tWG1sRGF0ZVRpbWVQYXRocyIsImZ1bGxQYXRoIiwiZGF0ZXRpbWVBY2Nlc3NGb3JtUGF0aHMiLCJjaGVja1htbEVsZW1lbnRzRmlsdGVyIiwiY2hpbGRUeXBlIiwiY2hpbGRQYXRoIiwiRE9NTm9kZVR5cGVzIiwiRUxFTUVOVF9OT0RFIiwieG1sRWxlbWVudHNGaWx0ZXIiLCJwYXJzZURPTUNoaWxkcmVuIiwibm9kZVR5cGUiLCJET0NVTUVOVF9OT0RFIiwicmVzdWx0Iiwibm9kZUNoaWxkcmVuIiwiY2hpbGROb2RlcyIsImNpZHgiLCJjaGlsZCIsIl9fY250IiwiQ09NTUVOVF9OT0RFIiwiYWlkeCIsImF0dHJpYnV0ZXMiLCJhdHRyaWJ1dGVQcmVmaXgiLCJub2RlUHJlZml4IiwiX19wcmVmaXgiLCJfX3RleHQiLCJqb2luIiwic3RyaXBXaGl0ZXNwYWNlcyIsInRyaW0iLCJfX2NkYXRhIiwiZW1wdHlOb2RlRm9ybSIsImtlZXBDRGF0YSIsInNraXBFbXB0eVRleHROb2Rlc0Zvck9iaiIsImVuYWJsZVRvU3RyaW5nRnVuYyIsInRvU3RyaW5nIiwiVEVYVF9OT0RFIiwiQ0RBVEFfU0VDVElPTl9OT0RFIiwibm9kZVZhbHVlIiwic3RhcnRUYWciLCJqc29uT2JqIiwiZWxlbWVudCIsImF0dHJMaXN0IiwiY2xvc2VkIiwicmVzdWx0U3RyIiwiYXR0ck5hbWUiLCJhdHRyVmFsIiwiZXNjYXBlTW9kZSIsInN1YnN0ciIsInVzZURvdWJsZVF1b3RlcyIsImVuZFRhZyIsImVsZW1lbnROYW1lIiwiZW5kc1dpdGgiLCJzdWZmaXgiLCJqc29uWG1sU3BlY2lhbEVsZW0iLCJqc29uT2JqRmllbGQiLCJGdW5jdGlvbiIsImpzb25YbWxFbGVtQ291bnQiLCJlbGVtZW50c0NudCIsIml0IiwiY2hlY2tKc29uT2JqUHJvcGVydGllc0ZpbHRlciIsInByb3BlcnR5TmFtZSIsImpzb25PYmpQYXRoIiwianNvblByb3BlcnRpZXNGaWx0ZXIiLCJwYXJzZUpTT05BdHRyaWJ1dGVzIiwiYWl0IiwicGFyc2VKU09OVGV4dEF0dHJzIiwianNvblR4dE9iaiIsInBhcnNlSlNPTlRleHRPYmplY3QiLCJnZXRKc29uUHJvcGVydHlQYXRoIiwianNvblByb3BOYW1lIiwicGFyc2VKU09OQXJyYXkiLCJqc29uQXJyUm9vdCIsImpzb25BcnJPYmoiLCJhcklkeCIsInBhcnNlSlNPTk9iamVjdCIsInN1Yk9iaiIsInRvSVNPU3RyaW5nIiwicGFyc2VYbWxTdHJpbmciLCJ4bWxEb2NTdHIiLCJpc0lFUGFyc2VyIiwid2luZG93IiwiQWN0aXZlWE9iamVjdCIsInhtbERvYyIsIkRPTVBhcnNlciIsInBhcnNlciIsInBhcnNlcmVycm9yTlMiLCJwYXJzZUZyb21TdHJpbmciLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsIm5hbWVzcGFjZVVSSSIsImVyciIsImdldEVsZW1lbnRzQnlUYWdOYW1lTlMiLCJhc3luYyIsImxvYWRYTUwiLCJhc0FycmF5IiwidG9YbWxEYXRlVGltZSIsImR0IiwiYXNEYXRlVGltZSIsInhtbDJqc29uIiwianNvbjJ4bWxfc3RyIiwianNvbjJ4bWwiLCJnZXRWZXJzaW9uIiwiYWhIZWFkZXIiLCJhaEZvb3RlciIsImNhcnRJdGVtc0xpc3QiLCJjYXJ0TmF2aWdhdGlvbiIsImNhcnRTdW1tYXJ5IiwiY2hlY2tvdXRCaWxsaW5nIiwiY2hlY2tvdXRGb2xsb3d1cCIsImNoZWNrb3V0UGF5bWVudCIsImNvdXBvblN1Ym1pc3Npb24iLCJjcmVhdGVOZXdBY2NvdW50IiwiZGVmaW5lRGVsaXZlcnlBZGRyZXNzIiwiZGVsaXZlcnlEZXRhaWxzIiwiZmVhdHVyZWRQcm9kdWN0cyIsImZlZGV4T3B0aW9ucyIsImZ1bGxQcm9kdWN0UHJvZmlsZSIsImhlcm9CYW5uZXIiLCJwYXNzd29yZFJlc2V0IiwicGlja3VwT3JEZWxpdmVyeSIsInByaW1hcnlDb250ZW50IiwicHJvZHVjdFNpemVQaWNrZXIiLCJwcmRjdFRobWJubCIsInNlbGVjdERlbGl2ZXJ5TWV0aG9kIiwic2VsZWN0UE9yRCIsInNlbGVjdFBpY2t1cExvY2F0aW9uIiwic2l6ZVF0eVNlbGVjdG9yIiwidG9aaXBPbkRhdGUiLCJ1cHNPcHRpb25zIiwidXNlckRhc2hib2FyZCJdLCJtYXBwaW5ncyI6IkFBT0EsU0FBQUEsbUJBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEdBR0EsSUFBQUMsRUFBQUMsS0FDQUQsRUFBQUUsUUFBQUgsRUFLQUMsRUFBQUcsV0FBQSxXQUNBTCxFQUFBTSxLQUFBLE1DVkEsU0FBQUMsbUJBQUFULEVBQUFDLEVBQUFDLEdBR0EsSUFBQUUsRUFBQUMsS0FHQUQsRUFBQU0sZ0JBQUEsRUFDQU4sRUFBQU8sZ0JBQUEsRUFHQVgsRUFBQVksS0FBQSw4QkFHQSxTQUFBQyxHQUdBLGlCQUFBQSxHQUFBLGtCQUFBQSxFQUdBLGtCQUFBQSxJQUFBVCxFQUFBTyxnQkFB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UUFDQUMsT0FBQSxVQUNBRyxRQUFBLGVBQUFoVSxjQUVBQSxhQUFBNEUsU0FBQSxPQUFBLFNDSkFnUCxRQUNBQyxPQUFBLFVBQ0FHLFFBQUEsZUFBQXhVLGNBRUFBLGFBQUFvRixTQUFBLE9BQUEsUUFBQSxXQ0pBZ1AsUUFDQUMsT0FBQSxVQUNBRyxRQUFBLGFBQUF2RSxZQUVBQSxXQUFBN0ssU0FBQSxRQ0pBZ1AsUUFDQUMsT0FBQSxVQUNBdkIsUUFBQSxxQkFBQXRDLG9CQUVBQSxtQkFBQXBMLFNBQUEsUUFBQSxXQ0pBZ1AsUUFDQUMsT0FBQSxVQUNBRyxRQUFBLGVBQUExUyxjQUVBQSxhQUFBc0QsU0FBQSxPQUFBLFNDSkFnUCxRQUNBQyxPQUFBLFVBQ0FsSCxPQUFBQSIsImZpbGUiOiJidW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJhbmd1bGFyXG4gICAgLm1vZHVsZSgnYWhOdXRzJylcbiAgICAuY29udHJvbGxlcignYVByb2R1Y3RDb250cm9sbGVyJywgYVByb2R1Y3RDb250cm9sbGVyKTtcblxuYVByb2R1Y3RDb250cm9sbGVyLiRpbmplY3QgPSBbJyRsb2cnLCAnJHJvdXRlUGFyYW1zJywgJyRsb2NhdGlvbicsICdhUHJvZHVjdCddO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIGFQcm9kdWN0Q29udHJvbGxlcigkbG9nLCAkcm91dGVQYXJhbXMsICRsb2NhdGlvbiwgYVByb2R1Y3QpIHtcblxuXHQvL2RlZmluZSB2aWV3IG1vZGVsIHZhcmlhYmxlXG5cdHZhciB2bSA9IHRoaXM7XG5cdHZtLnByb2R1Y3QgPSBhUHJvZHVjdDtcblx0Ly92bS5wcmRjdElkID0gJHJvdXRlUGFyYW1zLnByZGN0SWQ7XG5cblx0Ly8kbG9nLmluZm8oJ2luIHRoZSBQcm9kdWN0IGNvbnRyb2xsZXInLCB2bS5wcmRjdElkKTtcdC8vVE9ETzogVEFLRSBUSElTIE9VVCBMQVRFUlxuXG5cdHZtLnJldHVybkhvbWUgPSBmdW5jdGlvbigpIHtcblx0XHQkbG9jYXRpb24ucGF0aCgnLycpO1xuXHR9O1xufSIsImFuZ3VsYXJcbiAgICAubW9kdWxlKCdhaE51dHMnKVxuICAgIC5jb250cm9sbGVyKCdhY2NvdW50c0NvbnRyb2xsZXInLCBhY2NvdW50c0NvbnRyb2xsZXIpO1xuXG5hY2NvdW50c0NvbnRyb2xsZXIuJGluamVjdCA9IFsnJGxvZycsICckcm91dGVQYXJhbXMnLCAnJGxvY2F0aW9uJ107XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gYWNjb3VudHNDb250cm9sbGVyKCRsb2csICRyb3V0ZVBhcmFtcywgJGxvY2F0aW9uKSB7XG5cblx0Ly9kZWZpbmUgdmlldyBtb2RlbCB2YXJpYWJsZVxuXHR2YXIgdm0gPSB0aGlzO1xuXG5cdC8vZGVmaW5lIHZpZXcgbW9kZWwgdmFyaWFibGVcblx0dm0ucmVnaXN0ZXJlZFVzZXIgPSBmYWxzZTtcdC8vZGVmYXVsdCB0byBmYWxzZVxuXHR2bS5mb3Jnb3RQYXNzd29yZCA9IGZhbHNlO1x0Ly9kZWZhdWx0IHRvIGZhbHNlXG5cblx0Ly9ub3RpZnkgdXMgb2YgdGhlIGxvY2F0aW9uXG5cdCRsb2cuaW5mbygnaW4gdGhlIGFjY291bnRzIGNvbnRyb2xsZXInKTtcdC8vVE9ETzogVEFLRSBUSElTIE9VVCBMQVRFUlxuXG5cdC8vY2hlY2sgdGhlIHBhcmFtc1xuXHRmdW5jdGlvbiB1c2VyQ2hlY2sodXNlcklkKSB7XG5cblx0XHQvL2NoZWNrIHRoZSBjcmVkZW50aWFsc1xuXHRcdGlmKHVzZXJJZCA9PSAnQ3JlYXRlUHJvZmlsZScgfHwgdXNlcklkID09ICdGb3Jnb3RQYXNzd29yZCcpIHtcblxuXHRcdFx0Ly9pZiBpdCdzIGp1c3QgYSBmb3Jnb3R0ZW4gcGFzc3dvcmQgZ28gdGhlcmVcblx0XHRcdGlmKHVzZXJJZCA9PSAnRm9yZ290UGFzc3dvcmQnKSB2bS5mb3Jnb3RQYXNzd29yZCA9IHRydWU7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvL2lmIHRoZXkgYXJlIG5vdCBjcmVhdGluZyBhIG5ldyBwcm9maWxlLCBjaGVjayBjcmVkZW50aWFsc1xuXHRcdFx0dm0ucmVnaXN0ZXJlZFVzZXIgPSB0cnVlO1xuXG5cdFx0fTtcblxuXHR9O1xuXG5cdHVzZXJDaGVjaygkcm91dGVQYXJhbXMucGFyYW0pO1xufSIsImFuZ3VsYXJcbiAgICAubW9kdWxlKCdhaE51dHMnKVxuICAgIC5jb250cm9sbGVyKCdhbGxQcm9kdWN0c0NvbnRyb2xsZXInLCBhbGxQcm9kdWN0c0NvbnRyb2xsZXIpO1xuXG5hbGxQcm9kdWN0c0NvbnRyb2xsZXIuJGluamVjdCA9IFsnJGxvZycsICckcm91dGVQYXJhbXMnLCAnJGxvY2F0aW9uJywgJ3Byb2R1Y3RMaXN0J107XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gYWxsUHJvZHVjdHNDb250cm9sbGVyKCRsb2csICRyb3V0ZVBhcmFtcywgJGxvY2F0aW9uLCBwcm9kdWN0TGlzdCkge1xuXG5cdC8vZGVmaW5lIHZpZXcgbW9kZWwgdmFyaWFibGVcblx0dmFyIHZtID0gdGhpcztcblx0dm0uYWxsUHJvZHVjdHMgPSBwcm9kdWN0TGlzdDtcblx0XG5cdGlmKCRyb3V0ZVBhcmFtcy5maWx0ZXIgIT0gdW5kZWZpbmVkKSB2bS5zZWxlY3RlZFByb2R1Y3RzID0gJHJvdXRlUGFyYW1zLmZpbHRlcjtcblxuXHQvLyRsb2cuaW5mbygnaW4gdGhlIGFsbCBQcm9kdWN0cyBjb250cm9sbGVyJywgJHJvdXRlUGFyYW1zKTtcdC8vVE9ETzogVEFLRSBUSElTIE9VVCBMQVRFUlxuXHQvLyRsb2cuaW5mbygnZ290IHRoaXMgcHJkdWN0IGxpc3QnLCBwcm9kdWN0TGlzdCk7XG5cblx0Ly9zb21ldGhpbmdcblx0dm0uc2VsZWN0QVByb3VjdCA9IGZ1bmN0aW9uKHByZGN0Q29kZSkge1xuXHRcdHZhciBwYXRoID0gJy9wcm9kdWN0LycgKyBwcmRjdENvZGU7XG5cblx0XHQkbG9jYXRpb24ucGF0aChwYXRoKS5zZWFyY2goJ2ZpbHRlcicsIG51bGwpO1xuXHR9O1xuXG59IiwiYW5ndWxhclxuICAgIC5tb2R1bGUoJ2FoTnV0cycpXG4gICAgLmNvbnRyb2xsZXIoJ2NhcnRDb250cm9sbGVyJywgY2FydENvbnRyb2xsZXIpO1xuXG5jYXJ0Q29udHJvbGxlci4kaW5qZWN0ID0gWyckbG9nJywgJyRyb3V0ZVBhcmFtcycsICckbG9jYXRpb24nLCAnc2hvcHBpbmdDYXJ0J107XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gY2FydENvbnRyb2xsZXIoJGxvZywgJHJvdXRlUGFyYW1zLCAkbG9jYXRpb24sIHNob3BwaW5nQ2FydCkge1xuXG5cdC8vZGVmaW5lIHZpZXcgbW9kZWwgdmFyaWFibGVcblx0dmFyIHZtID0gdGhpcztcblx0dm0uY2FydCA9IHNob3BwaW5nQ2FydDtcblxuXHQkbG9nLmluZm8oJ2luIHRoZSBjYXJ0IGNvbnRyb2xsZXInLCB2bS5jYXJ0KTtcdC8vVE9ETzogVEFLRSBUSElTIE9VVCBMQVRFUlxuXG5cdC8vY2FsY3VsYXRlIHRoZSB0b3RhbCBjb3N0IHdoZW4gdGhlIGNvbnRyb2xsZXIgaXMgbG9hZGVkXG5cdHZtLmNhcnQuY2FsY1RvdGFsQ29zdCgpO1xuXG59IiwiYW5ndWxhclxuICAgIC5tb2R1bGUoJ2FoTnV0cycpXG4gICAgLmNvbnRyb2xsZXIoJ2NoZWNrb3V0Q29udHJvbGxlcicsIGNoZWNrb3V0Q29udHJvbGxlcik7XG5cbmNoZWNrb3V0Q29udHJvbGxlci4kaW5qZWN0ID0gWyckbG9nJywgJyRyb3V0ZVBhcmFtcycsICckbG9jYXRpb24nLCAnc3F1YXJlQ3JlZHMnLCAnc2hvcHBpbmdDYXJ0J107XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gY2hlY2tvdXRDb250cm9sbGVyKCRsb2csICRyb3V0ZVBhcmFtcywgJGxvY2F0aW9uLCBzcXVhcmVDcmVkcywgc2hvcHBpbmdDYXJ0KSB7XG5cblx0Ly9kZWZpbmUgdmlldyBtb2RlbCB2YXJpYWJsZVxuXHR2YXIgdm0gPSB0aGlzO1xuXHR2bS5jYXJ0ID0gc2hvcHBpbmdDYXJ0O1xuXHR2bS5zcXVhcmVDcmVkcyA9IHNxdWFyZUNyZWRzO1xuXG5cdCRsb2cuaW5mbygnaW4gdGhlIGNoZWNrb3V0IGNvbnRyb2xsZXInKTtcdC8vVE9ETzogVEFLRSBUSElTIE9VVCBMQVRFUlxuXG5cblx0dm0uYmFja0J0biA9IGZ1bmN0aW9uKCkgeyAkbG9jYXRpb24ucGF0aCgnL2NhcnQnKTsgfVxuXHR2bS5zdWJtaXRPcmRlciA9IGZ1bmN0aW9uKCkgeyAkbG9jYXRpb24ucGF0aCgnL29yZGVyLWNvbmZpcm1hdGlvbi8nICsgXCJURVNUSU5HXCIpOyB9XG59IiwiYW5ndWxhclxuICAgIC5tb2R1bGUoJ2FoTnV0cycpXG4gICAgLmNvbnRyb2xsZXIoJ2ludGVybmFsQWN0dHNDb250cm9sbGVyJywgaW50ZXJuYWxBY3R0c0NvbnRyb2xsZXIpO1xuXG5pbnRlcm5hbEFjdHRzQ29udHJvbGxlci4kaW5qZWN0ID0gWyckbG9nJywgJyRyb3V0ZVBhcmFtcycsICckbG9jYXRpb24nLCAnZGF0YVNlcnZpY2VzJ107XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gaW50ZXJuYWxBY3R0c0NvbnRyb2xsZXIoJGxvZywgJHJvdXRlUGFyYW1zLCAkbG9jYXRpb24sIGRhdGFTZXJ2aWNlcykge1xuXG5cdC8vZGVmaW5lIHZpZXcgbW9kZWwgdmFyaWFibGVcblx0dmFyIHZtID0gdGhpcztcblx0dmFyIGRhdGEgPSBkYXRhU2VydmljZXM7XG5cblx0Ly9ub3RpZnkgdXMgb2YgdGhlIGxvY2F0aW9uXG5cdCRsb2cuaW5mbygnaW4gdGhlIGludGVybmFsIGNvbnRyb2xsZXInKTtcdC8vVE9ETzogVEFLRSBUSElTIE9VVCBMQVRFUlxuXG5cdHZtLnN1Ym1pdCA9IGZ1bmN0aW9uKCkge1xuXHRcdGNvbnNvbGUubG9nKCdzdWJtaXR0aW5nJyk7XG5cdFx0ZGF0YS5wb3N0KCcvYXBpL3NoaWZ0RWFybmluZ3MnLCB7XCJ0ZXN0XCI6XCJ0ZXN0XCJ9KVxuXHRcdC50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG5cdFx0XHRjb25zb2xlLmxvZygnZ290IHRoaXMgcmVzcG9uc2UnLCByZXNwb25zZSk7XG5cdFx0fSk7XG5cdH1cbn1cdCIsImFuZ3VsYXJcbiAgICAubW9kdWxlKCdhaE51dHMnKVxuICAgIC5jb250cm9sbGVyKCdsYW5kaW5nQ29udHJvbGxlcicsIGxhbmRpbmdDb250cm9sbGVyKTtcblxubGFuZGluZ0NvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywnJGxvZycsICckcm91dGVQYXJhbXMnLCAnJGxvY2F0aW9uJywgJ2RhdGFTZXJ2aWNlcyddO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIGxhbmRpbmdDb250cm9sbGVyKCRzY29wZSwgJGxvZywgJHJvdXRlUGFyYW1zLCAkbG9jYXRpb24sIGRhdGFTZXJ2aWNlcykge1xuXG5cdC8vZGVmaW5lIHZpZXcgbW9kZWwgdmFyaWFibGVcblx0dmFyIHZtID0gdGhpcztcblx0dmFyIGRhdGEgPSBkYXRhU2VydmljZXM7XG5cblx0Ly8kbG9nLmluZm8oJ2luIHRoZSBsYW5kaW5nIGNvbnRyb2xsZXInKTtcdC8vVE9ETzogVEFLRSBUSElTIE9VVCBMQVRFUlxuXG5cdC8vZGVmaW5lIGxvY2FsIGZ1bmN0aW9uc1xuXG5cdC8vcnVuIHRoZSB0ZXN0XG5cblxufSIsImFuZ3VsYXJcbiAgICAubW9kdWxlKCdhaE51dHMnKVxuICAgIC5jb250cm9sbGVyKCdsb2NhdGlvbnNDb250cm9sbGVyJywgbG9jYXRpb25zQ29udHJvbGxlcik7XG5cbmxvY2F0aW9uc0NvbnRyb2xsZXIuJGluamVjdCA9IFsnJGxvZycsICckcm91dGVQYXJhbXMnLCAnJGxvY2F0aW9uJ107XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gbG9jYXRpb25zQ29udHJvbGxlcigkbG9nLCAkcm91dGVQYXJhbXMsICRsb2NhdGlvbikge1xuXG5cdC8vZGVmaW5lIHZpZXcgbW9kZWwgdmFyaWFibGVcblx0dmFyIHZtID0gdGhpcztcblxuXHQkbG9nLmluZm8oJ2luIHRoZSBsb2NhdGlvbnMgY29udHJvbGxlcicpO1x0Ly9UT0RPOiBUQUtFIFRISVMgT1VUIExBVEVSXG59IiwiYW5ndWxhclxuICAgIC5tb2R1bGUoJ2FoTnV0cycpXG4gICAgLmNvbnRyb2xsZXIoJ2xvZ2luQ29udHJvbGxlcicsIGxvZ2luQ29udHJvbGxlcik7XG5cbmxvZ2luQ29udHJvbGxlci4kaW5qZWN0ID0gWyckbG9nJywgJyRyb3V0ZVBhcmFtcycsICckbG9jYXRpb24nLCAnZGF0YVNlcnZpY2VzJ107XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gbG9naW5Db250cm9sbGVyKCRsb2csICRyb3V0ZVBhcmFtcywgJGxvY2F0aW9uLCBkYXRhU2VydmljZXMpIHtcblxuXHQvL2RlZmluZSB2aWV3IG1vZGVsIHZhcmlhYmxlXG5cdHZhciB2bSA9IHRoaXM7XG5cdHZhciBkYXRhID0gZGF0YVNlcnZpY2VzO1xuXG5cdCRsb2cuaW5mbygnaW4gdGhlIGxvZ2luIGNvbnRyb2xsZXInKTtcdC8vVE9ETzogVEFLRSBUSElTIE9VVCBMQVRFUlxuXG5cdC8vZGVmaW5lIHZpZXcgbW9kZWwgdmFyaWFibGVzXG5cdHZtLmVtYWlsID0gJyc7XG5cdHZtLnBhc3N3b3JkID0gJyc7XG5cblx0Ly9kZWZpbmUgdm0gZnVuY3Rpb25cblx0dm0ubG9naW4gPSBmdW5jdGlvbigpIHtcblxuXHRcdC8vdXBvbiBsb2dpbiwgYXJlIHRoZSBjcmVkZW50YWlscyBnb29kXG5cdFx0ZGF0YS5wb3N0KCcvYXBpL2F1dGhlbnRpY2F0ZScsIHsgZW1haWw6IHZtLmVtYWlsLCBwYXNzOiB2bS5wYXNzd29yZCB9LCcnKVxuXHRcdC50aGVuKGZ1bmN0aW9uKHRva2VuKSB7XG5cdFx0XHRcblx0XHRcdHZhciBwYXRoID0gJyMvdGVhbU1lbWJlci8nICsgdG9rZW47XG5cblx0XHRcdC8vc2hvdyB3aGF0IHJldHVybmVkXG5cdFx0XHQkbG9nLmluZm8oJ2dvdCB0aGlzIHRva2VuIGJhY2snLCBwYXRoKTtcblxuXHRcdFx0JGxvY2F0aW9uLnBhdGgoJy8nKTtcdC8vVE9ETzogV0hZIERPRVNOJ1QgVEhJUyBXT1JLP1xuXG5cdFx0fSk7XG5cdFx0XG5cdH07XG59IiwiYW5ndWxhclxuICAgIC5tb2R1bGUoJ2FoTnV0cycpXG4gICAgLmNvbnRyb2xsZXIoJ21haW5Db250cm9sbGVyJywgbWFpbkNvbnRyb2xsZXIpO1xuXG5tYWluQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCckbG9nJywgJyRyb3V0ZVBhcmFtcycsICckbG9jYXRpb24nXTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBtYWluQ29udHJvbGxlcigkc2NvcGUsICRsb2csICRyb3V0ZVBhcmFtcywgJGxvY2F0aW9uKSB7XG5cblx0Ly9kZWZpbmUgdmlldyBtb2RlbCB2YXJpYWJsZVxuXHR2YXIgdm0gPSB0aGlzO1xuXHRcblx0JHNjb3BlLnRlYW1NZW1iZXIgPSBmYWxzZTtcblxuXHQvLyRsb2cuaW5mbygnaW4gdGhlIG1haW4gY29udHJvbGxlcicpO1x0Ly9UT0RPOiBUQUtFIFRISVMgT1VUIExBVEVSXG59IiwiYW5ndWxhclxuICAgIC5tb2R1bGUoJ2FoTnV0cycpXG4gICAgLmNvbnRyb2xsZXIoJ29yZGVyQ29uZmlybWF0aW9uQ29udHJvbGxlcicsIG9yZGVyQ29uZmlybWF0aW9uQ29udHJvbGxlcik7XG5cbm9yZGVyQ29uZmlybWF0aW9uQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCckbG9nJywgJyRyb3V0ZVBhcmFtcycsICckbG9jYXRpb24nXTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBvcmRlckNvbmZpcm1hdGlvbkNvbnRyb2xsZXIoJHNjb3BlLCAkbG9nLCAkcm91dGVQYXJhbXMsICRsb2NhdGlvbikge1xuXG5cdC8vZGVmaW5lIHZpZXcgbW9kZWwgdmFyaWFibGVcblx0dmFyIHZtID0gdGhpcztcblxuXHQkbG9nLmluZm8oJ2luIHRoZSBvcmRlciBjb25maXJtYXRpb24gY29udHJvbGxlcicpO1x0Ly9UT0RPOiBUQUtFIFRISVMgT1VUIExBVEVSXG59IiwiYW5ndWxhclxuICAgIC5tb2R1bGUoJ2FoTnV0cycpXG4gICAgLmNvbnRyb2xsZXIoJ3Byb2R1Y3RHZXR0aW5nQ29udHJvbGxlcicsIHByb2R1Y3RHZXR0aW5nQ29udHJvbGxlcik7XG5cbnByb2R1Y3RHZXR0aW5nQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGxvZycsICckcm91dGVQYXJhbXMnLCAnJGxvY2F0aW9uJywgJ3Nob3BwaW5nQ2FydCcsICd1c3BzU2VydmljZXMnLCAndXNwc1VzZXJuYW1lJ107XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gcHJvZHVjdEdldHRpbmdDb250cm9sbGVyKCRzY29wZSwgJGxvZywgJHJvdXRlUGFyYW1zLCAkbG9jYXRpb24sIHNob3BwaW5nQ2FydCwgdXNwc1NlcnZpY2VzLCB1c3BzVXNlcm5hbWUpIHtcblxuXHQvL2RlZmluZSB2aWV3IG1vZGVsIHZhcmlhYmxlXG5cdHZhciB2bSA9IHRoaXM7XG5cdHZtLnByb2R1Y3QgPSAkcm91dGVQYXJhbXMuaXRlbTtcblx0dm0uY2FydCA9IHNob3BwaW5nQ2FydDtcblx0dm0udXNwcyA9IHVzcHNTZXJ2aWNlcztcblx0dm0udXNwcy5fdXNwc1VzZXJuYW1lID0gdXNwc1VzZXJuYW1lO1xuXG5cdC8vJGxvZy5pbmZvKCdpbiB0aGUgcHJvZHVjdCBnZXR0aW5nIGNvbnRyb2xsZXInLCB2bS5wcm9kdWN0KTtcdC8vVE9ETzogVEFLRSBUSElTIE9VVCBMQVRFUlxuXG5cdHZtLm9yZGVyID0gZnVuY3Rpb24oKSB7XG5cdFx0Ly9zYXZlIHRoZSBhZGRyZXNzXG5cdFx0dm0uY2FydC51cGRhdGVBcXVpc2l0aW9uTWV0aG9kKCk7XG5cblx0XHQvL1RPRE86IENIQU5HRSBUSElTIExBVEVSXG5cdFx0dm0uY2FydC5hcXVpc2l0aW9uTWV0aG9kID0gJ2RlbGl2ZXJ5JztcblxuXHRcdC8vdGhlbiByZWRpcmVjdFxuXHRcdCRsb2NhdGlvbi5wYXRoKCcvY2FydCcpO1xuXHR9O1xuXG5cdC8qXG5cdCpcdENpdHkgU3RhdGUgTG9va3VwXG5cdCpcblx0Ki9cblx0dm0uY2l0eVN0YXRlTG9va3VwID0gZnVuY3Rpb24oKSB7XG5cdFx0Ly9kZWZpbmUgbG9jYWwgdmFyaWFibGVzXG5cblx0XHR1c3BzU2VydmljZXMuY2l0eVN0YXRlTG9va3VwKHZtLmNhcnQuYXF1aXNpdGlvbkRldGFpbHMuZGVsaXZlcnlMb2NhdGlvbi56aXApXG5cdFx0LnRoZW4oZnVuY3Rpb24gc3VjY2VzcyhjaXR5U3RhdGVPYmplY3QpIHtcblxuXHRcdFx0Ly9zYXZlIHRoZSB2YWx1ZXNcblx0XHRcdHZtLmNhcnQuYXF1aXNpdGlvbkRldGFpbHMuZGVsaXZlcnlMb2NhdGlvbi5jaXR5ID0gY2l0eVN0YXRlT2JqZWN0LmNpdHk7XG5cdFx0XHR2bS5jYXJ0LmFxdWlzaXRpb25EZXRhaWxzLmRlbGl2ZXJ5TG9jYXRpb24uc3RhdGUgPSBjaXR5U3RhdGVPYmplY3Quc3RhdGU7XG5cblx0XHR9KS5jYXRjaChmdW5jdGlvbiBlcnJvcihlKSB7XG5cblx0XHRcdC8vZGlzcGxheSBhbiBlcnJvciBtZXNzYWdlXG5cdFx0XHRjb25zb2xlLmxvZygnZXJyb3I6JywgZSk7XG5cdFx0XHRcblx0XHR9KTtcblxuXHR9O1xuXG5cdHZtLnppcEdvID0gZnVuY3Rpb24odmFsdWUpIHtcblx0XG5cdFx0dm0udXNwcy5wcmljZUNhbGN1bGF0b3Ioe1xuXHRcdFx0bDogNSxcblx0XHRcdHc6IDUsXG5cdFx0XHRoOiA1LFxuXHRcdFx0emlwY29kZTogdm0uY2FydC5hcXVpc2l0aW9uRGV0YWlscy5kZWxpdmVyeUxvY2F0aW9uLnppcCxcblx0XHRcdHBvdW5kczogMSxcblx0XHRcdG91bmNlczogOCxcblx0XHRcdGNvbnRhaW5lcjogXCJWQVJJQUJMRVwiXG5cdFx0fSkudGhlbihmdW5jdGlvbiBzdWNjZXNzKHMpIHtcblx0XHRcdC8vZGVmaW5lIGxvY2FsIHZhcmlhYmxlc1xuXHRcdFx0dmFyIG9yaWdpblppcCA9ICcnO1xuXG5cdFx0XHRjb25zb2xlLmxvZygnZ290IHRoaXMgYmFjaycsIHMpO1xuXHRcdFx0XG5cdFx0XHQvL3B1bGwgb3V0IHRoZSBrZXlcblx0XHRcdE9iamVjdC5rZXlzKHMpLmZvckVhY2goZnVuY3Rpb24oc2hpcHBpbmdPcmlnaW4pIHsgIG9yaWdpblppcCA9IHNoaXBwaW5nT3JpZ2luOyB9KTtcblx0XHRcdFxuXHRcdFx0Ly9zYXZlIHRoZSBvcmlnaW4gdG8gdGhlIG1vZGVsXG5cdFx0XHR2bS5jYXJ0LmFxdWlzaXRpb25EZXRhaWxzLmRlbGl2ZXJ5TWV0aG9kLnNoaXBwaW5nT3JpZ2luID0gb3JpZ2luWmlwO1xuXG5cdFx0XHQvL3NhdmUgdGhlIHNlcnZpY2VzIHRvIHBhc3MgdGhyb3VnaCB0byB0aGUgbW9kZWxcblx0XHRcdHZtLnVzcHNPcHRpb25zID0gc1tvcmlnaW5aaXBdLnNlcnZpY2VzO1xuXG5cdFx0XHQvL2FwcGx5IHRoZSBuZXcgZGF0YVxuXHRcdFx0JHNjb3BlLiRhcHBseSgpO1xuXG5cdFx0fSkuY2F0Y2goZnVuY3Rpb24gZXJyb3IoZSkge1xuXHRcdFx0Y29uc29sZS5sb2coJ2Vycm9yJywgZSk7XG5cdFx0fSk7XG5cblx0fTtcblxufSIsImFuZ3VsYXJcbiAgICAubW9kdWxlKCdhaE51dHMnKVxuICAgIC5jb250cm9sbGVyKCdyZWdpc3RlckFjY3RDb250cm9sbGVyJywgcmVnaXN0ZXJBY2N0Q29udHJvbGxlcik7XG5cbnJlZ2lzdGVyQWNjdENvbnRyb2xsZXIuJGluamVjdCA9IFsnJGxvZycsICckcm91dGVQYXJhbXMnLCAnJGxvY2F0aW9uJ107XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gcmVnaXN0ZXJBY2N0Q29udHJvbGxlcigkbG9nLCAkcm91dGVQYXJhbXMsICRsb2NhdGlvbikge1xuXG5cdC8vZGVmaW5lIHZpZXcgbW9kZWwgdmFyaWFibGVcblx0dmFyIHZtID0gdGhpcztcblxuXHRjb25zb2xlLmxvZygnaW4gdGhlIHJlZ2lzdGVyQWNjdENvbnRyb2xsZXIgJyk7XG5cbn0iLCIvKiBhaEhlYWRlci5kaXJlY3RpdmUuanMgKi9cblxuLyoqXG4qIEBkZXNjIHRvb2xiYXIgZGlyZWN0aXZlIHRoYXQgaXMgdXNlZCBvbiB0aGUgbWFpbiBwYWdlIGFjcm9zcyB0aGUgZW50aXJlIGFwcC5cbiogQGV4YW1wbGUgPGRpdiBhaC1oZWFkZXI+PC9kaXY+XG4qL1xuXG5hbmd1bGFyXG5cdC5tb2R1bGUoJ2FoTnV0cycpXG5cdC5kaXJlY3RpdmUoJ2FoSGVhZGVyJywgYWhIZWFkZXIpO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIGFoSGVhZGVyKCkge1xuXHR2YXIgZGlyZWN0aXZlID0ge1xuXHRcdHJlc3RyaWN0OiAnQUVDTScsXG5cdFx0dGVtcGxhdGVVcmw6ICd2aWV3cy9kaXJlY3RpdmVzL2FoLmhlYWRlci5kaXJlY3RpdmUuaHRtJyxcblx0XHRyZXBsYWNlOiB0cnVlLFxuXHRcdHNjb3BlOiB7fSxcblx0XHRsaW5rOiBsaW5rRnVuYyxcblx0XHRjb250cm9sbGVyOiBhaEhlYWRlckNvbnRyb2xsZXIsXG5cdFx0Y29udHJvbGxlckFzOiAndm0nLFxuXHRcdGJpbmRUb0NvbnRyb2xsZXI6IHRydWVcblx0fVxuXG5cdC8qIEBuZ0luamVjdCAqL1xuXHRmdW5jdGlvbiBsaW5rRnVuYyhzY29wZSwgZWwsIGF0dHIsIGN0cmwpIHtcbiAgICB9XG5cbiAgICBhaEhlYWRlckNvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyRsb2cnLCAnJGxvY2F0aW9uJywgJ3Nob3BwaW5nQ2FydCddO1xuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIGFoSGVhZGVyQ29udHJvbGxlcigkc2NvcGUsICRsb2csICRsb2NhdGlvbiwgc2hvcHBpbmdDYXJ0KSB7XG5cdCAgICB2YXIgdm0gPSB0aGlzO1xuXHQgICAgdm0uY2FydCA9IHNob3BwaW5nQ2FydDtcblxuXHQgICAgLy8kbG9nLmluZm8oJ2luIHRoZSBoZWFkZXIgZGlyZWN0aXZlJyk7XG5cblx0ICAgIC8vZGVmaW5lIHZpZXdtb2RlbCBmdW5jdGlvbnNcblx0ICAgIHZtLm5hdmJudCA9IGZ1bmN0aW9uKGJ1dHRvbikge1xuXG5cdCAgICBcdC8vdGVsbCB1cyB3aGljaCBidXR0b24gd2FzIGNsaWNrZWRcblx0ICAgIFx0JGxvZy5pbmZvKCdjbGlja2VkJywgYnV0dG9uKTtcblxuXHQgICAgXHQvL3RoZW4gcmVkaXJlY3QgdGhlcmUsIGlmIG5vdCB0aGUgbWVudSBidXR0b25cblx0ICAgIFx0aWYoYnV0dG9uICE9ICdtZW51Jykge1xuXHQgICAgXHRcdFxuXHQgICAgXHRcdCRsb2NhdGlvbi5wYXRoKCcvJyArIGJ1dHRvbik7XG5cdCAgICBcdH07XG5cdCAgICBcdFxuXHQgICAgfTtcblxuXHR9XG5cblx0cmV0dXJuICBkaXJlY3RpdmU7XG59IiwiLyogYWhGb290ZXIuZGlyZWN0aXZlLmpzICovXG5cbi8qKlxuKiBAZGVzYyB0b29sYmFyIGRpcmVjdGl2ZSB0aGF0IGlzIHVzZWQgb24gdGhlIG1haW4gcGFnZSBhY3Jvc3MgdGhlIGVudGlyZSBhcHAuXG4qIEBleGFtcGxlIDxkaXYgYWgtZm9vdGVyPjwvZGl2PlxuKi9cblxuYW5ndWxhclxuXHQubW9kdWxlKCdhaE51dHMnKVxuXHQuZGlyZWN0aXZlKCdhaEZvb3RlcicsIGFoRm9vdGVyKTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBhaEZvb3RlcigpIHtcblx0dmFyIGRpcmVjdGl2ZSA9IHtcblx0XHRyZXN0cmljdDogJ0FFQ00nLFxuXHRcdHRlbXBsYXRlVXJsOiAndmlld3MvZGlyZWN0aXZlcy9haC5mb290ZXIuZGlyZWN0aXZlLmh0bScsXG5cdFx0cmVwbGFjZTogdHJ1ZSxcblx0XHRzY29wZToge30sXG5cdFx0bGluazogbGlua0Z1bmMsXG5cdFx0Y29udHJvbGxlcjogYWhGb290ZXJDb250cm9sbGVyLFxuXHRcdGNvbnRyb2xsZXJBczogJ3ZtJyxcblx0XHRiaW5kVG9Db250cm9sbGVyOiB0cnVlXG5cdH1cblxuXHQvKiBAbmdJbmplY3QgKi9cblx0ZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsLCBhdHRyLCBjdHJsKSB7XG4gICAgfVxuXG4gICAgYWhGb290ZXJDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsICckbG9nJ107XG4gICAgLyogQG5nSW5qZWN0ICovXG4gICAgZnVuY3Rpb24gYWhGb290ZXJDb250cm9sbGVyKCRzY29wZSwgJGxvZykge1xuXHQgICAgdmFyIHZtID0gdGhpcztcblxuXHQgICAgLy8kbG9nLmluZm8oJ2luIHRoZSBoZWFkZXIgZGlyZWN0aXZlJyk7XG5cblx0fVxuXG5cdHJldHVybiAgZGlyZWN0aXZlO1xufSIsIi8qIGNhcnRJdGVtc0xpc3QuZGlyZWN0aXZlLmpzICovXG5cbi8qKlxuKiBAZGVzYyB0b29sYmFyIGRpcmVjdGl2ZSB0aGF0IGlzIHVzZWQgb24gdGhlIG1haW4gcGFnZSBhY3Jvc3MgdGhlIGVudGlyZSBhcHAuXG4qIEBleGFtcGxlIDxkaXYgY2FydC1pdGVtcy1saXN0PjwvZGl2PlxuKi9cblxuYW5ndWxhclxuXHQubW9kdWxlKCdhaE51dHMnKVxuXHQuZGlyZWN0aXZlKCdjYXJ0SXRlbXNMaXN0JywgY2FydEl0ZW1zTGlzdCk7XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gY2FydEl0ZW1zTGlzdCgpIHtcblx0dmFyIGRpcmVjdGl2ZSA9IHtcblx0XHRyZXN0cmljdDogJ0FFQ00nLFxuXHRcdHRlbXBsYXRlVXJsOiAndmlld3MvZGlyZWN0aXZlcy9jYXJ0SXRlbXNMaXN0LmRpcmVjdGl2ZS5odG0nLFxuXHRcdHJlcGxhY2U6IHRydWUsXG5cdFx0c2NvcGU6IHtcblx0XHRcdGNhcnRJdGVtczogJz0nXG5cdFx0fSxcblx0XHRsaW5rOiBsaW5rRnVuYyxcblx0XHRjb250cm9sbGVyOiBjYXJ0SXRlbXNMaXN0Q29udHJvbGxlcixcblx0XHRjb250cm9sbGVyQXM6ICd2bScsXG5cdFx0YmluZFRvQ29udHJvbGxlcjogdHJ1ZVxuXHR9XG5cblx0LyogQG5nSW5qZWN0ICovXG5cdGZ1bmN0aW9uIGxpbmtGdW5jKHNjb3BlLCBlbCwgYXR0ciwgY3RybCkge1xuICAgIH1cblxuICAgIGNhcnRJdGVtc0xpc3RDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsICckbG9nJywgJ3Nob3BwaW5nQ2FydCddO1xuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIGNhcnRJdGVtc0xpc3RDb250cm9sbGVyKCRzY29wZSwgJGxvZywgc2hvcHBpbmdDYXJ0KSB7XG5cdCAgICB2YXIgdm0gPSB0aGlzO1xuXHQgICAgdmFyIGNhcnQgPSBzaG9wcGluZ0NhcnQ7XG5cblx0ICAgICRsb2cuaW5mbygnaW4gdGhlIGNhcnRJdGVtc0xpc3RDb250cm9sbGVyIGRpcmVjdGl2ZScsIHZtLmNhcnRJdGVtcyk7XG5cblx0ICAgIHZtLnJlbW92ZUl0ZW0gPSBmdW5jdGlvbihpdGVtSWQpIHtcblx0ICAgIFx0Y29uc29sZS5sb2coJ3JlbW92aW5nIGl0ZW1JZCcsIGl0ZW1JZCk7XG5cblx0ICAgIFx0Ly9yZW1vdmUgdGhlIGl0ZW0gZnJvbSB0aGUgY2FydFxuXHQgICAgXHRjYXJ0LnJlbW92ZUl0ZW0oaXRlbUlkKTtcblx0ICAgIH07XG5cblx0ICAgIHZtLnVwZGF0ZVF0eSA9IGZ1bmN0aW9uKGl0ZW1JZCwgcXR5KSB7XG5cdCAgICBcdFxuXHQgICAgXHQvL3VwZGF0ZSB0aGUgaXRlbSBxdHlcblx0ICAgIFx0Y2FydC51cGRhdGVJdGVtUXR5KGl0ZW1JZCwgcXR5KTtcblx0ICAgIH1cblxuXHR9XG5cblx0cmV0dXJuICBkaXJlY3RpdmU7XG59IiwiLyogY2FydE5hdmlnYXRpb24uZGlyZWN0aXZlLmpzICovXG5cbi8qKlxuKiBAZGVzYyB0b29sYmFyIGRpcmVjdGl2ZSB0aGF0IGlzIHVzZWQgb24gdGhlIG1haW4gcGFnZSBhY3Jvc3MgdGhlIGVudGlyZSBhcHAuXG4qIEBleGFtcGxlIDxkaXYgY2FydC1uYXZpZ2F0aW9uPjwvZGl2PlxuKi9cblxuYW5ndWxhclxuXHQubW9kdWxlKCdhaE51dHMnKVxuXHQuZGlyZWN0aXZlKCdjYXJ0TmF2aWdhdGlvbicsIGNhcnROYXZpZ2F0aW9uKTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBjYXJ0TmF2aWdhdGlvbigpIHtcblx0dmFyIGRpcmVjdGl2ZSA9IHtcblx0XHRyZXN0cmljdDogJ0FFQ00nLFxuXHRcdHRlbXBsYXRlVXJsOiAndmlld3MvZGlyZWN0aXZlcy9jYXJ0TmF2aWdhdGlvbi5kaXJlY3RpdmUuaHRtJyxcblx0XHRyZXBsYWNlOiB0cnVlLFxuXHRcdHNjb3BlOiB7fSxcblx0XHRsaW5rOiBsaW5rRnVuYyxcblx0XHRjb250cm9sbGVyOiBjYXJ0TmF2aWdhdGlvbkNvbnRyb2xsZXIsXG5cdFx0Y29udHJvbGxlckFzOiAndm0nLFxuXHRcdGJpbmRUb0NvbnRyb2xsZXI6IHRydWVcblx0fVxuXG5cdC8qIEBuZ0luamVjdCAqL1xuXHRmdW5jdGlvbiBsaW5rRnVuYyhzY29wZSwgZWwsIGF0dHIsIGN0cmwpIHtcbiAgICB9XG5cbiAgICBjYXJ0TmF2aWdhdGlvbkNvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyRsb2cnLCAnJGxvY2F0aW9uJ107XG4gICAgLyogQG5nSW5qZWN0ICovXG4gICAgZnVuY3Rpb24gY2FydE5hdmlnYXRpb25Db250cm9sbGVyKCRzY29wZSwgJGxvZywgJGxvY2F0aW9uKSB7XG5cdCAgICB2YXIgdm0gPSB0aGlzO1xuXG5cdCAgICAkbG9nLmluZm8oJ2luIHRoZSBjYXJ0IG5hdmlnYXRpb24gZGlyZWN0aXZlJyk7XG5cblx0ICAgIHZtLnNob3BNb3JlID0gZnVuY3Rpb24oKSB7XG5cdCAgICBcdCRsb2NhdGlvbi5wYXRoKCcvYWxsLXByb2R1Y3RzJyk7XG5cdCAgICB9XG5cdCAgICB2bS5jaGVja291dCA9IGZ1bmN0aW9uKCkge1xuXHQgICAgXHQkbG9jYXRpb24ucGF0aCgnL2NoZWNrb3V0Jyk7XG5cdCAgICB9XG5cdH1cblxuXHRyZXR1cm4gIGRpcmVjdGl2ZTtcbn0iLCIvKiBjYXJ0U3VtbWFyeS5kaXJlY3RpdmUuanMgKi9cblxuLyoqXG4qIEBkZXNjIHRvb2xiYXIgZGlyZWN0aXZlIHRoYXQgaXMgdXNlZCBvbiB0aGUgbWFpbiBwYWdlIGFjcm9zcyB0aGUgZW50aXJlIGFwcC5cbiogQGV4YW1wbGUgPGRpdiBjYXJ0LXN1bW1hcnk+PC9kaXY+XG4qL1xuXG5hbmd1bGFyXG5cdC5tb2R1bGUoJ2FoTnV0cycpXG5cdC5kaXJlY3RpdmUoJ2NhcnRTdW1tYXJ5JywgY2FydFN1bW1hcnkpO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIGNhcnRTdW1tYXJ5KCkge1xuXHR2YXIgZGlyZWN0aXZlID0ge1xuXHRcdHJlc3RyaWN0OiAnQUVDTScsXG5cdFx0dGVtcGxhdGVVcmw6ICd2aWV3cy9kaXJlY3RpdmVzL2NhcnRTdW1tYXJ5LmRpcmVjdGl2ZS5odG0nLFxuXHRcdHJlcGxhY2U6IHRydWUsXG5cdFx0c2NvcGU6IHtcblx0XHRcdG5vSXRlbXM6IFwiPVwiLFxuXHRcdFx0c3VidG90YWw6IFwiPVwiXG5cdFx0fSxcblx0XHRsaW5rOiBsaW5rRnVuYyxcblx0XHRjb250cm9sbGVyOiBjYXJ0U3VtbWFyeUNvbnRyb2xsZXIsXG5cdFx0Y29udHJvbGxlckFzOiAndm0nLFxuXHRcdGJpbmRUb0NvbnRyb2xsZXI6IHRydWVcblx0fVxuXG5cdC8qIEBuZ0luamVjdCAqL1xuXHRmdW5jdGlvbiBsaW5rRnVuYyhzY29wZSwgZWwsIGF0dHIsIGN0cmwpIHtcbiAgICB9XG5cbiAgICBjYXJ0U3VtbWFyeUNvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyRsb2cnXTtcbiAgICAvKiBAbmdJbmplY3QgKi9cbiAgICBmdW5jdGlvbiBjYXJ0U3VtbWFyeUNvbnRyb2xsZXIoJHNjb3BlLCAkbG9nKSB7XG5cdCAgICB2YXIgdm0gPSB0aGlzO1xuXG5cdCAgICAkbG9nLmluZm8oJ2luIHRoZSBjYXJ0IHN1bW1hcnkgZGlyZWN0aXZlJyk7XG5cblx0fVxuXG5cdHJldHVybiAgZGlyZWN0aXZlO1xufSIsIi8qIGNoZWNrb3V0QmlsbGluZy5kaXJlY3RpdmUuanMgKi9cblxuLyoqXG4qIEBkZXNjIHRvb2xiYXIgZGlyZWN0aXZlIHRoYXQgaXMgdXNlZCBvbiB0aGUgbWFpbiBwYWdlIGFjcm9zcyB0aGUgZW50aXJlIGFwcC5cbiogQGV4YW1wbGUgPGRpdiBjaGVja291dC1iaWxsaW5nPjwvZGl2PlxuKi9cblxuYW5ndWxhclxuXHQubW9kdWxlKCdhaE51dHMnKVxuXHQuZGlyZWN0aXZlKCdjaGVja291dEJpbGxpbmcnLCBjaGVja291dEJpbGxpbmcpO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIGNoZWNrb3V0QmlsbGluZygpIHtcblx0dmFyIGRpcmVjdGl2ZSA9IHtcblx0XHRyZXN0cmljdDogJ0FFQ00nLFxuXHRcdHRlbXBsYXRlVXJsOiAndmlld3MvZGlyZWN0aXZlcy9jaGVja291dEJpbGxpbmcuZGlyZWN0aXZlLmh0bScsXG5cdFx0cmVwbGFjZTogdHJ1ZSxcblx0XHRzY29wZToge1xuXHRcdFx0YXF1RGV0OiAnPScsXG5cdFx0XHRwYXlEZXQ6ICc9J1xuXHRcdH0sXG5cdFx0bGluazogbGlua0Z1bmMsXG5cdFx0Y29udHJvbGxlcjogY2hlY2tvdXRCaWxsaW5nQ29udHJvbGxlcixcblx0XHRjb250cm9sbGVyQXM6ICd2bScsXG5cdFx0YmluZFRvQ29udHJvbGxlcjogdHJ1ZVxuXHR9XG5cblx0LyogQG5nSW5qZWN0ICovXG5cdGZ1bmN0aW9uIGxpbmtGdW5jKHNjb3BlLCBlbCwgYXR0ciwgY3RybCkge1xuICAgIH1cblxuICAgIGNoZWNrb3V0QmlsbGluZ0NvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyRsb2cnXTtcbiAgICAvKiBAbmdJbmplY3QgKi9cbiAgICBmdW5jdGlvbiBjaGVja291dEJpbGxpbmdDb250cm9sbGVyKCRzY29wZSwgJGxvZykge1xuXHQgICAgdmFyIHZtID0gdGhpcztcblx0ICAgIHZtLnBheURldCA9IHtcblx0ICAgIFx0bmFtZToge1xuXHQgICAgXHRcdGZpcnN0OiBcIlwiLFxuXHQgICAgXHRcdGxhc3Q6IFwiXCJcblx0ICAgIFx0fSxcblx0ICAgIFx0c3RyZWV0MTogXCJcIixcblx0ICAgIFx0c3RyZWV0MjogXCJcIixcblx0ICAgIFx0c3RyZWV0MzogXCJcIixcblx0ICAgIFx0Y2l0eTogXCJcIixcblx0ICAgIFx0c3RhdGU6IFwiXCIsXG5cdCAgICBcdHppcDogXCJcIixcblx0ICAgIFx0cGhvbmU6IFwiXCIsXG5cdCAgICBcdHBvOiBcIlwiLFxuXHQgICAgXHRlbWFpbDogXCJcIlxuXHQgICAgfTtcblxuXHQgICAgJGxvZy5pbmZvKCdpbiB0aGUgY2hlY2tvdXRCaWxsaW5nIGRpcmVjdGl2ZScsIHZtLmFxdURldCwgdm0ucGF5RGV0KTtcblxuXHQgICAgdm0uY29weURlbEFkZCA9IGZ1bmN0aW9uKCkge1xuXHQgICAgXHQvL2NvcHkgZGV0YWlscyB3aWxsIGNvcHkgZGV0YWlsc1xuXHQgICAgXHR2bS5wYXlEZXQubmFtZS5maXJzdCA9IHZtLmFxdURldC5kZWxpdmVyeUxvY2F0aW9uLnJlY2VpdmVyLmZpcnN0O1xuXHQgICAgXHR2bS5wYXlEZXQubmFtZS5sYXN0ID0gdm0uYXF1RGV0LmRlbGl2ZXJ5TG9jYXRpb24ucmVjZWl2ZXIubGFzdDtcblx0ICAgIFx0dm0ucGF5RGV0LnN0cmVldDEgPSB2bS5hcXVEZXQuZGVsaXZlcnlMb2NhdGlvbi5zdHJlZXQxO1xuXHQgICAgXHR2bS5wYXlEZXQuc3RyZWV0MiA9IHZtLmFxdURldC5kZWxpdmVyeUxvY2F0aW9uLnN0cmVldDI7XG5cdCAgICBcdHZtLnBheURldC5zdHJlZXQzID0gdm0uYXF1RGV0LmRlbGl2ZXJ5TG9jYXRpb24uc3RyZWV0Mztcblx0ICAgIFx0dm0ucGF5RGV0LmNpdHkgPSB2bS5hcXVEZXQuZGVsaXZlcnlMb2NhdGlvbi5jaXR5O1xuXHQgICAgXHR2bS5wYXlEZXQuc3RhdGUgPSB2bS5hcXVEZXQuZGVsaXZlcnlMb2NhdGlvbi5zdGF0ZTtcblx0ICAgIFx0dm0ucGF5RGV0LnppcCA9IHZtLmFxdURldC5kZWxpdmVyeUxvY2F0aW9uLnppcDtcblx0ICAgIH07XG5cblx0fVxuXG5cdHJldHVybiAgZGlyZWN0aXZlO1xufSIsIi8qIGNoZWNrb3V0Rm9sbG93dXAuZGlyZWN0aXZlLmpzICovXG5cbi8qKlxuKiBAZGVzYyB0b29sYmFyIGRpcmVjdGl2ZSB0aGF0IGlzIHVzZWQgb24gdGhlIG1haW4gcGFnZSBhY3Jvc3MgdGhlIGVudGlyZSBhcHAuXG4qIEBleGFtcGxlIDxkaXYgY2hlY2tvdXQtZm9sbG93dXA+PC9kaXY+XG4qL1xuXG5hbmd1bGFyXG5cdC5tb2R1bGUoJ2FoTnV0cycpXG5cdC5kaXJlY3RpdmUoJ2NoZWNrb3V0Rm9sbG93dXAnLCBjaGVja291dEZvbGxvd3VwKTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBjaGVja291dEZvbGxvd3VwKCkge1xuXHR2YXIgZGlyZWN0aXZlID0ge1xuXHRcdHJlc3RyaWN0OiAnQUVDTScsXG5cdFx0dGVtcGxhdGVVcmw6ICd2aWV3cy9kaXJlY3RpdmVzL2NoZWNrb3V0Rm9sbG93dXAuZGlyZWN0aXZlLmh0bScsXG5cdFx0cmVwbGFjZTogdHJ1ZSxcblx0XHRzY29wZToge30sXG5cdFx0bGluazogbGlua0Z1bmMsXG5cdFx0Y29udHJvbGxlcjogY2hlY2tvdXRGb2xsb3d1cENvbnRyb2xsZXIsXG5cdFx0Y29udHJvbGxlckFzOiAndm0nLFxuXHRcdGJpbmRUb0NvbnRyb2xsZXI6IHRydWVcblx0fVxuXG5cdC8qIEBuZ0luamVjdCAqL1xuXHRmdW5jdGlvbiBsaW5rRnVuYyhzY29wZSwgZWwsIGF0dHIsIGN0cmwpIHtcbiAgICB9XG5cbiAgICBjaGVja291dEZvbGxvd3VwQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGxvZyddO1xuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIGNoZWNrb3V0Rm9sbG93dXBDb250cm9sbGVyKCRzY29wZSwgJGxvZykge1xuXHQgICAgdmFyIHZtID0gdGhpcztcblxuXHQgICAgJGxvZy5pbmZvKCdpbiB0aGUgY2hlY2tvdXRGb2xsb3d1cENvbnRyb2xsZXIgZGlyZWN0aXZlJyk7XG5cblx0fVxuXG5cdHJldHVybiAgZGlyZWN0aXZlO1xufSIsIi8qIGNoZWNrb3V0UGF5bWVudC5kaXJlY3RpdmUuanMgKi9cblxuLyoqXG4qIEBkZXNjIHRvb2xiYXIgZGlyZWN0aXZlIHRoYXQgaXMgdXNlZCBvbiB0aGUgbWFpbiBwYWdlIGFjcm9zcyB0aGUgZW50aXJlIGFwcC5cbiogQGV4YW1wbGUgPGRpdiBjaGVja291dC1wYXltZW50PjwvZGl2PlxuKi9cblxuYW5ndWxhclxuXHQubW9kdWxlKCdhaE51dHMnKVxuXHQuZGlyZWN0aXZlKCdjaGVja291dFBheW1lbnQnLCBjaGVja291dFBheW1lbnQpO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIGNoZWNrb3V0UGF5bWVudCgpIHtcblx0dmFyIGRpcmVjdGl2ZSA9IHtcblx0XHRyZXN0cmljdDogJ0FFQ00nLFxuXHRcdHRlbXBsYXRlVXJsOiAndmlld3MvZGlyZWN0aXZlcy9jaGVja291dFBheW1lbnQuZGlyZWN0aXZlLmh0bScsXG5cdFx0cmVwbGFjZTogdHJ1ZSxcblx0XHRzY29wZToge1xuXHRcdFx0c3F1YXJlQ3JlZHM6ICc9J1xuXHRcdH0sXG5cdFx0bGluazogbGlua0Z1bmMsXG5cdFx0Y29udHJvbGxlcjogY2hlY2tvdXRQYXltZW50Q29udHJvbGxlcixcblx0XHRjb250cm9sbGVyQXM6ICd2bScsXG5cdFx0YmluZFRvQ29udHJvbGxlcjogdHJ1ZVxuXHR9XG5cblx0LyogQG5nSW5qZWN0ICovXG5cdGZ1bmN0aW9uIGxpbmtGdW5jKHNjb3BlLCBlbCwgYXR0ciwgY3RybCkge1xuICAgIH1cblxuICAgIGNoZWNrb3V0UGF5bWVudENvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyRsb2cnLCAnZGF0YVNlcnZpY2VzJ107XG4gICAgLyogQG5nSW5qZWN0ICovXG4gICAgZnVuY3Rpb24gY2hlY2tvdXRQYXltZW50Q29udHJvbGxlcigkc2NvcGUsICRsb2csIGRhdGFTZXJ2aWNlcykge1xuXHQgICAgdmFyIHZtID0gdGhpcztcblx0ICAgIHZtLmRhdGEgPSBkYXRhU2VydmljZXM7XG5cblx0ICAgIHZhciBhcHBsaWNhdGlvbklkID0gJ1JFUExBQ0VfTUUnOyAvLyA8LS0gQWRkIHlvdXIgYXBwbGljYXRpb24ncyBJRCBoZXJlXG5cdFx0dmFyIGxvY2F0aW9uSWQgPSAnUkVQTEFDRV9NRSc7ICAgIC8vIDwtLSBGb3IgQXBwbGUgUGF5LCBzZXQgeW91ciBsb2NhdGlvbiBJRCBoZXJlXG5cblx0XHQvLyBNYWtlIHN1cmUgdGhlIGFwcGxpY2F0aW9uIElEIGlzIHNldCBiZWZvcmUgY29udGludWluZy5cblx0XHQvLyBOb3RlOiBjaGVja2luZyBsb2NhdGlvbklkIGlmIHVzaW5nIEFwcGxlIFBheS5cblx0XHRpZiAoYXBwbGljYXRpb25JZCA9PSAnJykge1xuXHRcdCAgYWxlcnQoJ1lvdSBuZWVkIHRvIHByb3ZpZGUgYSB2YWx1ZSBmb3IgdGhlIGFwcGxpY2F0aW9uSWQgdmFyaWFibGUuJyk7XG5cdFx0fVxuXHQgICAgJGxvZy5pbmZvKCdpbiB0aGUgY2hlY2tvdXRQYXltZW50IGRpcmVjdGl2ZScpO1xuXG5cdCAgICB2YXIgcGF5bWVudEZvcm0gPSBuZXcgU3FQYXltZW50Rm9ybSh7XG5cdFx0ICAgIGFwcGxpY2F0aW9uSWQ6IGFwcGxpY2F0aW9uSWQsXG5cdFx0ICAgIGxvY2F0aW9uSWQ6IGxvY2F0aW9uSWQsXG5cdFx0ICAgIGlucHV0Q2xhc3M6ICdzcS1pbnB1dCcsXG5cdFx0ICAgIGlucHV0U3R5bGVzOiBbXG5cdFx0ICAgICAge1xuXHRcdCAgICAgICAgZm9udFNpemU6ICcxNXB4J1xuXHRcdCAgICAgIH1cblx0XHQgICAgXSxcblx0XHQgICAgLy8gVXNlZCBmb3IgY3JlZGl0IGNhcmQgcGF5bWVudHNcblx0XHQgICAgY2FyZE51bWJlcjoge1xuXHRcdCAgICAgIGVsZW1lbnRJZDogJ3NxLWNhcmQtbnVtYmVyJyxcblx0XHQgICAgICBwbGFjZWhvbGRlcjogJ+KAouKAouKAouKAoiDigKLigKLigKLigKIg4oCi4oCi4oCi4oCiIOKAouKAouKAouKAoidcblx0XHQgICAgfSxcblx0XHQgICAgY3Z2OiB7XG5cdFx0ICAgICAgZWxlbWVudElkOiAnc3EtY3Z2Jyxcblx0XHQgICAgICBwbGFjZWhvbGRlcjogJ0NWVidcblx0XHQgICAgfSxcblx0XHQgICAgZXhwaXJhdGlvbkRhdGU6IHtcblx0XHQgICAgICBlbGVtZW50SWQ6ICdzcS1leHBpcmF0aW9uLWRhdGUnLFxuXHRcdCAgICAgIHBsYWNlaG9sZGVyOiAnTU0vWVknXG5cdFx0ICAgIH0sXG5cdFx0ICAgIHBvc3RhbENvZGU6IHtcblx0XHQgICAgICBlbGVtZW50SWQ6ICdzcS1wb3N0YWwtY29kZSdcblx0XHQgICAgfSxcblx0XHQgICAgLy8gVXNlZCBmb3IgV2ViIEFwcGxlIFBheSBwYXltZW50c1xuXHRcdCAgICBhcHBsZVBheToge1xuXHRcdCAgICAgICAgZWxlbWVudElkOiAnc3EtYXBwbGUtcGF5J1xuXHRcdCAgICB9LFxuXHRcdCAgICAvLyBQYXltZW50IGZvcm0gY2FsbGJhY2sgZnVuY3Rpb25zXG5cdFx0ICAgIGNhbGxiYWNrczoge1xuXG5cdFx0ICAgICAgLy8gQ3JlZGl0IGNhcmQgcGF5bWVudHMgYXJlIGFsd2F5cyBzdXBwb3J0ZWQsIGJ1dCB0aGUgV2ViIEFwcGxlIFBheVxuXHRcdCAgICAgIC8vIGJ1dHRvbiBzaG91bGQgb25seSBkaXNwbGF5IGlmIEFwcGxlIFBheSBpcyBzdXBwb3J0ZWQgZm9yIHRoaXNcblx0XHQgICAgICAvLyBkb21haW4uIEFwcGxlIFBheSBzdXBwb3J0IGlzIGRldGVybWluZWQgYnkgdGhlIFNxUGF5bWVudEZvcm0gbGlicmFyeVxuXHRcdCAgICAgIC8vIHdoZW4gdGhlIHBhZ2UgbG9hZHMuIFlvdSBkbyBub3QgbmVlZCB0byBtb2RpZnkgdGhpcyBmdW5jdGlvbi5cblx0XHQgICAgICBtZXRob2RzU3VwcG9ydGVkOiBmdW5jdGlvbiAobWV0aG9kcykge1xuXHRcdCAgICAgICAgICBpZiAobWV0aG9kcy5hcHBsZVBheSA9PT0gdHJ1ZSkge1xuXHRcdCAgICAgICAgICAgICAgLy8gU2hvdyBhcHBsZSBwYXkgYnV0dG9uXG5cdFx0ICAgICAgICAgICAgICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzcS1hcHBsZS1wYXknKTtcblx0XHQgICAgICAgICAgICAgIGVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdpbmxpbmUtYmxvY2snO1xuXHRcdCAgICAgICAgICB9XG5cdFx0ICAgICAgfSxcblxuXHRcdCAgICAgIC8vIGNyZWF0ZVBheW1lbnRSZXF1ZXN0IGlzIHRyaWdnZXJlZCB3aGVuIHRoZSBBcHBsZSBQYXkgYnV0dG9uIGlzXG5cdFx0ICAgICAgLy8gY2xpY2tlZC4gVGhlIHBheW1lbnQgcmVxdWVzdCBvYmplY3QgaXMgdXNlZCBieSBkaWdpdGFsIHdhbGxldHNcblx0XHQgICAgICAvLyAobGlrZSBBcHBsZSBQYXkpIHRvIGNyZWF0ZSB0aGVpciBlcXVpdmFsZW50IG9mIGEgY3JlZGl0IGNhcmQgbm9uY2UuXG5cdFx0ICAgICAgLy8gTk9URTogVGhlIHBheW1lbnQgcmVxdWVzdCBiZWxvdyBpcyBwcm92aWRlZCBhcyBndWlkYW5jZS4gWW91IHNob3VsZFxuXHRcdCAgICAgIC8vIGFkZCBjb2RlIHRvIGNyZWF0ZSB0aGUgb2JqZWN0IHByb2dyYW1tYXRpY2FsbHkuXG5cdFx0ICAgICAgY3JlYXRlUGF5bWVudFJlcXVlc3Q6IGZ1bmN0aW9uICgpIHtcblx0XHQgICAgICAgICAgcmV0dXJuIHtcblx0XHQgICAgICAgICAgICAgIHJlcXVlc3RTaGlwcGluZ0FkZHJlc3M6IHRydWUsXG5cdFx0ICAgICAgICAgICAgICBjdXJyZW5jeUNvZGU6IFwiVVNEXCIsXG5cdFx0ICAgICAgICAgICAgICBjb3VudHJ5Q29kZTogXCJVU1wiLFxuXHRcdCAgICAgICAgICAgICAgdG90YWw6IHtcblx0XHQgICAgICAgICAgICAgICAgICBsYWJlbDogXCJ7eyBNRVJDSEFOVCBOQU1FIH19XCIsXG5cdFx0ICAgICAgICAgICAgICAgICAgYW1vdW50OiBcInt7VE9UQUwgQU1PVU5UfX1cIixcblx0XHQgICAgICAgICAgICAgICAgICBwZW5kaW5nOiBmYWxzZSxcblx0XHQgICAgICAgICAgICAgIH0sXG5cdFx0ICAgICAgICAgICAgICBsaW5lSXRlbXM6IFtcblx0XHQgICAgICAgICAgICAgICAgICB7XG5cdFx0ICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiBcIlN1YnRvdGFsXCIsXG5cdFx0ICAgICAgICAgICAgICAgICAgICAgIGFtb3VudDogXCJ7e1NVQlRPVEFMIEFNT1VOVH19XCIsXG5cdFx0ICAgICAgICAgICAgICAgICAgICAgIHBlbmRpbmc6IGZhbHNlLFxuXHRcdCAgICAgICAgICAgICAgICAgIH0sXG5cdFx0ICAgICAgICAgICAgICAgICAge1xuXHRcdCAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogXCJTaGlwcGluZ1wiLFxuXHRcdCAgICAgICAgICAgICAgICAgICAgICBhbW91bnQ6IFwie3tTSElQUElORyBBTU9VTlR9fVwiLFxuXHRcdCAgICAgICAgICAgICAgICAgICAgICBwZW5kaW5nOiB0cnVlLFxuXHRcdCAgICAgICAgICAgICAgICAgIH0sXG5cdFx0ICAgICAgICAgICAgICAgICAge1xuXHRcdCAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogXCJUYXhcIixcblx0XHQgICAgICAgICAgICAgICAgICAgICAgYW1vdW50OiBcInt7VEFYIEFNT1VOVH19XCIsXG5cdFx0ICAgICAgICAgICAgICAgICAgICAgIHBlbmRpbmc6IGZhbHNlLFxuXHRcdCAgICAgICAgICAgICAgICAgIH1cblx0XHQgICAgICAgICAgICAgIF1cblx0XHQgICAgICAgICAgfTtcblx0XHQgICAgICB9LFxuXG5cdFx0ICAgICAgLy8gVXNlZCBmb3IgY3JlZGl0IGNhcmQgcGF5bWVudHMuIENhbGxlZCB3aGVuIHRoZSBTcVBheW1lbnRGb3JtXG5cdFx0ICAgICAgLy8gY29tcGxldGVzIGEgcmVxdWVzdCB0byBnZW5lcmF0ZSBhIGNhcmQgbm9uY2UsIGV2ZW4gaWYgdGhlIHJlcXVlc3Rcblx0XHQgICAgICAvLyBmYWlsZWQgYmVjYXVzZSBvZiBhbiBlcnJvci5cblx0XHQgICAgICBjYXJkTm9uY2VSZXNwb25zZVJlY2VpdmVkOiBmdW5jdGlvbihlcnJvcnMsIG5vbmNlLCBjYXJkRGF0YSkge1xuXHRcdCAgICAgICAgaWYgKGVycm9ycykge1xuXHRcdCAgICAgICAgICBjb25zb2xlLmxvZyhcIkVuY291bnRlcmVkIGVycm9yczpcIik7XG5cblx0XHQgICAgICAgICAgLy8gVGhpcyBsb2dzIGFsbCBlcnJvcnMgZW5jb3VudGVyZWQgZHVyaW5nIG5vbmNlIGdlbmVyYXRpb24gdG8gdGhlXG5cdFx0ICAgICAgICAgIC8vIEphdmFzY3JpcHQgY29uc29sZS5cblx0XHQgICAgICAgICAgZXJyb3JzLmZvckVhY2goZnVuY3Rpb24oZXJyb3IpIHtcblx0XHQgICAgICAgICAgICBjb25zb2xlLmxvZygnICAnICsgZXJyb3IubWVzc2FnZSk7XG5cdFx0ICAgICAgICAgIH0pO1xuXG5cdFx0ICAgICAgICAgIHJldHVybjtcblx0XHQgICAgICAgIH0gZWxzZSB7XG5cblx0XHQgICAgICAgICAgLy8gWW91IGNhbiBkZWxldGUgdGhpcyBsaW5lLCBpdCdzIHByb3ZpZGVkIGZvciB0ZXN0aW5nIHB1cnBvc2VzXG5cdFx0ICAgICAgICAgIC8vYWxlcnQoJ05vbmNlIHJlY2VpdmVkOiAnICsgbm9uY2UpO1xuXG5cblx0XHQgICAgICAgICAgLy8gQXNzaWduIHRoZSBub25jZSB2YWx1ZSB0byB0aGUgaGlkZGVuIGZvcm0gZmllbGRcblx0XHQgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NhcmQtbm9uY2UnKS52YWx1ZSA9IG5vbmNlO1xuXHRcdCAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbm9uY2UtZm9ybScpLnN1Ym1pdCgpO1xuXG5cdFx0ICAgICAgICAgIC8vIExldCB0aGUgZm9ybSBjb250aW51ZSB0byB0aGUgcGF5bWVudCBwcm9jZXNzaW5nIHBhZ2Vcblx0XHQgICAgICAgICAgLy9zdWJtaXRQYXltZW50KG5vbmNlKTtcblx0XHQgICAgICAgICAgdm0uZGF0YS5wb3N0KCcvcHJvY2Vzcy1jYXJkJywgeyBub25jZTogbm9uY2V9KTtcblx0XHQgICAgICAgIH1cblx0XHQgICAgICB9LFxuXG5cdFx0ICAgICAgdW5zdXBwb3J0ZWRCcm93c2VyRGV0ZWN0ZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdCAgICAgICAgLy8gRmlsbCBpbiB0aGlzIGNhbGxiYWNrIHRvIGFsZXJ0IGJ1eWVycyB3aGVuIHRoZWlyIGJyb3dzZXIgaXMgbm90IHN1cHBvcnRlZC5cblx0XHQgICAgICB9LFxuXG5cdFx0ICAgICAgLy8gRmlsbCBpbiB0aGVzZSBjYXNlcyB0byByZXNwb25kIHRvIHZhcmlvdXMgZXZlbnRzIHRoYXQgY2FuIG9jY3VyIHdoaWxlIGFcblx0XHQgICAgICAvLyBidXllciBpcyB1c2luZyB0aGUgcGF5bWVudCBmb3JtLlxuXHRcdCAgICAgIGlucHV0RXZlbnRSZWNlaXZlZDogZnVuY3Rpb24oaW5wdXRFdmVudCkge1xuXHRcdCAgICAgICAgc3dpdGNoIChpbnB1dEV2ZW50LmV2ZW50VHlwZSkge1xuXHRcdCAgICAgICAgICBjYXNlICdmb2N1c0NsYXNzQWRkZWQnOlxuXHRcdCAgICAgICAgICAgIC8vIEhhbmRsZSBhcyBkZXNpcmVkXG5cdFx0ICAgICAgICAgICAgYnJlYWs7XG5cdFx0ICAgICAgICAgIGNhc2UgJ2ZvY3VzQ2xhc3NSZW1vdmVkJzpcblx0XHQgICAgICAgICAgICAvLyBIYW5kbGUgYXMgZGVzaXJlZFxuXHRcdCAgICAgICAgICAgIGJyZWFrO1xuXHRcdCAgICAgICAgICBjYXNlICdlcnJvckNsYXNzQWRkZWQnOlxuXHRcdCAgICAgICAgICAgIC8vIEhhbmRsZSBhcyBkZXNpcmVkXG5cdFx0ICAgICAgICAgICAgYnJlYWs7XG5cdFx0ICAgICAgICAgIGNhc2UgJ2Vycm9yQ2xhc3NSZW1vdmVkJzpcblx0XHQgICAgICAgICAgICAvLyBIYW5kbGUgYXMgZGVzaXJlZFxuXHRcdCAgICAgICAgICAgIGJyZWFrO1xuXHRcdCAgICAgICAgICBjYXNlICdjYXJkQnJhbmRDaGFuZ2VkJzpcblx0XHQgICAgICAgICAgICAvLyBIYW5kbGUgYXMgZGVzaXJlZFxuXHRcdCAgICAgICAgICAgIGJyZWFrO1xuXHRcdCAgICAgICAgICBjYXNlICdwb3N0YWxDb2RlQ2hhbmdlZCc6XG5cdFx0ICAgICAgICAgICAgLy8gSGFuZGxlIGFzIGRlc2lyZWRcblx0XHQgICAgICAgICAgICBicmVhaztcblx0XHQgICAgICAgIH1cblx0XHQgICAgICB9LFxuXG5cdFx0ICAgICAgcGF5bWVudEZvcm1Mb2FkZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdCAgICAgICAgLy8gRmlsbCBpbiB0aGlzIGNhbGxiYWNrIHRvIHBlcmZvcm0gYWN0aW9ucyBhZnRlciB0aGUgcGF5bWVudCBmb3JtIGlzXG5cdFx0ICAgICAgICAvLyBkb25lIGxvYWRpbmcgKHN1Y2ggYXMgc2V0dGluZyB0aGUgcG9zdGFsIGNvZGUgZmllbGQgcHJvZ3JhbW1hdGljYWxseSkuXG5cdFx0ICAgICAgICAvLyBwYXltZW50Rm9ybS5zZXRQb3N0YWxDb2RlKCc5NDEwMycpO1xuXHRcdCAgICAgIH1cblx0XHQgICAgfVxuXHRcdCAgfSk7XG5cblx0XHQvLyBUaGlzIGZ1bmN0aW9uIGlzIGNhbGxlZCB3aGVuIGEgYnV5ZXIgY2xpY2tzIHRoZSBTdWJtaXQgYnV0dG9uIG9uIHRoZSB3ZWJwYWdlXG5cdFx0Ly8gdG8gY2hhcmdlIHRoZWlyIGNhcmQuXG5cdFx0dm0ucmVxdWVzdENhcmROb25jZSA9IGZ1bmN0aW9uKGV2ZW50KSB7XG5cblx0XHRcdGNvbnNvbGUubG9nKCdyZXF1ZXN0aW9uIGNhcmQgTm9uY2UnKTtcblxuXHRcdCAgLy8gVGhpcyBwcmV2ZW50cyB0aGUgU3VibWl0IGJ1dHRvbiBmcm9tIHN1Ym1pdHRpbmcgaXRzIGFzc29jaWF0ZWQgZm9ybS5cblx0XHQgIC8vIEluc3RlYWQsIGNsaWNraW5nIHRoZSBTdWJtaXQgYnV0dG9uIHNob3VsZCB0ZWxsIHRoZSBTcVBheW1lbnRGb3JtIHRvIGdlbmVyYXRlXG5cdFx0ICAvLyBhIGNhcmQgbm9uY2UsIHdoaWNoIHRoZSBuZXh0IGxpbmUgZG9lcy5cblx0XHQgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cblx0XHQgIHBheW1lbnRGb3JtLnJlcXVlc3RDYXJkTm9uY2UoKTtcblx0XHR9XG5cblx0XHQvL2J1aWxkIHBheW1lbnQgZm9ybSBhZnRlciBjb250cm9sbGVyIGxvYWRzXG5cdFx0cGF5bWVudEZvcm0uYnVpbGQoKTtcblxuXHR9XG5cblx0cmV0dXJuICBkaXJlY3RpdmU7XG59IiwiLyogY291cG9uU3VibWlzc2lvbi5kaXJlY3RpdmUuanMgKi9cblxuLyoqXG4qIEBkZXNjIHRvb2xiYXIgZGlyZWN0aXZlIHRoYXQgaXMgdXNlZCBvbiB0aGUgbWFpbiBwYWdlIGFjcm9zcyB0aGUgZW50aXJlIGFwcC5cbiogQGV4YW1wbGUgPGRpdiBjb3Vwb24tc3VibWlzc2lvbj48L2Rpdj5cbiovXG5cbmFuZ3VsYXJcblx0Lm1vZHVsZSgnYWhOdXRzJylcblx0LmRpcmVjdGl2ZSgnY291cG9uU3VibWlzc2lvbicsIGNvdXBvblN1Ym1pc3Npb24pO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIGNvdXBvblN1Ym1pc3Npb24oKSB7XG5cdHZhciBkaXJlY3RpdmUgPSB7XG5cdFx0cmVzdHJpY3Q6ICdBRUNNJyxcblx0XHR0ZW1wbGF0ZVVybDogJ3ZpZXdzL2RpcmVjdGl2ZXMvY291cG9uU3VibWlzc2lvbi5kaXJlY3RpdmUuaHRtJyxcblx0XHRyZXBsYWNlOiB0cnVlLFxuXHRcdHNjb3BlOiB7fSxcblx0XHRsaW5rOiBsaW5rRnVuYyxcblx0XHRjb250cm9sbGVyOiBjb3Vwb25TdWJtaXNzaW9uQ29udHJvbGxlcixcblx0XHRjb250cm9sbGVyQXM6ICd2bScsXG5cdFx0YmluZFRvQ29udHJvbGxlcjogdHJ1ZVxuXHR9XG5cblx0LyogQG5nSW5qZWN0ICovXG5cdGZ1bmN0aW9uIGxpbmtGdW5jKHNjb3BlLCBlbCwgYXR0ciwgY3RybCkge1xuICAgIH1cblxuICAgIGNvdXBvblN1Ym1pc3Npb25Db250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsICckbG9nJ107XG4gICAgLyogQG5nSW5qZWN0ICovXG4gICAgZnVuY3Rpb24gY291cG9uU3VibWlzc2lvbkNvbnRyb2xsZXIoJHNjb3BlLCAkbG9nKSB7XG5cdCAgICB2YXIgdm0gPSB0aGlzO1xuXG5cdCAgICAkbG9nLmluZm8oJ2luIHRoZSBjb3Vwb24tc3VibWlzc2lvbiBkaXJlY3RpdmUnKTtcblxuXHR9XG5cblx0cmV0dXJuICBkaXJlY3RpdmU7XG59IiwiLyogY3JlYXRlTmV3QWNjb3VudC5kaXJlY3RpdmUuanMgKi9cblxuLyoqXG4qIEBkZXNjIHRvb2xiYXIgZGlyZWN0aXZlIHRoYXQgaXMgdXNlZCBvbiB0aGUgbWFpbiBwYWdlIGFjcm9zcyB0aGUgZW50aXJlIGFwcC5cbiogQGV4YW1wbGUgPGRpdiBjcmVhdGUtbmV3LWFjY291bnQ+PC9kaXY+XG4qL1xuXG5hbmd1bGFyXG5cdC5tb2R1bGUoJ2FoTnV0cycpXG5cdC5kaXJlY3RpdmUoJ2NyZWF0ZU5ld0FjY291bnQnLCBjcmVhdGVOZXdBY2NvdW50KTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBjcmVhdGVOZXdBY2NvdW50KCkge1xuXHR2YXIgZGlyZWN0aXZlID0ge1xuXHRcdHJlc3RyaWN0OiAnQUVDTScsXG5cdFx0dGVtcGxhdGVVcmw6ICd2aWV3cy9kaXJlY3RpdmVzL2NyZWF0ZU5ld0FjY291bnQuZGlyZWN0aXZlLmh0bScsXG5cdFx0cmVwbGFjZTogdHJ1ZSxcblx0XHRzY29wZToge30sXG5cdFx0bGluazogbGlua0Z1bmMsXG5cdFx0Y29udHJvbGxlcjogY3JlYXRlTmV3QWNjb3VudENvbnRyb2xsZXIsXG5cdFx0Y29udHJvbGxlckFzOiAndm0nLFxuXHRcdGJpbmRUb0NvbnRyb2xsZXI6IHRydWVcblx0fVxuXG5cdC8qIEBuZ0luamVjdCAqL1xuXHRmdW5jdGlvbiBsaW5rRnVuYyhzY29wZSwgZWwsIGF0dHIsIGN0cmwpIHtcbiAgICB9XG5cbiAgICBjcmVhdGVOZXdBY2NvdW50Q29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGxvZycsICckbG9jYXRpb24nXTtcbiAgICAvKiBAbmdJbmplY3QgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVOZXdBY2NvdW50Q29udHJvbGxlcigkc2NvcGUsICRsb2csICRsb2NhdGlvbikge1xuXHQgICAgdmFyIHZtID0gdGhpcztcblxuXHQgICAgJGxvZy5pbmZvKCdpbiB0aGUgY3JlYXRlIG5ldyBhY2NvdW50IGRpcmVjdGl2ZScpO1xuXG5cdCAgICAvL2RlZmluZSB2aWV3bW9kZWwgZnVuY3Rpb25zXG5cblx0fVxuXG5cdHJldHVybiAgZGlyZWN0aXZlO1xufSIsIi8qIGRlZmluZURlbGl2ZXJ5QWRkcmVzcy5kaXJlY3RpdmUuanMgKi9cblxuLyoqXG4qIEBkZXNjIHRvb2xiYXIgZGlyZWN0aXZlIHRoYXQgaXMgdXNlZCBvbiB0aGUgbWFpbiBwYWdlIGFjcm9zcyB0aGUgZW50aXJlIGFwcC5cbiogQGV4YW1wbGUgPGRpdiBkZWZpbmUtZGVsaXZlcnktYWRkcmVzcz48L2Rpdj5cbiovXG5cbmFuZ3VsYXJcblx0Lm1vZHVsZSgnYWhOdXRzJylcblx0LmRpcmVjdGl2ZSgnZGVmaW5lRGVsaXZlcnlBZGRyZXNzJywgZGVmaW5lRGVsaXZlcnlBZGRyZXNzKTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBkZWZpbmVEZWxpdmVyeUFkZHJlc3MoKSB7XG5cdHZhciBkaXJlY3RpdmUgPSB7XG5cdFx0cmVzdHJpY3Q6ICdBRUNNJyxcblx0XHR0ZW1wbGF0ZVVybDogJ3ZpZXdzL2RpcmVjdGl2ZXMvZGVmaW5lRGVsaXZlcnlBZGRyZXNzLmRpcmVjdGl2ZS5odG0nLFxuXHRcdHJlcGxhY2U6IHRydWUsXG5cdFx0c2NvcGU6IHtcblx0XHRcdGRlbGl2ZXJUbzogXCI9XCJcblx0XHR9LFxuXHRcdGxpbms6IGxpbmtGdW5jLFxuXHRcdGNvbnRyb2xsZXI6IGRlZmluZURlbGl2ZXJ5QWRkcmVzc0NvbnRyb2xsZXIsXG5cdFx0Y29udHJvbGxlckFzOiAndm0nLFxuXHRcdGJpbmRUb0NvbnRyb2xsZXI6IHRydWVcblx0fVxuXG5cdC8qIEBuZ0luamVjdCAqL1xuXHRmdW5jdGlvbiBsaW5rRnVuYyhzY29wZSwgZWwsIGF0dHIsIGN0cmwpIHtcbiAgICB9XG5cbiAgICBkZWZpbmVEZWxpdmVyeUFkZHJlc3NDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsICckbG9nJ107XG4gICAgLyogQG5nSW5qZWN0ICovXG4gICAgZnVuY3Rpb24gZGVmaW5lRGVsaXZlcnlBZGRyZXNzQ29udHJvbGxlcigkc2NvcGUsICRsb2cpIHtcblx0ICAgIHZhciB2bSA9IHRoaXM7XG5cblx0ICAgIC8vJGxvZy5pbmZvKCdpbiB0aGUgaGVhZGVyIGRpcmVjdGl2ZScpO1xuXG5cdH1cblxuXHRyZXR1cm4gIGRpcmVjdGl2ZTtcbn0iLCIvKiBkZWxpdmVyeURldGFpbHMuZGlyZWN0aXZlLmpzICovXG5cbi8qKlxuKiBAZGVzYyB0b29sYmFyIGRpcmVjdGl2ZSB0aGF0IGlzIHVzZWQgb24gdGhlIG1haW4gcGFnZSBhY3Jvc3MgdGhlIGVudGlyZSBhcHAuXG4qIEBleGFtcGxlIDxkaXYgZGVsaXZlcnktZGV0YWlscz48L2Rpdj5cbiovXG5cbmFuZ3VsYXJcblx0Lm1vZHVsZSgnYWhOdXRzJylcblx0LmRpcmVjdGl2ZSgnZGVsaXZlcnlEZXRhaWxzJywgZGVsaXZlcnlEZXRhaWxzKTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBkZWxpdmVyeURldGFpbHMoKSB7XG5cdHZhciBkaXJlY3RpdmUgPSB7XG5cdFx0cmVzdHJpY3Q6ICdBRUNNJyxcblx0XHR0ZW1wbGF0ZVVybDogJ3ZpZXdzL2RpcmVjdGl2ZXMvZGVsaXZlcnlEZXRhaWxzLmRpcmVjdGl2ZS5odG0nLFxuXHRcdHJlcGxhY2U6IHRydWUsXG5cdFx0c2NvcGU6IHtcblx0XHRcdGRlbGl2ZXJUbzogJz0nXG5cdFx0fSxcblx0XHRsaW5rOiBsaW5rRnVuYyxcblx0XHRjb250cm9sbGVyOiBkZWxpdmVyeURldGFpbHNDb250cm9sbGVyLFxuXHRcdGNvbnRyb2xsZXJBczogJ3ZtJyxcblx0XHRiaW5kVG9Db250cm9sbGVyOiB0cnVlXG5cdH1cblxuXHQvKiBAbmdJbmplY3QgKi9cblx0ZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsLCBhdHRyLCBjdHJsKSB7XG4gICAgfVxuXG4gICAgZGVsaXZlcnlEZXRhaWxzQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGxvZycsICckbG9jYXRpb24nXTtcbiAgICAvKiBAbmdJbmplY3QgKi9cbiAgICBmdW5jdGlvbiBkZWxpdmVyeURldGFpbHNDb250cm9sbGVyKCRzY29wZSwgJGxvZywgJGxvY2F0aW9uKSB7XG5cdCAgICB2YXIgdm0gPSB0aGlzO1xuXG5cdCAgICAkbG9nLmluZm8oJ2luIHRoZSBkZWxpdmVyeURldGFpbHMgZGlyZWN0aXZlJywgdm0uZGVsaXZlclRvKTtcblxuXHQgICAgLy9cblx0ICAgIHZtLmNoYW5nZURldGFpbHMgPSBmdW5jdGlvbigpIHtcblx0ICAgIFx0JGxvY2F0aW9uLnBhdGgoJy9nZXR0aW5nLXRoZS1wcm9kdWN0LycgKyAnMTAnKTtcblx0ICAgIH07XG5cdH1cblxuXHRyZXR1cm4gIGRpcmVjdGl2ZTtcbn0iLCIvKiBmZWF0dXJlZFByb2R1Y3RzLmRpcmVjdGl2ZS5qcyAqL1xuXG4vKipcbiogQGRlc2MgdG9vbGJhciBkaXJlY3RpdmUgdGhhdCBpcyB1c2VkIG9uIHRoZSBtYWluIHBhZ2UgYWNyb3NzIHRoZSBlbnRpcmUgYXBwLlxuKiBAZXhhbXBsZSA8ZGl2IGZlYXR1cmVkLXByb2R1Y3RzPjwvZGl2PlxuKi9cblxuYW5ndWxhclxuXHQubW9kdWxlKCdhaE51dHMnKVxuXHQuZGlyZWN0aXZlKCdmZWF0dXJlZFByb2R1Y3RzJywgZmVhdHVyZWRQcm9kdWN0cyk7XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gZmVhdHVyZWRQcm9kdWN0cygpIHtcblx0dmFyIGRpcmVjdGl2ZSA9IHtcblx0XHRyZXN0cmljdDogJ0FFQ00nLFxuXHRcdHRlbXBsYXRlVXJsOiAndmlld3MvZGlyZWN0aXZlcy9mZWF0dXJlZFByb2R1Y3RzLmRpcmVjdGl2ZS5odG0nLFxuXHRcdHJlcGxhY2U6IHRydWUsXG5cdFx0c2NvcGU6IHt9LFxuXHRcdGxpbms6IGxpbmtGdW5jLFxuXHRcdGNvbnRyb2xsZXI6IGZlYXR1cmVkUHJvZHVjdHNDb250cm9sbGVyLFxuXHRcdGNvbnRyb2xsZXJBczogJ3ZtJyxcblx0XHRiaW5kVG9Db250cm9sbGVyOiB0cnVlXG5cdH1cblxuXHQvKiBAbmdJbmplY3QgKi9cblx0ZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsLCBhdHRyLCBjdHJsKSB7XG4gICAgfVxuXG4gICAgZmVhdHVyZWRQcm9kdWN0c0NvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyRsb2cnLCAnJGxvY2F0aW9uJ107XG4gICAgLyogQG5nSW5qZWN0ICovXG4gICAgZnVuY3Rpb24gZmVhdHVyZWRQcm9kdWN0c0NvbnRyb2xsZXIoJHNjb3BlLCAkbG9nLCAkbG9jYXRpb24pIHtcblx0ICAgIHZhciB2bSA9IHRoaXM7XG5cblx0ICAgIC8vJGxvZy5pbmZvKCdpbiB0aGUgZmVhdHVyZWRQcm9kdWN0c0NvbnRyb2xsZXIgZGlyZWN0aXZlJyk7XG5cblx0ICAgIC8vZGVmaW5lIHZpZXdtb2RlbCBmdW5jdGlvbnNcblx0ICAgIHZtLm1yUHJkY3RzQnRuID0gZnVuY3Rpb24oKSB7XG5cdCAgICBcdCRsb2NhdGlvbi5wYXRoKCcvYWxsLXByb2R1Y3RzJyk7XG5cdCAgICB9XG5cblx0ICAgIHZtLnByb2R1Y3RTZWxlY3Rpb25CdG4gPSBmdW5jdGlvbihwcm9kdWN0TmFtZSkge1xuXHQgICAgXHQvLyRsb2cuaW5mbygnaGl0IHRoZSBwcm9kdWN0IHNlbGVjdGlvbiBidXR0b24nKTtcblx0ICAgIFx0JGxvY2F0aW9uLnBhdGgoJy9hbGwtcHJvZHVjdHMnKS5zZWFyY2goJ2ZpbHRlcicscHJvZHVjdE5hbWUpO1xuXHQgICAgfVxuXG5cdH1cblxuXHRyZXR1cm4gIGRpcmVjdGl2ZTtcbn0iLCIvKiBmZWRleE9wdGlvbnMuZGlyZWN0aXZlLmpzICovXG5cbi8qKlxuKiBAZGVzYyB0b29sYmFyIGRpcmVjdGl2ZSB0aGF0IGlzIHVzZWQgb24gdGhlIG1haW4gcGFnZSBhY3Jvc3MgdGhlIGVudGlyZSBhcHAuXG4qIEBleGFtcGxlIDxkaXYgZmVkZXgtb3B0aW9ucz48L2Rpdj5cbiovXG5cbmFuZ3VsYXJcblx0Lm1vZHVsZSgnYWhOdXRzJylcblx0LmRpcmVjdGl2ZSgnZmVkZXhPcHRpb25zJywgZmVkZXhPcHRpb25zKTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBmZWRleE9wdGlvbnMoKSB7XG5cdHZhciBkaXJlY3RpdmUgPSB7XG5cdFx0cmVzdHJpY3Q6ICdBRUNNJyxcblx0XHR0ZW1wbGF0ZVVybDogJ3ZpZXdzL2RpcmVjdGl2ZXMvZmVkZXhPcHRpb25zLmRpcmVjdGl2ZS5odG0nLFxuXHRcdHJlcGxhY2U6IHRydWUsXG5cdFx0c2NvcGU6IHt9LFxuXHRcdGxpbms6IGxpbmtGdW5jLFxuXHRcdGNvbnRyb2xsZXI6IGZlZGV4T3B0aW9uc0NvbnRyb2xsZXIsXG5cdFx0Y29udHJvbGxlckFzOiAndm0nLFxuXHRcdGJpbmRUb0NvbnRyb2xsZXI6IHRydWVcblx0fVxuXG5cdC8qIEBuZ0luamVjdCAqL1xuXHRmdW5jdGlvbiBsaW5rRnVuYyhzY29wZSwgZWwsIGF0dHIsIGN0cmwpIHtcbiAgICB9XG5cbiAgICBmZWRleE9wdGlvbnNDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsICckbG9nJ107XG4gICAgLyogQG5nSW5qZWN0ICovXG4gICAgZnVuY3Rpb24gZmVkZXhPcHRpb25zQ29udHJvbGxlcigkc2NvcGUsICRsb2cpIHtcblx0ICAgIHZhciB2bSA9IHRoaXM7XG5cblx0ICAgIC8vJGxvZy5pbmZvKCdpbiB0aGUgaGVhZGVyIGRpcmVjdGl2ZScpO1xuXG5cdH1cblxuXHRyZXR1cm4gIGRpcmVjdGl2ZTtcbn0iLCIvKiBmdWxsUHJvZHVjdFByb2ZpbGUuZGlyZWN0aXZlLmpzICovXG5cbi8qKlxuKiBAZGVzYyB0b29sYmFyIGRpcmVjdGl2ZSB0aGF0IGlzIHVzZWQgb24gdGhlIG1haW4gcGFnZSBhY3Jvc3MgdGhlIGVudGlyZSBhcHAuXG4qIEBleGFtcGxlIDxkaXYgZnVsbC1wcm9kdWN0LXByb2ZpbGU+PC9kaXY+XG4qL1xuXG5hbmd1bGFyXG5cdC5tb2R1bGUoJ2FoTnV0cycpXG5cdC5kaXJlY3RpdmUoJ2Z1bGxQcm9kdWN0UHJvZmlsZScsIGZ1bGxQcm9kdWN0UHJvZmlsZSk7XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gZnVsbFByb2R1Y3RQcm9maWxlKCkge1xuXHR2YXIgZGlyZWN0aXZlID0ge1xuXHRcdHJlc3RyaWN0OiAnQUVDTScsXG5cdFx0dGVtcGxhdGVVcmw6ICd2aWV3cy9kaXJlY3RpdmVzL2Z1bGxQcm9kdWN0UHJvZmlsZS5kaXJlY3RpdmUuaHRtJyxcblx0XHRyZXBsYWNlOiB0cnVlLFxuXHRcdHNjb3BlOiB7XG5cdFx0XHRwcm9kdWN0OiAnPSdcblx0XHR9LFxuXHRcdGxpbms6IGxpbmtGdW5jLFxuXHRcdGNvbnRyb2xsZXI6IGZ1bGxQcm9kdWN0UHJvZmlsZUNvbnRyb2xsZXIsXG5cdFx0Y29udHJvbGxlckFzOiAndm0nLFxuXHRcdGJpbmRUb0NvbnRyb2xsZXI6IHRydWVcblx0fVxuXG5cdC8qIEBuZ0luamVjdCAqL1xuXHRmdW5jdGlvbiBsaW5rRnVuYyhzY29wZSwgZWwsIGF0dHIsIGN0cmwpIHtcbiAgICB9XG5cbiAgICBmdWxsUHJvZHVjdFByb2ZpbGVDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsICckbG9nJywgJyRsb2NhdGlvbicsICdzaG9wcGluZ0NhcnQnXTtcbiAgICAvKiBAbmdJbmplY3QgKi9cbiAgICBmdW5jdGlvbiBmdWxsUHJvZHVjdFByb2ZpbGVDb250cm9sbGVyKCRzY29wZSwgJGxvZywgJGxvY2F0aW9uLCBzaG9wcGluZ0NhcnQpIHtcblx0ICAgIHZhciB2bSA9IHRoaXM7XG5cdCAgICB2bS5jYXJ0ID0gc2hvcHBpbmdDYXJ0O1xuXHQgICAgdm0uaXRlbVNlbGVjdGlvbnMgPSB2bS5wcm9kdWN0LnNpemVzO1xuXG5cdCAgICAvL2FkZCBzZWxlY3RlZCBpdGVtcyB0byBjYXJ0XG5cdCAgICB2bS5hZGRUb0NhcnQgPSBmdW5jdGlvbihpdGVtU2VsZWN0aW9ucykge1xuXG5cdCAgICBcdC8vY29uc29sZS5sb2coJ3ZtLml0ZW1TZWxlY3Rpb25zJywgdm0uaXRlbVNlbGVjdGlvbnMpO1xuXG5cdCAgICBcdC8vaXRlcmF0ZSB0aHJvdWdoIGVhY2ggb2YgdGhlIHNpemVzLCBpZiB0aGUgcXR5IGlzIGdyZWF0ZXIgdGhhbiAwLCBhZGQgaXRcblx0ICAgIFx0dm0uaXRlbVNlbGVjdGlvbnMuZm9yRWFjaChmdW5jdGlvbihzaXplKSB7XG5cblx0ICAgIFx0XHRpZihzaXplLnF0eSA+IDApIHZtLmNhcnQuYWRkSXRlbShzaXplKTtcblx0ICAgIFx0fSk7XG5cblx0ICAgIFx0Ly9pZiBhcXVpc3Rpb24gbWV0aG9kIGlzIGRlZmluZWQsIGdvIHN0cmFpZ2h0IHRvIHNob3BwaW5nIGNhcnRcblx0ICAgIFx0aWYodm0uY2FydC5hY3FNZXRoSXNEZWZpbmVkKCkpIHtcblxuXHQgICAgXHRcdCRsb2NhdGlvbi5wYXRoKCcvY2FydCcpO1xuXG5cdCAgICBcdH0gZWxzZSB7XG5cdCAgICBcdFx0Ly9vdGhlcndpc2UgZGlyZWN0IHRvIGdldHRpbmcgdGhlIHByb2R1Y3Rcblx0ICAgIFx0XHQkbG9jYXRpb24ucGF0aCgnL2dldHRpbmctdGhlLXByb2R1Y3QvJyArICcxMCcpO1xuXHQgICAgXHR9XG5cdCAgICBcdFxuXHQgICAgfTtcblxuXHR9XG5cblx0cmV0dXJuICBkaXJlY3RpdmU7XG59IiwiLyogaGVyb0Jhbm5lci5kaXJlY3RpdmUuanMgKi9cblxuLyoqXG4qIEBkZXNjIHRvb2xiYXIgZGlyZWN0aXZlIHRoYXQgaXMgdXNlZCBvbiB0aGUgbWFpbiBwYWdlIGFjcm9zcyB0aGUgZW50aXJlIGFwcC5cbiogQGV4YW1wbGUgPGRpdiBoZXJvLWJhbm5lcj48L2Rpdj5cbiovXG5cbmFuZ3VsYXJcblx0Lm1vZHVsZSgnYWhOdXRzJylcblx0LmRpcmVjdGl2ZSgnaGVyb0Jhbm5lcicsIGhlcm9CYW5uZXIpO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIGhlcm9CYW5uZXIoKSB7XG5cdHZhciBkaXJlY3RpdmUgPSB7XG5cdFx0cmVzdHJpY3Q6ICdBRUNNJyxcblx0XHR0ZW1wbGF0ZVVybDogJ3ZpZXdzL2RpcmVjdGl2ZXMvaGVyb0Jhbm5lci5kaXJlY3RpdmUuaHRtJyxcblx0XHRyZXBsYWNlOiB0cnVlLFxuXHRcdHNjb3BlOiB7fSxcblx0XHRsaW5rOiBsaW5rRnVuYyxcblx0XHRjb250cm9sbGVyOiBoZXJvQmFubmVyQ29udHJvbGxlcixcblx0XHRjb250cm9sbGVyQXM6ICd2bScsXG5cdFx0YmluZFRvQ29udHJvbGxlcjogdHJ1ZVxuXHR9XG5cblx0LyogQG5nSW5qZWN0ICovXG5cdGZ1bmN0aW9uIGxpbmtGdW5jKHNjb3BlLCBlbCwgYXR0ciwgY3RybCkge1xuICAgIH1cblxuICAgIGhlcm9CYW5uZXJDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsICckbG9nJ107XG4gICAgLyogQG5nSW5qZWN0ICovXG4gICAgZnVuY3Rpb24gaGVyb0Jhbm5lckNvbnRyb2xsZXIoJHNjb3BlLCAkbG9nKSB7XG5cdCAgICB2YXIgdm0gPSB0aGlzO1xuXG5cdCAgICAvLyRsb2cuaW5mbygnaW4gdGhlIGhlcm8gYmFubmVyIGRpcmVjdGl2ZScpO1xuXG5cdH1cblxuXHRyZXR1cm4gIGRpcmVjdGl2ZTtcbn0iLCIvKiBwYXNzd29yZFJlc2V0LmRpcmVjdGl2ZS5qcyAqL1xuXG4vKipcbiogQGRlc2MgdG9vbGJhciBkaXJlY3RpdmUgdGhhdCBpcyB1c2VkIG9uIHRoZSBtYWluIHBhZ2UgYWNyb3NzIHRoZSBlbnRpcmUgYXBwLlxuKiBAZXhhbXBsZSA8ZGl2IHBhc3N3b3JkLXJlc2V0PjwvZGl2PlxuKi9cblxuYW5ndWxhclxuXHQubW9kdWxlKCdhaE51dHMnKVxuXHQuZGlyZWN0aXZlKCdwYXNzd29yZFJlc2V0JywgcGFzc3dvcmRSZXNldCk7XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gcGFzc3dvcmRSZXNldCgpIHtcblx0dmFyIGRpcmVjdGl2ZSA9IHtcblx0XHRyZXN0cmljdDogJ0FFQ00nLFxuXHRcdHRlbXBsYXRlVXJsOiAndmlld3MvZGlyZWN0aXZlcy9wYXNzd29yZFJlc2V0LmRpcmVjdGl2ZS5odG0nLFxuXHRcdHJlcGxhY2U6IHRydWUsXG5cdFx0c2NvcGU6IHt9LFxuXHRcdGxpbms6IGxpbmtGdW5jLFxuXHRcdGNvbnRyb2xsZXI6IHBhc3N3b3JkUmVzZXRDb250cm9sbGVyLFxuXHRcdGNvbnRyb2xsZXJBczogJ3ZtJyxcblx0XHRiaW5kVG9Db250cm9sbGVyOiB0cnVlXG5cdH1cblxuXHQvKiBAbmdJbmplY3QgKi9cblx0ZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsLCBhdHRyLCBjdHJsKSB7XG4gICAgfVxuXG4gICAgcGFzc3dvcmRSZXNldENvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyRsb2cnLCAnJGxvY2F0aW9uJ107XG4gICAgLyogQG5nSW5qZWN0ICovXG4gICAgZnVuY3Rpb24gcGFzc3dvcmRSZXNldENvbnRyb2xsZXIoJHNjb3BlLCAkbG9nLCAkbG9jYXRpb24pIHtcblx0ICAgIHZhciB2bSA9IHRoaXM7XG5cblx0ICAgICRsb2cuaW5mbygnaW4gdGhlIHBhc3N3b3JkUmVzZXQgZGlyZWN0aXZlJyk7XG5cblx0ICAgIC8vZGVmaW5lIHZpZXdtb2RlbCBmdW5jdGlvbnNcblx0ICAgIHZtLmVtYWlsID0gJyc7XG5cblx0ICAgIC8vZGVmaW5lIGxvY2FsIGZ1bmN0aW9uc1xuXHQgICAgdm0uYmFjayA9IGZ1bmN0aW9uKCkge1xuXHQgICAgXHQkbG9jYXRpb24ucGF0aCgnL2xvZ2luJyk7XG5cdCAgICB9O1xuXG5cdCAgICB2bS5zdWJtaXQgPSBmdW5jdGlvbigpIHtcblx0ICAgIFx0JGxvZy5pbmZvKCdzdWJtaXR0aW5nIGVtYWlsJywgdm0uZW1haWwpO1xuXHQgICAgfVxuXHR9XG5cblx0cmV0dXJuICBkaXJlY3RpdmU7XG59IiwiLyogcGlja3VwT3JEZWxpdmVyeS5kaXJlY3RpdmUuanMgKi9cblxuLyoqXG4qIEBkZXNjIHRvb2xiYXIgZGlyZWN0aXZlIHRoYXQgaXMgdXNlZCBvbiB0aGUgbWFpbiBwYWdlIGFjcm9zcyB0aGUgZW50aXJlIGFwcC5cbiogQGV4YW1wbGUgPGRpdiBwaWNrdXAtb3ItZGVsaXZlcnk+PC9kaXY+XG4qL1xuXG5hbmd1bGFyXG5cdC5tb2R1bGUoJ2FoTnV0cycpXG5cdC5kaXJlY3RpdmUoJ3BpY2t1cE9yRGVsaXZlcnknLCBwaWNrdXBPckRlbGl2ZXJ5KTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBwaWNrdXBPckRlbGl2ZXJ5KCkge1xuXHR2YXIgZGlyZWN0aXZlID0ge1xuXHRcdHJlc3RyaWN0OiAnQUVDTScsXG5cdFx0dGVtcGxhdGVVcmw6ICd2aWV3cy9kaXJlY3RpdmVzL3BpY2t1cE9yRGVsaXZlcnkuZGlyZWN0aXZlLmh0bScsXG5cdFx0cmVwbGFjZTogdHJ1ZSxcblx0XHRzY29wZToge1xuXHRcdFx0bWV0aG9kOiBcIj1cIixcblx0XHRcdGRldGFpbHM6IFwiPVwiXG5cdFx0fSxcblx0XHRsaW5rOiBsaW5rRnVuYyxcblx0XHRjb250cm9sbGVyOiBwaWNrdXBPckRlbGl2ZXJ5Q29udHJvbGxlcixcblx0XHRjb250cm9sbGVyQXM6ICd2bScsXG5cdFx0YmluZFRvQ29udHJvbGxlcjogdHJ1ZVxuXHR9XG5cblx0LyogQG5nSW5qZWN0ICovXG5cdGZ1bmN0aW9uIGxpbmtGdW5jKHNjb3BlLCBlbCwgYXR0ciwgY3RybCkge1xuICAgIH1cblxuICAgIHBpY2t1cE9yRGVsaXZlcnlDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsICckbG9nJ107XG4gICAgLyogQG5nSW5qZWN0ICovXG4gICAgZnVuY3Rpb24gcGlja3VwT3JEZWxpdmVyeUNvbnRyb2xsZXIoJHNjb3BlLCAkbG9nKSB7XG5cdCAgICB2YXIgdm0gPSB0aGlzO1xuXG5cdCAgICAkbG9nLmluZm8oJ2luIHRoZSBwaWNrdXAtb3ItZGVsaXZlcnkgZGlyZWN0aXZlJywgdm0ubWV0aG9kLCB2bS5kZXRhaWxzKTtcblxuXHR9XG5cblx0cmV0dXJuICBkaXJlY3RpdmU7XG59IiwiLyogcHJpbWFyeUNvbnRlbnQuZGlyZWN0aXZlLmpzICovXG5cbi8qKlxuKiBAZGVzYyB0b29sYmFyIGRpcmVjdGl2ZSB0aGF0IGlzIHVzZWQgb24gdGhlIG1haW4gcGFnZSBhY3Jvc3MgdGhlIGVudGlyZSBhcHAuXG4qIEBleGFtcGxlIDxkaXYgcHJpbWFyeS1jb250ZW50PjwvZGl2PlxuKi9cblxuYW5ndWxhclxuXHQubW9kdWxlKCdhaE51dHMnKVxuXHQuZGlyZWN0aXZlKCdwcmltYXJ5Q29udGVudCcsIHByaW1hcnlDb250ZW50KTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBwcmltYXJ5Q29udGVudCgpIHtcblx0dmFyIGRpcmVjdGl2ZSA9IHtcblx0XHRyZXN0cmljdDogJ0FFQ00nLFxuXHRcdHRlbXBsYXRlVXJsOiAndmlld3MvZGlyZWN0aXZlcy9wcmltYXJ5Q29udGVudC5kaXJlY3RpdmUuaHRtJyxcblx0XHRyZXBsYWNlOiB0cnVlLFxuXHRcdHNjb3BlOiB7fSxcblx0XHRsaW5rOiBsaW5rRnVuYyxcblx0XHRjb250cm9sbGVyOiBwcmltYXJ5Q29udGVudENvbnRyb2xsZXIsXG5cdFx0Y29udHJvbGxlckFzOiAndm0nLFxuXHRcdGJpbmRUb0NvbnRyb2xsZXI6IHRydWVcblx0fVxuXG5cdC8qIEBuZ0luamVjdCAqL1xuXHRmdW5jdGlvbiBsaW5rRnVuYyhzY29wZSwgZWwsIGF0dHIsIGN0cmwpIHtcbiAgICB9XG5cbiAgICBwcmltYXJ5Q29udGVudENvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyRsb2cnXTtcbiAgICAvKiBAbmdJbmplY3QgKi9cbiAgICBmdW5jdGlvbiBwcmltYXJ5Q29udGVudENvbnRyb2xsZXIoJHNjb3BlLCAkbG9nKSB7XG5cdCAgICB2YXIgdm0gPSB0aGlzO1xuXG5cdCAgICAkbG9nLmluZm8oJ2luIHRoZSBoZWFkZXIgZGlyZWN0aXZlJyk7XG5cblx0fVxuXG5cdHJldHVybiAgZGlyZWN0aXZlO1xufSIsIi8qIHByb2R1Y3RTaXplUGlja2VyLmRpcmVjdGl2ZS5qcyAqL1xuXG4vKipcbiogQGRlc2MgdG9vbGJhciBkaXJlY3RpdmUgdGhhdCBpcyB1c2VkIG9uIHRoZSBtYWluIHBhZ2UgYWNyb3NzIHRoZSBlbnRpcmUgYXBwLlxuKiBAZXhhbXBsZSA8cHJvZHVjdC1zaXplLXBpY2tlcj48L2Rpdj5cbiovXG5cbmFuZ3VsYXJcblx0Lm1vZHVsZSgnYWhOdXRzJylcblx0LmRpcmVjdGl2ZSgncHJvZHVjdFNpemVQaWNrZXInLCBwcm9kdWN0U2l6ZVBpY2tlcik7XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gcHJvZHVjdFNpemVQaWNrZXIoKSB7XG5cdHZhciBkaXJlY3RpdmUgPSB7XG5cdFx0cmVzdHJpY3Q6ICdBRUNNJyxcblx0XHR0ZW1wbGF0ZVVybDogJ3ZpZXdzL2RpcmVjdGl2ZXMvcHJvZHVjdFNpemVQaWNrZXIuZGlyZWN0aXZlLmh0bScsXG5cdFx0cmVwbGFjZTogdHJ1ZSxcblx0XHRzY29wZToge1xuXHRcdFx0c2l6ZXM6ICc9J1xuXHRcdH0sXG5cdFx0bGluazogbGlua0Z1bmMsXG5cdFx0Y29udHJvbGxlcjogcHJvZHVjdFNpemVQaWNrZXJDb250cm9sbGVyLFxuXHRcdGNvbnRyb2xsZXJBczogJ3ZtJyxcblx0XHRiaW5kVG9Db250cm9sbGVyOiB0cnVlXG5cdH1cblxuXHQvKiBAbmdJbmplY3QgKi9cblx0ZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsLCBhdHRyLCBjdHJsKSB7XG4gICAgfVxuXG4gICAgcHJvZHVjdFNpemVQaWNrZXJDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsICckbG9nJ107XG4gICAgLyogQG5nSW5qZWN0ICovXG4gICAgZnVuY3Rpb24gcHJvZHVjdFNpemVQaWNrZXJDb250cm9sbGVyKCRzY29wZSwgJGxvZykge1xuXHQgICAgdmFyIHZtID0gdGhpcztcblxuXHQgICAgLy8kbG9nLmluZm8oJ2luIHRoZSBoZWFkZXIgZGlyZWN0aXZlJyk7XG5cblx0fVxuXG5cdHJldHVybiAgZGlyZWN0aXZlO1xufSIsIi8qIHByb2R1Y3RUaHVtYm5haWxzLmRpcmVjdGl2ZS5qcyAqL1xuXG4vKipcbiogQGRlc2MgdG9vbGJhciBkaXJlY3RpdmUgdGhhdCBpcyB1c2VkIG9uIHRoZSBtYWluIHBhZ2UgYWNyb3NzIHRoZSBlbnRpcmUgYXBwLlxuKiBAZXhhbXBsZSA8ZGl2IHByZGN0LXRobWJuYWlsPjwvZGl2PlxuKi9cblxuYW5ndWxhclxuXHQubW9kdWxlKCdhaE51dHMnKVxuXHQuZGlyZWN0aXZlKCdwcmRjdFRobWJubCcsIHByZGN0VGhtYm5sKTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBwcmRjdFRobWJubCgpIHtcblx0dmFyIGRpcmVjdGl2ZSA9IHtcblx0XHRyZXN0cmljdDogJ0FFQ00nLFxuXHRcdHRlbXBsYXRlVXJsOiAndmlld3MvZGlyZWN0aXZlcy9wcmRjdFRobWJubC5kaXJlY3RpdmUuaHRtJyxcblx0XHRyZXBsYWNlOiB0cnVlLFxuXHRcdHNjb3BlOiB7XG5cdFx0XHRwcm9kdWN0OiAnPSdcblx0XHR9LFxuXHRcdGxpbms6IGxpbmtGdW5jLFxuXHRcdGNvbnRyb2xsZXI6IHByZGN0VGhtYm5sQ29udHJvbGxlcixcblx0XHRjb250cm9sbGVyQXM6ICd2bScsXG5cdFx0YmluZFRvQ29udHJvbGxlcjogdHJ1ZVxuXHR9XG5cblx0LyogQG5nSW5qZWN0ICovXG5cdGZ1bmN0aW9uIGxpbmtGdW5jKHNjb3BlLCBlbCwgYXR0ciwgY3RybCkge1xuICAgIH1cblxuICAgIHByZGN0VGhtYm5sQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGxvZyddO1xuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIHByZGN0VGhtYm5sQ29udHJvbGxlcigkc2NvcGUsICRsb2cpIHtcblx0ICAgIHZhciB2bSA9IHRoaXM7XG5cblx0ICAgIC8vJGxvZy5pbmZvKCdpbiB0aGUgcHJkY3RUaG1ibmwgZGlyZWN0aXZlJyk7XG5cblx0fVxuXG5cdHJldHVybiAgZGlyZWN0aXZlO1xufSIsIi8qIHNlbGVjdERlbGl2ZXJ5TWV0aG9kLmRpcmVjdGl2ZS5qcyAqL1xuXG4vKipcbiogQGRlc2MgdG9vbGJhciBkaXJlY3RpdmUgdGhhdCBpcyB1c2VkIG9uIHRoZSBtYWluIHBhZ2UgYWNyb3NzIHRoZSBlbnRpcmUgYXBwLlxuKiBAZXhhbXBsZSA8ZGl2IHNlbGVjdC1kZWxpdmVyeS1tZXRob2Q+PC9kaXY+XG4qL1xuXG5hbmd1bGFyXG5cdC5tb2R1bGUoJ2FoTnV0cycpXG5cdC5kaXJlY3RpdmUoJ3NlbGVjdERlbGl2ZXJ5TWV0aG9kJywgc2VsZWN0RGVsaXZlcnlNZXRob2QpO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIHNlbGVjdERlbGl2ZXJ5TWV0aG9kKCkge1xuXHR2YXIgZGlyZWN0aXZlID0ge1xuXHRcdHJlc3RyaWN0OiAnQUVDTScsXG5cdFx0dGVtcGxhdGVVcmw6ICd2aWV3cy9kaXJlY3RpdmVzL3NlbGVjdERlbGl2ZXJ5TWV0aG9kLmRpcmVjdGl2ZS5odG0nLFxuXHRcdHJlcGxhY2U6IHRydWUsXG5cdFx0c2NvcGU6IHtcblx0XHRcdHVzcHM6IFwiPVwiXG5cdFx0fSxcblx0XHRsaW5rOiBsaW5rRnVuYyxcblx0XHRjb250cm9sbGVyOiBzZWxlY3REZWxpdmVyeU1ldGhvZENvbnRyb2xsZXIsXG5cdFx0Y29udHJvbGxlckFzOiAndm0nLFxuXHRcdGJpbmRUb0NvbnRyb2xsZXI6IHRydWVcblx0fVxuXG5cdC8qIEBuZ0luamVjdCAqL1xuXHRmdW5jdGlvbiBsaW5rRnVuYyhzY29wZSwgZWwsIGF0dHIsIGN0cmwpIHtcbiAgICB9XG5cbiAgICBzZWxlY3REZWxpdmVyeU1ldGhvZENvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyRsb2cnXTtcbiAgICAvKiBAbmdJbmplY3QgKi9cbiAgICBmdW5jdGlvbiBzZWxlY3REZWxpdmVyeU1ldGhvZENvbnRyb2xsZXIoJHNjb3BlLCAkbG9nKSB7XG5cdCAgICB2YXIgdm0gPSB0aGlzO1xuXG5cdCAgICAvLyRsb2cuaW5mbygnaW4gdGhlIGhlYWRlciBkaXJlY3RpdmUnKTtcblxuXHR9XG5cblx0cmV0dXJuICBkaXJlY3RpdmU7XG59IiwiLyogc2VsZWN0UE9yRC5kaXJlY3RpdmUuanMgKi9cblxuLyoqXG4qIEBkZXNjIHRvb2xiYXIgZGlyZWN0aXZlIHRoYXQgaXMgdXNlZCBvbiB0aGUgbWFpbiBwYWdlIGFjcm9zcyB0aGUgZW50aXJlIGFwcC5cbiogQGV4YW1wbGUgPGRpdiBzZWxlY3QtcC1vci1kPjwvZGl2PlxuKi9cblxuYW5ndWxhclxuXHQubW9kdWxlKCdhaE51dHMnKVxuXHQuZGlyZWN0aXZlKCdzZWxlY3RQT3JEJywgc2VsZWN0UE9yRCk7XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gc2VsZWN0UE9yRCgpIHtcblx0dmFyIGRpcmVjdGl2ZSA9IHtcblx0XHRyZXN0cmljdDogJ0FFQ00nLFxuXHRcdHRlbXBsYXRlVXJsOiAndmlld3MvZGlyZWN0aXZlcy9zZWxlY3RQT3JELmRpcmVjdGl2ZS5odG0nLFxuXHRcdHJlcGxhY2U6IHRydWUsXG5cdFx0c2NvcGU6IHt9LFxuXHRcdGxpbms6IGxpbmtGdW5jLFxuXHRcdGNvbnRyb2xsZXI6IHNlbGVjdFBPckRDb250cm9sbGVyLFxuXHRcdGNvbnRyb2xsZXJBczogJ3ZtJyxcblx0XHRiaW5kVG9Db250cm9sbGVyOiB0cnVlXG5cdH1cblxuXHQvKiBAbmdJbmplY3QgKi9cblx0ZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsLCBhdHRyLCBjdHJsKSB7XG4gICAgfVxuXG4gICAgc2VsZWN0UE9yRENvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyRsb2cnXTtcbiAgICAvKiBAbmdJbmplY3QgKi9cbiAgICBmdW5jdGlvbiBzZWxlY3RQT3JEQ29udHJvbGxlcigkc2NvcGUsICRsb2cpIHtcblx0ICAgIHZhciB2bSA9IHRoaXM7XG5cblx0ICAgIC8vJGxvZy5pbmZvKCdpbiB0aGUgaGVhZGVyIGRpcmVjdGl2ZScpO1xuXG5cdH1cblxuXHRyZXR1cm4gIGRpcmVjdGl2ZTtcbn0iLCIvKiBzZWxlY3RQaWNrdXBMb2NhdGlvbi5kaXJlY3RpdmUuanMgKi9cblxuLyoqXG4qIEBkZXNjIHRvb2xiYXIgZGlyZWN0aXZlIHRoYXQgaXMgdXNlZCBvbiB0aGUgbWFpbiBwYWdlIGFjcm9zcyB0aGUgZW50aXJlIGFwcC5cbiogQGV4YW1wbGUgPGRpdiBzZWxlY3QtcGlja3VwLWxvY2F0aW9uPjwvZGl2PlxuKi9cblxuYW5ndWxhclxuXHQubW9kdWxlKCdhaE51dHMnKVxuXHQuZGlyZWN0aXZlKCdzZWxlY3RQaWNrdXBMb2NhdGlvbicsIHNlbGVjdFBpY2t1cExvY2F0aW9uKTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBzZWxlY3RQaWNrdXBMb2NhdGlvbigpIHtcblx0dmFyIGRpcmVjdGl2ZSA9IHtcblx0XHRyZXN0cmljdDogJ0FFQ00nLFxuXHRcdHRlbXBsYXRlVXJsOiAndmlld3MvZGlyZWN0aXZlcy9zZWxlY3RQaWNrdXBMb2NhdGlvbi5kaXJlY3RpdmUuaHRtJyxcblx0XHRyZXBsYWNlOiB0cnVlLFxuXHRcdHNjb3BlOiB7fSxcblx0XHRsaW5rOiBsaW5rRnVuYyxcblx0XHRjb250cm9sbGVyOiBzZWxlY3RQaWNrdXBMb2NhdGlvbkNvbnRyb2xsZXIsXG5cdFx0Y29udHJvbGxlckFzOiAndm0nLFxuXHRcdGJpbmRUb0NvbnRyb2xsZXI6IHRydWVcblx0fVxuXG5cdC8qIEBuZ0luamVjdCAqL1xuXHRmdW5jdGlvbiBsaW5rRnVuYyhzY29wZSwgZWwsIGF0dHIsIGN0cmwpIHtcbiAgICB9XG5cbiAgICBzZWxlY3RQaWNrdXBMb2NhdGlvbkNvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyRsb2cnXTtcbiAgICAvKiBAbmdJbmplY3QgKi9cbiAgICBmdW5jdGlvbiBzZWxlY3RQaWNrdXBMb2NhdGlvbkNvbnRyb2xsZXIoJHNjb3BlLCAkbG9nKSB7XG5cdCAgICB2YXIgdm0gPSB0aGlzO1xuXG5cdCAgICAvLyRsb2cuaW5mbygnaW4gdGhlIGhlYWRlciBkaXJlY3RpdmUnKTtcblxuXHR9XG5cblx0cmV0dXJuICBkaXJlY3RpdmU7XG59IiwiLyogc2l6ZVF0eVNlbGVjdG9yLmRpcmVjdGl2ZS5qcyAqL1xuXG4vKipcbiogQGRlc2MgdG9vbGJhciBkaXJlY3RpdmUgdGhhdCBpcyB1c2VkIG9uIHRoZSBtYWluIHBhZ2UgYWNyb3NzIHRoZSBlbnRpcmUgYXBwLlxuKiBAZXhhbXBsZSA8ZGl2IHNpemUtcXR5LXNlbGVjdG9yPjwvZGl2PlxuKi9cblxuYW5ndWxhclxuXHQubW9kdWxlKCdhaE51dHMnKVxuXHQuZGlyZWN0aXZlKCdzaXplUXR5U2VsZWN0b3InLCBzaXplUXR5U2VsZWN0b3IpO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIHNpemVRdHlTZWxlY3RvcigpIHtcblx0dmFyIGRpcmVjdGl2ZSA9IHtcblx0XHRyZXN0cmljdDogJ0FFQ00nLFxuXHRcdHRlbXBsYXRlVXJsOiAndmlld3MvZGlyZWN0aXZlcy9zaXplUXR5U2VsZWN0b3IuZGlyZWN0aXZlLmh0bScsXG5cdFx0cmVwbGFjZTogdHJ1ZSxcblx0XHRzY29wZToge1xuXHRcdFx0c2l6ZTogXCI9XCJcblx0XHR9LFxuXHRcdGxpbms6IGxpbmtGdW5jLFxuXHRcdGNvbnRyb2xsZXI6IHNpemVRdHlTZWxlY3RvckNvbnRyb2xsZXIsXG5cdFx0Y29udHJvbGxlckFzOiAndm0nLFxuXHRcdGJpbmRUb0NvbnRyb2xsZXI6IHRydWVcblx0fVxuXG5cdC8qIEBuZ0luamVjdCAqL1xuXHRmdW5jdGlvbiBsaW5rRnVuYyhzY29wZSwgZWwsIGF0dHIsIGN0cmwpIHtcbiAgICB9XG5cbiAgICBzaXplUXR5U2VsZWN0b3JDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsICckbG9nJ107XG4gICAgLyogQG5nSW5qZWN0ICovXG4gICAgZnVuY3Rpb24gc2l6ZVF0eVNlbGVjdG9yQ29udHJvbGxlcigkc2NvcGUsICRsb2cpIHtcblx0ICAgIHZhciB2bSA9IHRoaXM7XG5cblx0ICAgIC8vJGxvZy5pbmZvKCdpbiB0aGUgaGVhZGVyIGRpcmVjdGl2ZScpO1xuXHQgICAgdm0uaW5jcmltZW50ID0gZnVuY3Rpb24oKSB7IHZtLnNpemUucXR5Kys7IH1cblxuXHQgICAgdm0uZGVjcmltZW50ID0gZnVuY3Rpb24oKSB7XG5cdCAgICBcdGlmKHZtLnNpemUucXR5ID49IDEpIHZtLnNpemUucXR5LS07XG5cdCAgICB9XG5cdH1cblxuXHRyZXR1cm4gIGRpcmVjdGl2ZTtcbn0iLCIvKiB0b1ppcE9uRGF0ZS5kaXJlY3RpdmUuanMgKi9cblxuLyoqXG4qIEBkZXNjIHRvb2xiYXIgZGlyZWN0aXZlIHRoYXQgaXMgdXNlZCBvbiB0aGUgbWFpbiBwYWdlIGFjcm9zcyB0aGUgZW50aXJlIGFwcC5cbiogQGV4YW1wbGUgPGRpdiB0by16aXAtb24tZGF0ZT48L2Rpdj5cbiovXG5cbmFuZ3VsYXJcblx0Lm1vZHVsZSgnYWhOdXRzJylcblx0LmRpcmVjdGl2ZSgndG9aaXBPbkRhdGUnLCB0b1ppcE9uRGF0ZSk7XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gdG9aaXBPbkRhdGUoKSB7XG5cdHZhciBkaXJlY3RpdmUgPSB7XG5cdFx0cmVzdHJpY3Q6ICdBRUNNJyxcblx0XHR0ZW1wbGF0ZVVybDogJ3ZpZXdzL2RpcmVjdGl2ZXMvdG9aaXBPbkRhdGUuZGlyZWN0aXZlLmh0bScsXG5cdFx0cmVwbGFjZTogdHJ1ZSxcblx0XHRzY29wZToge1xuXHRcdFx0Z29pbmdUbzogXCI9XCIsXG5cdFx0XHR2aXBJZGVudGlmaWVkOiAnPScsXG5cdFx0XHRnb0ZuOiAnJidcblx0XHR9LFxuXHRcdGxpbms6IGxpbmtGdW5jLFxuXHRcdGNvbnRyb2xsZXI6IHRvWmlwT25EYXRlQ29udHJvbGxlcixcblx0XHRjb250cm9sbGVyQXM6ICd2bScsXG5cdFx0YmluZFRvQ29udHJvbGxlcjogdHJ1ZVxuXHR9XG5cblx0LyogQG5nSW5qZWN0ICovXG5cdGZ1bmN0aW9uIGxpbmtGdW5jKHNjb3BlLCBlbCwgYXR0ciwgY3RybCkge1xuXHRcdHNjb3BlLiR3YXRjaChcImZvcm0uemlwY29kZS4kdmFsaWRcIiwgZnVuY3Rpb24gemlwTW9uaXRvcihuZXdWYWx1ZSwgb2xkVmFsdWUpIHtcblx0XHRcdGNvbnNvbGUubG9nKCckdmFsaWQnLCBuZXdWYWx1ZSk7XG5cdFx0XHRpZihuZXdWYWx1ZSAmJiAoc2NvcGUuemlwY29kZSAhPSBcIlwiKSkgc2NvcGUuY29tcGxldGVkID0gdHJ1ZTtcblx0XHRcdGVsc2Ugc2NvcGUuY29tcGxldGVkID0gZmFsc2U7XG5cdFx0fSk7XG4gICAgfVxuXG4gICAgdG9aaXBPbkRhdGVDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsICckbG9nJywgJ3VzcHNTZXJ2aWNlcyddO1xuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIHRvWmlwT25EYXRlQ29udHJvbGxlcigkc2NvcGUsICRsb2csIHVzcHNTZXJ2aWNlcykge1xuXHQgICAgdmFyIHZtID0gdGhpcztcblxuXHQgICAgY29uc29sZS5sb2codm0uZ29Gbik7XG5cblx0ICAgIC8vJGxvZy5pbmZvKCdpbiB0aGUgaGVhZGVyIGRpcmVjdGl2ZScpO1xuXHQgICAgdm0uemlwY29kZUZpbmRlciA9IGZ1bmN0aW9uKCkge1xuXHQgICAgXHRhbGVydCgnZmluZGluZyB6aXBjb2RlJyk7XG5cdCAgICB9O1xuXG5cdCAgICB2bS5zdWJtaXRaaXAgPSBmdW5jdGlvbigpIHtcblx0ICAgIFx0Ly9jaGVjayBmb3IgYSB2YWxpZCBcblx0ICAgIFx0Y29uc29sZS5sb2coJ3Bhc3NlZCB0aHJvdWdoIGhlcmUnKTtcblx0ICAgIFx0Ly92bS5nb0ZuKCk7XG5cdCAgICB9O1xuXG5cdCAgICB2bS5jaGVja3ppcGNvZGUgPSBmdW5jdGlvbigpIHtcblxuXHQgICAgXHR1c3BzU2VydmljZXMuY2l0eVN0YXRlTG9va3VwKHZtLmdvaW5nVG8uemlwKVxuXHQgICAgXHQudGhlbihmdW5jdGlvbiBzdWNjZXMocykge1xuXG5cdCAgICBcdFx0Ly9pZiB0aGUgcmVzdWx0IGNvbWVzIGJhY2sgcG9zaXRpdmUsIHVwZGF0ZSB0aGUgdmFsdWVzXG5cdCAgICBcdFx0dm0uZ29pbmdUby5jaXR5ID0gcy5jaXR5O1xuXHQgICAgXHRcdHZtLmdvaW5nVG8uc3RhdGUgPSBzLnN0YXRlO1xuXG5cdCAgICBcdFx0JHNjb3BlLiRhcHBseSgpO1xuXHQgICAgXHRcdFxuXHQgICAgXHR9KS5jYXRjaChmdW5jdGlvbiBlcnJvcihlKSB7XG5cblx0ICAgIFx0fSk7XG5cdCAgICB9O1xuXHR9XG5cblx0cmV0dXJuICBkaXJlY3RpdmU7XG59IiwiLyogdXBzT3B0aW9ucy5kaXJlY3RpdmUuanMgKi9cblxuLyoqXG4qIEBkZXNjIHRvb2xiYXIgZGlyZWN0aXZlIHRoYXQgaXMgdXNlZCBvbiB0aGUgbWFpbiBwYWdlIGFjcm9zcyB0aGUgZW50aXJlIGFwcC5cbiogQGV4YW1wbGUgPGRpdiB1cHMtb3B0aW9ucz48L2Rpdj5cbiovXG5cbmFuZ3VsYXJcblx0Lm1vZHVsZSgnYWhOdXRzJylcblx0LmRpcmVjdGl2ZSgndXBzT3B0aW9ucycsIHVwc09wdGlvbnMpO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIHVwc09wdGlvbnMoKSB7XG5cdHZhciBkaXJlY3RpdmUgPSB7XG5cdFx0cmVzdHJpY3Q6ICdBRUNNJyxcblx0XHR0ZW1wbGF0ZVVybDogJ3ZpZXdzL2RpcmVjdGl2ZXMvdXBzT3B0aW9ucy5kaXJlY3RpdmUuaHRtJyxcblx0XHRyZXBsYWNlOiB0cnVlLFxuXHRcdHNjb3BlOiB7fSxcblx0XHRsaW5rOiBsaW5rRnVuYyxcblx0XHRjb250cm9sbGVyOiB1cHNPcHRpb25zQ29udHJvbGxlcixcblx0XHRjb250cm9sbGVyQXM6ICd2bScsXG5cdFx0YmluZFRvQ29udHJvbGxlcjogdHJ1ZVxuXHR9XG5cblx0LyogQG5nSW5qZWN0ICovXG5cdGZ1bmN0aW9uIGxpbmtGdW5jKHNjb3BlLCBlbCwgYXR0ciwgY3RybCkge1xuICAgIH1cblxuICAgIHVwc09wdGlvbnNDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsICckbG9nJ107XG4gICAgLyogQG5nSW5qZWN0ICovXG4gICAgZnVuY3Rpb24gdXBzT3B0aW9uc0NvbnRyb2xsZXIoJHNjb3BlLCAkbG9nKSB7XG5cdCAgICB2YXIgdm0gPSB0aGlzO1xuXG5cdCAgICAvLyRsb2cuaW5mbygnaW4gdGhlIGhlYWRlciBkaXJlY3RpdmUnKTtcblxuXHR9XG5cblx0cmV0dXJuICBkaXJlY3RpdmU7XG59IiwiLyogdXNlckRhc2hib2FyZC5kaXJlY3RpdmUuanMgKi9cblxuLyoqXG4qIEBkZXNjIHRvb2xiYXIgZGlyZWN0aXZlIHRoYXQgaXMgdXNlZCBvbiB0aGUgbWFpbiBwYWdlIGFjcm9zcyB0aGUgZW50aXJlIGFwcC5cbiogQGV4YW1wbGUgPGRpdiB1c2VyLWRhc2hib2FyZD48L2Rpdj5cbiovXG5cbmFuZ3VsYXJcblx0Lm1vZHVsZSgnYWhOdXRzJylcblx0LmRpcmVjdGl2ZSgndXNlckRhc2hib2FyZCcsIHVzZXJEYXNoYm9hcmQpO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIHVzZXJEYXNoYm9hcmQoKSB7XG5cdHZhciBkaXJlY3RpdmUgPSB7XG5cdFx0cmVzdHJpY3Q6ICdBRUNNJyxcblx0XHR0ZW1wbGF0ZVVybDogJ3ZpZXdzL2RpcmVjdGl2ZXMvdXNlckRhc2hib2FyZC5kaXJlY3RpdmUuaHRtJyxcblx0XHRyZXBsYWNlOiB0cnVlLFxuXHRcdHNjb3BlOiB7fSxcblx0XHRsaW5rOiBsaW5rRnVuYyxcblx0XHRjb250cm9sbGVyOiB1c2VyRGFzaGJvYXJkQ29udHJvbGxlcixcblx0XHRjb250cm9sbGVyQXM6ICd2bScsXG5cdFx0YmluZFRvQ29udHJvbGxlcjogdHJ1ZVxuXHR9XG5cblx0LyogQG5nSW5qZWN0ICovXG5cdGZ1bmN0aW9uIGxpbmtGdW5jKHNjb3BlLCBlbCwgYXR0ciwgY3RybCkge1xuICAgIH1cblxuICAgIHVzZXJEYXNoYm9hcmRDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsICckbG9nJywgJyRsb2NhdGlvbiddO1xuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIHVzZXJEYXNoYm9hcmRDb250cm9sbGVyKCRzY29wZSwgJGxvZywgJGxvY2F0aW9uKSB7XG5cdCAgICB2YXIgdm0gPSB0aGlzO1xuXG5cdCAgICAkbG9nLmluZm8oJ2luIHRoZSB1c2VyRGFzaGJvYXJkIGRpcmVjdGl2ZScpO1xuXG5cdCAgICAvL2RlZmluZSB2aWV3bW9kZWwgZnVuY3Rpb25zXG5cblx0fVxuXG5cdHJldHVybiAgZGlyZWN0aXZlO1xufSIsIi8qIHVzcHNPcHRpb25zLmRpcmVjdGl2ZS5qcyAqL1xuXG4vKipcbiogQGRlc2MgdG9vbGJhciBkaXJlY3RpdmUgdGhhdCBpcyB1c2VkIG9uIHRoZSBtYWluIHBhZ2UgYWNyb3NzIHRoZSBlbnRpcmUgYXBwLlxuKiBAZXhhbXBsZSA8ZGl2IHVzcHMtb3B0aW9ucz48L2Rpdj5cbiovXG5cbmFuZ3VsYXJcblx0Lm1vZHVsZSgnYWhOdXRzJylcblx0LmRpcmVjdGl2ZSgndXNwc09wdGlvbnMnLCB1c3BzT3B0aW9ucyk7XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gdXNwc09wdGlvbnMoKSB7XG5cdHZhciBkaXJlY3RpdmUgPSB7XG5cdFx0cmVzdHJpY3Q6ICdBRUNNJyxcblx0XHR0ZW1wbGF0ZVVybDogJ3ZpZXdzL2RpcmVjdGl2ZXMvdXNwc09wdGlvbnMuZGlyZWN0aXZlLmh0bScsXG5cdFx0cmVwbGFjZTogdHJ1ZSxcblx0XHRzY29wZToge1xuXHRcdFx0b3B0aW9uczogXCI9XCJcblx0XHR9LFxuXHRcdGxpbms6IGxpbmtGdW5jLFxuXHRcdGNvbnRyb2xsZXI6IHVzcHNPcHRpb25zQ29udHJvbGxlcixcblx0XHRjb250cm9sbGVyQXM6ICd2bScsXG5cdFx0YmluZFRvQ29udHJvbGxlcjogdHJ1ZVxuXHR9XG5cblx0LyogQG5nSW5qZWN0ICovXG5cdGZ1bmN0aW9uIGxpbmtGdW5jKHNjb3BlLCBlbCwgYXR0ciwgY3RybCkge1xuICAgIH1cblxuICAgIHVzcHNPcHRpb25zQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGxvZyddO1xuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIHVzcHNPcHRpb25zQ29udHJvbGxlcigkc2NvcGUsICRsb2cpIHtcblx0ICAgIHZhciB2bSA9IHRoaXM7XG5cblxuXHR9XG5cblx0cmV0dXJuICBkaXJlY3RpdmU7XG59IiwiYW5ndWxhclxuICAgIC5tb2R1bGUoJ2FoTnV0cycpXG4gICAgLmZhY3RvcnkoJ2RhdGFTZXJ2aWNlcycsIGRhdGFTZXJ2aWNlcyk7XG5cbmRhdGFTZXJ2aWNlcy4kaW5qZWN0ID0gWyckbG9nJywgJyRodHRwJ107XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gZGF0YVNlcnZpY2VzKCRsb2csICRodHRwKSB7XG5cblx0dmFyIGRhdGFTZXJ2aWNlc09iamVjdCA9IHtcblx0XHRnZXQ6IGdldCxcblx0XHRwb3N0OiBwb3N0XG5cdH07XG5cblx0Ly9kZWZpbmUgYWxsIG1ldGhvZHNcblx0ZnVuY3Rpb24gZ2V0KHVybCwgY29uZmlnKSB7XG5cblx0XHQvL3JldHVybiBhIHByb21pc2UgZm9yIGFzeW5jIHdvcmtcblx0XHRyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG5cdFx0XHRcblx0XHRcdCRodHRwLmdldCh1cmwsIGNvbmZpZylcblx0XHRcdC50aGVuKGZ1bmN0aW9uIHN1Y2Nlc3Mocykge1xuXG5cdFx0XHRcdHJlc29sdmUocy5kYXRhKTtcblxuXHRcdFx0fSwgZnVuY3Rpb24gZXJyb3IoZSkge1xuXG5cdFx0XHRcdHJlamVjdChlKTtcblx0XHRcdH0pO1xuXG5cdFx0fSk7XG5cblx0fTtcblxuXHRmdW5jdGlvbiBwb3N0KHVybCwgZGF0YSwgY29uZmlnKSB7XG5cblx0XHQvL3JldHVybiBhIHByb21pc2UgZm9yIGFzeW5jIHdvcmtcblx0XHRyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG5cdFx0XHRcblx0XHRcdCRodHRwLnBvc3QodXJsLCBkYXRhLCBjb25maWcpXG5cdFx0XHQudGhlbihmdW5jdGlvbiBzdWNjZXNzKHJlc3BvbnNlKSB7XG5cblx0XHRcdFx0cmVzb2x2ZShyZXNwb25zZS5kYXRhKTtcblxuXHRcdFx0fSwgZnVuY3Rpb24gZXJyb3IoZSkge1xuXG5cdFx0XHRcdHJlamVjdChlKTtcblx0XHRcdH0pO1xuXG5cdFx0fSk7XG5cblx0fTtcblxuXHRyZXR1cm4gZGF0YVNlcnZpY2VzT2JqZWN0O1xufSIsImFuZ3VsYXJcbiAgICAubW9kdWxlKCdhaE51dHMnKVxuICAgIC5mYWN0b3J5KCdzaG9wcGluZ0NhcnQnLCBzaG9wcGluZ0NhcnQpO1xuXG5zaG9wcGluZ0NhcnQuJGluamVjdCA9IFsnJGxvZycsICckaHR0cCcsICckd2luZG93J107XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gc2hvcHBpbmdDYXJ0KCRsb2csICRodHRwLCAkd2luZG93KSB7XG5cblx0dmFyIHNob3BwaW5nQ2FydE9iamVjdCA9IHtcblx0XHRpc0VtcHR5OiB0cnVlLFxuXHRcdG9yZGVyTnVtYmVyOiB1bmRlZmluZWQsXG5cdFx0YXF1aXNpdGlvbk1ldGhvZDogdW5kZWZpbmVkLFxuXHRcdG5vT2ZJdGVtczogMCxcblx0XHRzdWJ0b3RhbDogMCxcblx0XHRzaGlwcGluZ1ByaWNlOiAwLFxuXHRcdGRpc2NvdW50czogMCxcblx0XHR0b3RhbENvc3Q6IDAsXG5cdFx0YXF1aXNpdGlvbkRldGFpbHM6IHtcblx0XHRcdGRlbFppcElkZW50aWZpZWQ6IGZhbHNlLFxuXHRcdFx0ZGVsRGF0ZUlkZW50aWZpZWQ6IGZhbHNlLFxuXHRcdFx0c2hpcHBlZE9yUFVTZWxlY3RlZDogZmFsc2UsXG5cdFx0XHR3aWxsU2hpcHBwOiBmYWxzZSxcblx0XHRcdHdpbGxQVTogZmFsc2UsXG5cdFx0XHRwdUxvY1NlbGVjdGVkOiBmYWxzZSxcblx0XHRcdGRlbE10aFNlbGVjdGVkOiBmYWxzZSxcblx0XHRcdHBpY2t1cExvY2F0aW9uOiB7fSxcblx0XHRcdGRlbGl2ZXJ5TG9jYXRpb246IHtcblx0XHRcdFx0cmVjZWl2ZXI6IHtcblx0XHRcdFx0XHRmaXJzdDogXCJcIixcblx0XHRcdFx0XHRsYXN0OiBcIlwiXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHN0cmVldDE6IFwiXCIsXG5cdFx0XHRcdHN0cmVldDI6IFwiXCIsXG5cdFx0XHRcdHN0cmVldDM6IFwiXCIsXG5cdFx0XHRcdGNpdHk6IFwiXCIsXG5cdFx0XHRcdHN0YXRlOiBcIlwiLFxuXHRcdFx0XHR6aXA6IFwiXCJcblx0XHRcdH0sXG5cdFx0XHRkZWxpdmVyeU1ldGhvZDoge1xuXHRcdFx0XHRzaGlwcGluZ09yaWdpbjogXCJcIlxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0cGF5bWVudERldGFpbHM6IHt9LFxuXHRcdGl0ZW1zOiB7fSxcblx0XHRfc2F2ZVRvQnJvd3NlcjogX3NhdmVUb0Jyb3dzZXIsXG5cdFx0X2dldENhcnQ6IF9nZXRDYXJ0LCBcblx0XHRfcmVtb3ZlQ2FydDogX3JlbW92ZUNhcnQsXG5cdFx0X2FkZE5ld0l0ZW06IF9hZGROZXdJdGVtLFxuXHRcdF9jb3VudE5vSXRlbXM6IF9jb3VudE5vSXRlbXMsXG5cdFx0X2NhbGNTdWJ0b3RhbDogX2NhbGNTdWJ0b3RhbCxcblx0XHRpbml0OiBpbml0LFxuXHRcdGFkZEl0ZW06IGFkZEl0ZW0sXG5cdFx0cmVtb3ZlSXRlbTogcmVtb3ZlSXRlbSxcblx0XHR1cGRhdGVBcXVpc2l0aW9uTWV0aG9kOiB1cGRhdGVBcXVpc2l0aW9uTWV0aG9kLFxuXHRcdGNhbGNUb3RhbENvc3Q6IGNhbGNUb3RhbENvc3QsXG5cdFx0dXBkYXRlSXRlbVF0eTogdXBkYXRlSXRlbVF0eSxcblx0XHRhY3FNZXRoSXNEZWZpbmVkOiBhY3FNZXRoSXNEZWZpbmVkXG5cdH07XG5cblx0ZnVuY3Rpb24gaW5pdCgpIHtcblx0XHQvL1RPRE86IENMRUFOIFRISVMgVVAgTEFURVIsIE1BWUJFIEFERCBBUyBTRVBFUkFURSBTRVJWSUNFXG5cdFx0dmFyIHNlbGYgPSB0aGlzO1xuXG5cdFx0Ly9cblx0XHRpZigkd2luZG93LnNlc3Npb25TdG9yYWdlLmdldEl0ZW0oJ2FoLW51dHMtY2FydCcpICE9IG51bGwpIHtcblx0XHRcdHZhciBzYXZlZENhcnQgPSBKU09OLnBhcnNlKCR3aW5kb3cuc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbSgnYWgtbnV0cy1jYXJ0JykpO1xuXG5cdFx0XHRzZWxmLmlzRW1wdHkgPSBzYXZlZENhcnQuaXNFbXB0eTtcblx0XHRcdHNlbGYub3JkZXJOdW1iZXIgPSBzYXZlZENhcnQub3JkZXJOdW1iZXI7XG5cdFx0XHRzZWxmLmFxdWlzaXRpb25NZXRob2QgPSBzYXZlZENhcnQuYXF1aXNpdGlvbk1ldGhvZDtcblx0XHRcdHNlbGYubm9PZkl0ZW1zID0gc2F2ZWRDYXJ0Lm5vT2ZJdGVtcztcblx0XHRcdHNlbGYuc3VidG90YWwgPSBzYXZlZENhcnQuc3VidG90YWw7XG5cdFx0XHRzZWxmLnNoaXBwaW5nUHJpY2UgPSBzYXZlZENhcnQuc2hpcHBpbmdQcmljZTtcblx0XHRcdHNlbGYuZGlzY291bnRzID0gc2F2ZWRDYXJ0LmRpc2NvdW50cztcblx0XHRcdHNlbGYudG90YWxDb3N0ID0gc2F2ZWRDYXJ0LnRvdGFsQ29zdDtcblx0XHRcdHNlbGYuYXF1aXNpdGlvbkRldGFpbHMgPSBzYXZlZENhcnQuYXF1aXNpdGlvbkRldGFpbHM7XG5cdFx0XHRzZWxmLml0ZW1zID0gc2F2ZWRDYXJ0Lml0ZW1zO1xuXHRcdH1cblxuXHRcdGNvbnNvbGUubG9nKHNlbGYpO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBfc2F2ZVRvQnJvd3NlcigpIHtcblx0XHR2YXIgc2VsZiA9IHRoaXM7XG5cdFx0dmFyIGNhcnQgPSB7XG5cdFx0XHRpc0VtcHR5OiBzZWxmLmlzRW1wdHksXG5cdFx0XHRvcmRlck51bWJlcjogc2VsZi5vcmRlck51bWJlcixcblx0XHRcdGFxdWlzaXRpb25NZXRob2Q6IHNlbGYuYXF1aXNpdGlvbk1ldGhvZCxcblx0XHRcdG5vT2ZJdGVtczogc2VsZi5ub09mSXRlbXMsXG5cdFx0XHRzdWJ0b3RhbDogc2VsZi5zdWJ0b3RhbCxcblx0XHRcdHNoaXBwaW5nUHJpY2U6IHNlbGYuc2hpcHBpbmdQcmljZSxcblx0XHRcdGRpc2NvdW50czogc2VsZi5kaXNjb3VudHMsXG5cdFx0XHR0b3RhbENvc3Q6IHNlbGYudG90YWxDb3N0LFxuXHRcdFx0YXF1aXNpdGlvbkRldGFpbHM6IHNlbGYuYXF1aXNpdGlvbkRldGFpbHMsXG5cdFx0XHRpdGVtczogc2VsZi5pdGVtc1xuXHRcdH07XG5cdFx0JHdpbmRvdy5zZXNzaW9uU3RvcmFnZS5zZXRJdGVtKCdhaC1udXRzLWNhcnQnLCBKU09OLnN0cmluZ2lmeShjYXJ0KSk7XG5cdH07XG5cblx0ZnVuY3Rpb24gX2dldENhcnQoKSB7XG5cdFx0cmV0dXJuICR3aW5kb3cuc2Vzc2lvblN0b3JhZ2VbJ2FoLW51dHMtY2FydCddO1xuXHR9O1xuXG5cdGZ1bmN0aW9uIF9yZW1vdmVDYXJ0KCkge1xuXHRcdCR3aW5kb3cuc2Vzc2lvblN0b3JhZ2UucmVtb3ZlSXRlbSgnYWgtbnV0cy1jYXJ0Jyk7XG5cdH07XG5cblx0ZnVuY3Rpb24gX2FkZE5ld0l0ZW0obmV3SXRlbSkge1xuXHRcdC8vZGVmaW5lIGxvY2FsIHZhcmlhYmxlc1xuXHRcdHZhciByZXR1cm5PYmplY3QgPSB7fTtcblxuXHRcdC8vaXRyYXRlIHRocm91Z2ggYWxsIHRoZSBvYmplY3RzLCBhbmQgYWRkIHRoZW0uXG5cdFx0T2JqZWN0LmtleXMobmV3SXRlbSkuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcblx0XHRcdHJldHVybk9iamVjdFtrZXldID0gbmV3SXRlbVtrZXldO1xuXHRcdH0pO1xuXG5cdFx0Y29uc29sZS5sb2coJ2FkZGluZyB0aGlzIG5ldyBpdGVtJywgcmV0dXJuT2JqZWN0KTtcblxuXHRcdHJldHVybiByZXR1cm5PYmplY3Q7XG5cdH07XG5cblx0ZnVuY3Rpb24gX2NvdW50Tm9JdGVtcyhhbGxJdGVtcykge1xuXHRcdC8vZGVmaW5lIGxvY2FsIHZhcmlhYmxlc1xuXHRcdHZhciBzZWxmID0gdGhpcztcblx0XHR2YXIgbmV3VG90YWwgPSAwO1xuXG5cdFx0Y29uc29sZS5sb2coJ2FsbEl0ZW1zJywgYWxsSXRlbXMpO1xuXG5cdFx0Ly9pdGVyYXRlIHRocm91Z2ggdGhlIGl0ZW1zIGxpc3Rcblx0XHRPYmplY3Qua2V5cyhhbGxJdGVtcykuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcblx0XHRcdC8vY29uc29sZS5sb2coa2V5LCBhbGxJdGVtc1trZXldKVxuXHRcdFx0bmV3VG90YWwgKz0gYWxsSXRlbXNba2V5XS5xdHk7XG5cdFx0fSk7XG5cblx0XHRjb25zb2xlLmxvZygnX2NvdW50Tm9JdGVtcycsIG5ld1RvdGFsKTtcblxuXHRcdC8vaWYgbm8gaXRlbXMgd2hlcmUgZm91bmQsIG1ha2Ugc3VyZSBjYXJ0IGlzIGRlc2lnbmF0ZWQgZW1wdHlcblx0XHRpZihuZXdUb3RhbCA9PSAwKSBzZWxmLmlzRW1wdHkgPSB0cnVlO1xuXG5cdFx0cmV0dXJuIG5ld1RvdGFsO1xuXHR9O1xuXG5cdGZ1bmN0aW9uIF9jYWxjU3VidG90YWwoYWxsSXRlbXMpIHtcblx0XHQvL2RlZmluZSBsb2NhbCB2YXJpYWJsZXNcblx0XHR2YXIgbmV3VG90YWwgPSAwO1xuXG5cdFx0Ly9pdGVyYXRlIHRocm91Z2ggdGhlIGl0ZW1zIGxpc3Rcblx0XHRPYmplY3Qua2V5cyhhbGxJdGVtcykuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcblx0XHRcdG5ld1RvdGFsICs9IChhbGxJdGVtc1trZXldLnF0eSAqIGFsbEl0ZW1zW2tleV0ucHJpY2UpO1xuXHRcdH0pO1xuXG5cdFx0Ly9jb25zb2xlLmxvZygnX2NhbGNTdWJ0b3RhbCcsIG5ld1RvdGFsKTtcblxuXHRcdHJldHVybiBuZXdUb3RhbDtcblx0fTtcblxuXHRmdW5jdGlvbiBhZGRJdGVtKG5ld0l0ZW0pIHtcblx0XHQvL2RlZmluZSBsb2NhbCB2YXJpYWJsZXNcblx0XHR2YXIgc2VsZiA9IHRoaXM7XG5cdFx0dmFyIGl0bUNvZGUgPSBuZXdJdGVtLmNvZGU7XG5cblx0XHQvL2lmIHdlJ3JlIGFkZGluZyBzb21ldGhpbmcgdGhlbiB0aGUgY2FydCBjYW4ndCBiZSBlbXB0eVxuXHRcdHNlbGYuaXNFbXB0eSA9IGZhbHNlO1xuXG5cdFx0Ly9maXJzdCwgYXJlIHdlIGFkZGluZyBxdHkgb3IgbmV3IHByb2R1Y3QgY29kZXNcblx0XHRpZihzZWxmLml0ZW1zW2l0bUNvZGVdID09IHVuZGVmaW5lZCkge1xuXHRcdFx0Ly8gdGhpcyBpcyBhbiBpdGVtIGNvZGUgdGhhdCBoYXMgbmV2ZXIgYmVlbiBhZGRlZFxuXHRcdFx0Y29uc29sZS5sb2coJ2FkZGluZyBhIG5ldyBpdGVtJyk7XG5cblx0XHRcdC8vaW50aWFsaXplIHRoZSBvYmplY3QgaW4gaXRlbXMgbGlzdFxuXHRcdFx0c2VsZi5pdGVtc1tpdG1Db2RlXSA9IF9hZGROZXdJdGVtKG5ld0l0ZW0pO1xuXG5cdFx0XHQvL3VwZGF0ZSBub09mSXRlbXNcblx0XHRcdHNlbGYubm9PZkl0ZW1zID0gX2NvdW50Tm9JdGVtcyhzZWxmLml0ZW1zKTtcblxuXHRcdFx0Ly91cGRhdGUgc3ViVG90YWxcblx0XHRcdHNlbGYuc3VidG90YWwgPSBfY2FsY1N1YnRvdGFsKHNlbGYuaXRlbXMpO1xuXG5cdFx0fSAgZWxzZSB7XG5cdFx0XHQvLyB0aGlzIGl0ZW0gY29kZSBoYXMgYmVlbiBhZGRlZCBiZWZvcmUsIGp1c3QgdXBkYXRlIHRoZSBxdHlcblx0XHRcdGNvbnNvbGUubG9nKCd1cGRhdGluZyBhIG5ldyBxdHknKTtcblx0XHR9XG5cblx0XHQvL2FmdGVyIHNhdmluZyBpdCB0byB0aGUgY2FydCwgdGhlbiBzYXZlIGl0IHRvIHRoZSBicm93c2VyIHNlc3Npb25cblx0XHRzZWxmLl9zYXZlVG9Ccm93c2VyKCk7XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fTtcblxuXHRmdW5jdGlvbiByZW1vdmVJdGVtKHByb2R1Y3RJZCkge1xuXHRcdHZhciBzZWxmID0gdGhpcztcblxuXHRcdC8vaXRlcmF0ZSB0aHJvdWdoIHRoZSBsaXN0IG9mIGl0ZW1zXG5cdFx0T2JqZWN0LmtleXMoc2VsZi5pdGVtcykuZm9yRWFjaChmdW5jdGlvbiBrZXlTZWFyY2goa2V5KSB7XG5cblx0XHRcdC8vaWYgdGhlIGtleSBtYXRjaGVzIHRoZSBwcm9kdWN0SWQsIHJlbW92ZSBpdFxuXHRcdFx0Y29uc29sZS5sb2coa2V5LCBwcm9kdWN0SWQpO1xuXG5cdFx0XHRpZihrZXkgPT0gcHJvZHVjdElkKSBkZWxldGUgc2VsZi5pdGVtc1trZXldO1xuXG5cdFx0fSk7XG5cblx0XHQvL3VwZGF0ZSB0aGUgc3VidG90YWxcblx0XHRzZWxmLm5vT2ZJdGVtcyA9IHNlbGYuX2NvdW50Tm9JdGVtcyhzZWxmLml0ZW1zKTtcblxuXHRcdC8vdXBkYXRlIHRoZSBpdGVtIG51bWJlclxuXHRcdHNlbGYuc3VidG90YWwgPSBzZWxmLl9jYWxjU3VidG90YWwoc2VsZi5pdGVtcyk7XG5cblx0XHQvL3VwZGF0ZSB0aGUgdG90YWwgY29zdFxuXHRcdHNlbGYuY2FsY1RvdGFsQ29zdCgpO1xuXG5cdFx0Ly9zYXZlIGNoYW5nZXMgdG8gdGhlIGJyb3dzZXJcblx0XHRzZWxmLl9zYXZlVG9Ccm93c2VyKCk7XHRcblx0fTtcblxuXHRmdW5jdGlvbiB1cGRhdGVBcXVpc2l0aW9uTWV0aG9kKCkge1xuXHRcdC8vZGVmaW5lIGxvY2FsIHZhcmlhYmxlc1xuXHRcdHZhciBzZWxmID0gdGhpcztcblxuXHRcdC8vc2F2ZSB0aGUgY2hhbmdlc1xuXHRcdHNlbGYuX3NhdmVUb0Jyb3dzZXIoKTtcblx0fTtcblxuXHRmdW5jdGlvbiBjYWxjVG90YWxDb3N0KCkge1xuXHRcdC8vZGVmaW5lIGxvY2FsIHZhcmlhYmxlc1xuXHRcdHZhciBzZWxmID0gdGhpcztcblxuXHRcdHNlbGYudG90YWxDb3N0ID0gc2VsZi5zdWJ0b3RhbCArIHNlbGYuc2hpcHBpbmdQcmljZSArIHNlbGYuZGlzY291bnRzO1xuXHR9O1xuXG5cdGZ1bmN0aW9uIHVwZGF0ZUl0ZW1RdHkoaXRlbUlkLCBxdHkpIHtcblx0XHQvL2RlZmluZSBsb2NhbCB2YXJpYWJsZXNcblx0XHR2YXIgc2VsZiA9IHRoaXM7XG5cblx0XHQvL2lmIHRoZSBxdHkgaXMgMCBqdXN0IHJlbW92ZSB0aGUgaXRlbVxuXHRcdGlmKHBhcnNlSW50KHF0eSkgPT0gMCkge1xuXHRcdFx0c2VsZi5yZW1vdmVJdGVtKGl0ZW1JZCk7XG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cblx0XHQvL3VwZGF0ZSB0aGUgdmFsdWVcblx0XHRzZWxmLml0ZW1zW2l0ZW1JZF0ucXR5ID0gcGFyc2VJbnQocXR5KTtcblxuXHRcdC8vdXBkYXRlIHRoZSBzdWJ0b3RhbFxuXHRcdHNlbGYubm9PZkl0ZW1zID0gc2VsZi5fY291bnROb0l0ZW1zKHNlbGYuaXRlbXMpO1xuXG5cdFx0Ly91cGRhdGUgdGhlIGl0ZW0gbnVtYmVyXG5cdFx0c2VsZi5zdWJ0b3RhbCA9IHNlbGYuX2NhbGNTdWJ0b3RhbChzZWxmLml0ZW1zKTtcblxuXHRcdC8vdXBkYXRlIHRoZSB0b3RhbCBjb3N0XG5cdFx0c2VsZi5jYWxjVG90YWxDb3N0KCk7XG5cblx0XHQvL3NhdmUgY2hhbmdlcyB0byB0aGUgYnJvd3NlclxuXHRcdHNlbGYuX3NhdmVUb0Jyb3dzZXIoKTtcdFxuXG5cdH07XG5cblx0ZnVuY3Rpb24gYWNxTWV0aElzRGVmaW5lZCgpIHtcblx0XHR2YXIgc2VsZiA9IHRoaXM7XG5cblx0XHRpZihzZWxmLmFxdWlzaXRpb25NZXRob2QgPT0gdW5kZWZpbmVkKSByZXR1cm4gZmFsc2U7XG5cdFx0ZWxzZSByZXR1cm4gdHJ1ZTtcblx0fTtcblxuXHRyZXR1cm4gc2hvcHBpbmdDYXJ0T2JqZWN0O1xufVxuIiwiYW5ndWxhclxuICAgIC5tb2R1bGUoJ2FoTnV0cycpXG4gICAgLmZhY3RvcnkoJ3Rlc3RPYmplY3QnLCB0ZXN0T2JqZWN0KTtcblxudGVzdE9iamVjdC4kaW5qZWN0ID0gWyckbG9nJ107XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gdGVzdE9iamVjdCgkbG9nKSB7XG5cblx0dmFyIHRlc3RPYmplY3RPYmplY3QgPSB7XG5cdFx0aW1hZ2U6IHVuZGVmaW5lZCxcblx0XHRjb2RlOiAxMjAzLFxuXHRcdHJhdGluZzogdW5kZWZpbmVkLFxuXHRcdG5hbWU6IFwiU3BlY2lhbHR5IENvbmVzXCIsXG5cdFx0c2l6ZXM6IFtcblx0XHRcdHsgY29kZTogMTIwMzAwMSwgdGl0bGU6IFwiSW1wcmVzc2l2ZVwiLCBvejogMTYsIHByaWNlOiAxODAwIH0sXG5cdFx0XHR7IGNvZGU6IDEyMDMwMDIsIHRpdGxlOiBcIkF2ZXJhZ2VcIiwgb3o6IDgsIHByaWNlOiAxMzAwIH0sXG5cdFx0XHR7IGNvZGU6IDEyMDMwMDMsIHRpdGxlOiBcIlNtYWxsXCIsIG96OiA0LCBwcmljZTogNzAwIH1cblx0XHRdLFxuXHRcdGRlc2NyaXB0aW9uOiBcIlRoZSBtb3N0IGFtYXppbmcgcGVjYW5zIHlvdSd2ZSBldmVyIHRhc3RlXCIsXG5cdFx0aW5ncmVkaWVudHM6IFsnUGVjYW5zJywgJ1N1Z2FyJywgJ1ZhbmlsbGEnLCAnU2FsdCddXG5cdH07XG5cblxuXHRyZXR1cm4gdGVzdE9iamVjdE9iamVjdDtcbn1cbiIsImFuZ3VsYXJcbiAgICAubW9kdWxlKCdhaE51dHMnKVxuICAgIC5zZXJ2aWNlKCd1c2VyQXV0aGVudGljYXRpb24nLCB1c2VyQXV0aGVudGljYXRpb24pO1xuXG51c2VyQXV0aGVudGljYXRpb24uJGluamVjdCA9IFsnJGh0dHAnLCAnJHdpbmRvdyddO1xuXG5mdW5jdGlvbiB1c2VyQXV0aGVudGljYXRpb24gKCRodHRwLCAkd2luZG93KSB7XG5cblx0dmFyIHVzZXJBdXRoID0ge1xuXHRcdHNhdmVUb2tlbjogc2F2ZVRva2VuLFxuXHRcdGdldFRva2VuOiBnZXRUb2tlbixcblx0XHRsb2dPdXQ6IGxvZ091dCxcblx0XHRpc0xvZ2dlZEluOiBpc0xvZ2dlZEluLFxuXHRcdGN1cnJlbnRVc2VyOiBjdXJyZW50VXNlclxuXHR9O1xuXG5cblx0ZnVuY3Rpb24gc2F2ZVRva2VuKHRva2VuKSB7XG5cdFx0JHdpbmRvdy5sb2NhbFN0b3JhZ2VbJ2FoLW51dHMtdG9rZW4nXSA9IHRva2VuO1xuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0VG9rZW4oKSB7XG5cdFx0cmV0dXJuICR3aW5kb3cubG9jYWxTdG9yYWdlWydhaC1udXRzLXRva2VuJ107XG5cdH1cblxuXHRmdW5jdGlvbiBsb2dPdXQoKSB7XG5cdFx0JHdpbmRvdy5sb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSgnYWgtbnV0cy10b2tlbicpO1xuXHR9XG5cblx0ZnVuY3Rpb24gaXNMb2dnZWRJbigpIHtcblx0XHR2YXIgdG9rZW4gPSBnZXRUb2tlbigpO1xuXHRcdHZhciBwYXlsb2FkO1xuXG5cdFx0aWYodG9rZW4pIHtcblx0XHRcdHBheWxvYWQgPSB0b2tlbi5zcGxpdCgnLicpWzFdO1xuXHRcdFx0cGF5bG9hZCA9ICR3aW5kb3cuYXRvcChwYXlsb2FkKTtcblx0XHRcdHBheWxvYWQgPSBKU09OLnBhcnNlKHBheWxvYWQpO1xuXG5cdFx0XHRyZXR1cm4gcGF5bG9hZC5leHAgPiBEYXRlLm5vdygpIC8gMTAwMDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0fVxuXG5cdGZ1bmN0aW9uIGN1cnJlbnRVc2VyKCkge1xuXHRcdGlmKGlzTG9nZ2VkSW4oKSkge1xuXHRcdFx0dmFyIHRva2VuID0gZ2V0VG9rZW4oKTtcblx0XHRcdHZhciBwYXlsb2FkID0gdG9rZW4uc3BsaXQoJy4nKVsxXTtcblx0XHRcdHBheWxvYWQgPSAkd2luZG93LmF0b3AocGF5bG9hZCk7XG5cdFx0XHRwYXlsb2FkID0gSlNPTi5wYXJzZShwYXlsb2FkKTtcblx0XHRcdHJldHVybiBwYXlsb2FkO1xuXHRcdH1cblx0fVxufSIsImFuZ3VsYXJcbiAgICAubW9kdWxlKCdhaE51dHMnKVxuICAgIC5mYWN0b3J5KCd1c3BzU2VydmljZXMnLCB1c3BzU2VydmljZXMpO1xuXG51c3BzU2VydmljZXMuJGluamVjdCA9IFsnJGxvZycsICckaHR0cCddO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIHVzcHNTZXJ2aWNlcygkbG9nLCAkaHR0cCkge1xuXG5cdC8vZGVmaW5lIHRoZSBvYmplY3Rcblx0dmFyIHVzcHNTZXJ2aWNlcyA9IHtcblx0XHRfc2hpcHBpbmdSZXF1ZXN0OiB7XG5cdFx0XHRQYWNrYWdlSUQ6IFwiXCIsXG5cdFx0XHRTZXJ2aWNlOiBcIlwiLFxuXHRcdFx0WmlwT3JpZ2luYXRpb246IFwiXCIsXG5cdFx0XHRaaXBEZXN0aW5hdGlvbjogXCJcIixcblx0XHRcdFBvdW5kczogMCxcblx0XHRcdE91bmNlczogMCxcblx0XHRcdENvbnRhaW5lcjogXCJcIixcblx0XHRcdFNpemU6IFwiXCIsXG5cdFx0XHRXaWR0aDogMC4wLFxuXHRcdFx0TGVuZ3RoOiAwLjAsXG5cdFx0XHRIZWlnaHQ6IDAuMCxcblx0XHRcdEdpcnRoOiAwLjAsXG5cdFx0XHRWYWx1ZTogMC4wXG5cdFx0fSxcblx0XHRfc2hpcHBpbmdPcHRpb25zOiB7XG5cdFx0XHR6b25lczogW10sXG5cdFx0XHRwb3N0YWdlOiBbXVxuXHRcdH0sXG5cdFx0X3VzcHNVc2VybmFtZTogXCJcIixcblx0XHRfZ2VuZXJhbFBhcnNlOiBfZ2VuZXJhbFBhcnNlLFxuXHRcdF9maWx0ZXJQb3N0YWdlT3B0aW9uczogX2ZpbHRlclBvc3RhZ2VPcHRpb25zLFxuXHRcdF9wYXJzZUNpdHlTdGF0ZVJlc3BvbnNlOiBfcGFyc2VDaXR5U3RhdGVSZXNwb25zZSxcblx0XHRnZXRTaGlwcGluZ1JlcXVlc3Q6IGdldFNoaXBwaW5nUmVxdWVzdCxcblx0XHRjaXR5U3RhdGVMb29rdXA6IGNpdHlTdGF0ZUxvb2t1cCxcblx0XHRwcmljZUNhbGN1bGF0b3I6IHByaWNlQ2FsY3VsYXRvclxuXHR9O1xuXG5cdC8qXG5cdCpcdEdFTkVSQUwgUEFSU0Vcblx0Klx0XG5cdCpcdFRoaXMgZnVuY3Rpb24gdXNlcyBhIDNyZCBwYXJ0eSBzY3JpcHQgdG8gY29udmVydCB4bWwgdG8ganNvblxuXHQqL1xuXHRmdW5jdGlvbiBfZ2VuZXJhbFBhcnNlKHhtbCkge1xuXHRcdHZhciB4MmpzID0gbmV3IFgySlMoKTtcblx0XHR2YXIgYWZ0ZXJDbnYgPSB4MmpzLnhtbF9zdHIyanNvbih4bWwpO1xuXHRcdGNvbnNvbGUubG9nKGFmdGVyQ252KTtcblx0XHRyZXR1cm4gYWZ0ZXJDbnY7XG5cdH07XG5cblx0Lypcblx0Klx0RklMVEVSIFBPU1RBR0UgT1BUSU9OU1xuXHQqXG5cdCpcdFRoaXMgZnVuY3Rpb24gc2VsZWN0cyB0aGUgbW9zdCBjb3N0IGVmZmVjdGl2ZSBzaGlwcGluZyBvcmlnaW4gYW5kIHJldHVybnNcblx0Klx0YWxsIHRoZSBwb3N0YWdlIG9wdGlvbnMgZnJvbSB0aGF0IGxvY2F0aW9uXG5cdCpcdEBwYXJhbSBcImFsbE9wdGlvbnNcIiAtIGlzIGFsbCB0aGUgcmVzcG9uc2UgZGF0YSBmcm9tIFVTUFNcblx0Klx0QHJldHVybiBcImZpbHRlcmVkT3B0aW9uc1wiIC0gW10gaXMgYW4gYXJyYXkgb2YgdGhlIGJlc3Qgb3B0aW9uc1xuXHQqL1xuXHRmdW5jdGlvbiBfZmlsdGVyUG9zdGFnZU9wdGlvbnMoYWxsT3B0aW9ucykge1xuXHRcdC8vZGVmaW5lIGxvY2FsIHZhcmlhYmxlc1xuXHRcdHZhciBzZWxmID0gdGhpcztcblx0XHR2YXIgZmlsdGVyZWRPcHRpb25zID0ge307XG5cdFx0dmFyIHBhY2thZ2VMaXN0ID0gYWxsT3B0aW9ucy5SYXRlVjRSZXNwb25zZS5QYWNrYWdlO1xuXHRcdHZhciBjbG9zZXN0WmlwID0ge3ppcDogXCJcIiwgem9uZToxMDAgfTtcblxuXHRcdC8vaXRlcmF0ZSB0aHJvdWdoIHRoZSBwYWNrYWdlc1xuXHRcdE9iamVjdC5rZXlzKHBhY2thZ2VMaXN0KS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuXG5cdFx0XHQvL2RlZmluZSB0aGUgb3JpZ2luYXRpb24gbG9jYXRpb25cblx0XHRcdHZhciBaaXBPcmlnaW5hdGlvbiA9IHBhY2thZ2VMaXN0W2tleV0uWmlwT3JpZ2luYXRpb247XG5cblx0XHRcdC8vaWYgd2UgaGF2ZW4ndCBhZGRlZCB0aGlzIG9yaWdpbmF0aW9uIGxvY2F0aW9uIHRoZSBtb2RlbCwgZG8gc29cblx0XHRcdGlmKGZpbHRlcmVkT3B0aW9uc1taaXBPcmlnaW5hdGlvbl0gPT0gdW5kZWZpbmVkKSBmaWx0ZXJlZE9wdGlvbnNbWmlwT3JpZ2luYXRpb25dID0geyB6b25lOiAwLCBzZXJ2aWNlczogW10gfTtcblxuXHRcdFx0Ly9kZWZpbmUgdGhlIHpvbmVcblx0XHRcdGZpbHRlcmVkT3B0aW9uc1taaXBPcmlnaW5hdGlvbl0uem9uZSA9IHBhY2thZ2VMaXN0W2tleV0uWm9uZTtcblxuXHRcdFx0dmFyIHBvc3RhZ2UgPSB7XG5cdFx0XHRcdG1haWxTZXJ2aWNlOiBwYWNrYWdlTGlzdFtrZXldLlBvc3RhZ2UuTWFpbFNlcnZpY2UsXG5cdFx0XHRcdHJhdGU6IHBhY2thZ2VMaXN0W2tleV0uUG9zdGFnZS5SYXRlXG5cdFx0XHR9O1xuXG5cdFx0XHQvL3B1c2ggdGhlIHBvc3RhZ2Ugb3B0aW9ucyBmb3IgdGhpcyBwYWNrYWdlIG9udG8gdGhlIGxvY2F0aW9uXG5cdFx0XHRmaWx0ZXJlZE9wdGlvbnNbWmlwT3JpZ2luYXRpb25dLnNlcnZpY2VzLnB1c2gocG9zdGFnZSk7XG5cblx0XHR9KTtcblxuXHRcdC8vY2hlY2sgdGhlIHpvbmVzIHRvIHNoaXAgZnJvbSB0aGUgY2xvc2VzdCBsb2NhdGlvblxuXHRcdE9iamVjdC5rZXlzKGZpbHRlcmVkT3B0aW9ucykuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcblxuXHRcdFx0Ly9jb25zb2xlLmxvZyhmaWx0ZXJlZE9wdGlvbnNba2V5XS56b25lLCBrZXksIGNsb3Nlc3RaaXAuem9uZSwgZmlsdGVyZWRPcHRpb25zW2tleV0uem9uZSA8IGNsb3Nlc3RaaXAuem9uZSlcblx0XHRcdC8vc2F2ZSB0aGUgY2xvc2VzdCB6b25lXG5cdFx0XHRpZihmaWx0ZXJlZE9wdGlvbnNba2V5XS56b25lIDwgY2xvc2VzdFppcC56b25lKSBjbG9zZXN0WmlwID0geyB6aXA6IGtleSwgem9uZTpmaWx0ZXJlZE9wdGlvbnNba2V5XS56b25lIH1cblxuXHRcdH0pO1x0XG5cblx0XHQvL2l0ZXJhdGUgdGhyb3VnaCBhbGwgdGhlIG9iamVjdHMsIGRlbGV0ZSBhbGwgdGhhdCBhcmVuJ3QgdGhlIGNsb3Nlc3Rcblx0XHRPYmplY3Qua2V5cyhmaWx0ZXJlZE9wdGlvbnMpLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG5cblx0XHRcdC8vaWYgaXQncyBub3QgdGhlIHNtYWxsZXN0LCBkZWxldGUgaXRcblx0XHRcdGlmKGtleSAhPSBjbG9zZXN0WmlwLnppcCkgZGVsZXRlIGZpbHRlcmVkT3B0aW9uc1trZXldO1xuXG5cdFx0fSk7XG5cblx0XHQvL2NsZWFuIGV4Y2VzcyBjaGFyYWN0ZXJzIGZyb20gbWFpbHNlcnZpY2Ugc3RyaW5nXG5cdFx0T2JqZWN0LmtleXMoZmlsdGVyZWRPcHRpb25zKS5mb3JFYWNoKGZ1bmN0aW9uKHppcCkge1xuXG5cdFx0XHQvL2FkZHJlc3MgZWFjaCBzZXJ2aWNlXG5cdFx0XHRPYmplY3Qua2V5cyhmaWx0ZXJlZE9wdGlvbnNbemlwXS5zZXJ2aWNlcykuZm9yRWFjaChmdW5jdGlvbihzZXJ2aWNlKSB7XG5cblx0XHRcdFx0Ly9yZXBsYWNlIHRoZSB0cmFkZW1hcmsgaHRtbCB3aXRoIHRoZSBlcXVpdmlsYW50IHN0cmluZ1xuXHRcdFx0XHRmaWx0ZXJlZE9wdGlvbnNbemlwXS5zZXJ2aWNlc1tzZXJ2aWNlXS5tYWlsU2VydmljZSA9IGZpbHRlcmVkT3B0aW9uc1t6aXBdLnNlcnZpY2VzW3NlcnZpY2VdLm1haWxTZXJ2aWNlLnJlcGxhY2UoXCImbHQ7c3VwJmd0OyYjODQ4MjsmbHQ7L3N1cCZndDtcIiwgJ+KEoicpO1xuXG5cdFx0XHR9KTtcblxuXHRcdH0pO1xuXG5cdFx0Ly9zYXZlIHRoZSB2YWx1ZXMgb3V0c2lkZSB0aGUgb2JqZWN0XG5cdFx0Ly9PYmplY3Qua2V5cyhmaWx0ZXJlZE9wdGlvbnMpLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG5cdFx0Ly9cdGZpbHRlcmVkT3B0aW9ucyA9IGZpbHRlcmVkT3B0aW9uc1trZXldLnNlcnZpY2VzO1xuXHRcdC8vfSk7XG5cblxuXHRcdHJldHVybiBmaWx0ZXJlZE9wdGlvbnNcblx0fTtcblxuXHQvKlxuXHQqXHRQQVJTRSBDSVRZIFNUQVRFIFJFU1BPTlNFXG5cdCpcblx0Klx0QHBhcmFtIFwiY2l0eVN0YXRlWE1MXCJcblx0Klx0QHJldHVybiB7XCJjaXR5XCIsIFwic3RhdGVcIn1cblx0Ki9cblx0ZnVuY3Rpb24gX3BhcnNlQ2l0eVN0YXRlUmVzcG9uc2UoY2l0eVN0YXRlWE1MKSB7XG5cdFx0Ly9kZWZpbmUgbG9jYWwgdmFyaWFibGVcblx0XHR2YXIgc2VsZiA9IHRoaXM7XG5cdFx0XG5cdFx0Y29uc29sZS5sb2coY2l0eVN0YXRlWE1MLCB0eXBlb2YgY2l0eVN0YXRlWE1MKTtcblxuXHRcdHZhciBjaXR5U3BsaXQgPSBjaXR5U3RhdGVYTUwuc3BsaXQoJzxDaXR5PicpO1xuXHRcdHZhciBlbmRDaXR5U3BsaXQgPSBjaXR5U3BsaXRbMV0uc3BsaXQoJzwvQ2l0eT4nKTtcblx0XHR2YXIgc3RhdGVTcGxpdCA9IGNpdHlTdGF0ZVhNTC5zcGxpdCgnPFN0YXRlPicpO1xuXHRcdHZhciBlbmRTdGF0ZVNwbGl0ID0gc3RhdGVTcGxpdFsxXS5zcGxpdCgnPC9TdGF0ZT4nKTtcblx0XHR2YXIgY2l0eVN0YXRlT2JqZWN0ID0ge1xuXHRcdFx0Y2l0eTogZW5kQ2l0eVNwbGl0WzBdLFxuXHRcdFx0c3RhdGU6IGVuZFN0YXRlU3BsaXRbMF1cblx0XHR9O1xuXG5cdFx0Ly9yZXR1cm4gdGhlIHJldHVybk9iamVjdFxuXHRcdHJldHVybiBjaXR5U3RhdGVPYmplY3Q7XG5cdH07XG5cblx0Lypcblx0Klx0R0VUIFNISVBQSU5HIFJFUVVFU1Rcblx0Klx0XG5cdCpcdFRoaXMgZnVuY3Rpb24gdGFrZXMgbm8gcGFyYW1zIGFuZCByZXR1cm5zIHRoZSBzaGlwcGluZyByZXF1ZXN0IG9iamVjdFxuXHQqXHRAcmV0dXJuIF9zaGlwcGluZ1JlcXVlc3Rcblx0Ki9cblx0ZnVuY3Rpb24gZ2V0U2hpcHBpbmdSZXF1ZXN0KCkge1xuXHRcdHZhciBzZWxmID0gdGhpcztcblx0XHRyZXR1cm4gc2VsZi5fc2hpcHBpbmdSZXF1ZXN0O1xuXHR9O1xuXG5cdC8qXG5cdCpcdENJVFkgU1RBVEUgTE9PS1VQXG5cdCpcdFxuXHQqXHRUaGlzIGZ1bmN0aW9uIGFjY2VwdHMgYSB6aXBjb2RlIGFuZCByZXR1cm5zIFxuXHQqXHRAcGFyYW0gXCJ6aXBjb2RlXCJcblx0Klx0QHJldHVybnMge1wiY2l0eVwiLCBcInN0YXRlXCJ9XG5cdCovXG5cdGZ1bmN0aW9uIGNpdHlTdGF0ZUxvb2t1cCh6aXBjb2RlKSB7XG5cdFx0Ly9kZWZpbmUgbG9jYWwgdmFyaWFibGVcblx0XHR2YXIgc2VsZiA9IHRoaXM7XG5cdFx0dmFyIHVybCA9ICdodHRwOi8vcHJvZHVjdGlvbi5zaGlwcGluZ2FwaXMuY29tL1NoaXBwaW5nQVBJLmRsbD9BUEk9IENpdHlTdGF0ZUxvb2t1cCZYTUw9PENpdHlTdGF0ZUxvb2t1cFJlcXVlc3QlMjBVU0VSSUQ9XCInICsgc2VsZi5fdXNwc1VzZXJuYW1lICsgJ1wiPjxaaXBDb2RlIElEPSBcIjBcIj48WmlwNT4nICsgemlwY29kZSArICc8L1ppcDU+PC9aaXBDb2RlPjwvQ2l0eVN0YXRlTG9va3VwUmVxdWVzdD4nO1xuXHRcdHZhciBjb25maWcgPSAnJztcblx0XHRcdFxuXHRcdGNvbnNvbGUubG9nKHppcGNvZGUpO1xuXG5cdFx0Ly9yZXR1cm4gYXN5bmMgd29ya1xuXHRcdHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblxuXHRcdFx0Ly91c2UgdGhlIHVybCByZXNvdXJjZVxuXHRcdFx0JGh0dHAuZ2V0KHVybCwgY29uZmlnKVxuXHRcdFx0LnRoZW4oZnVuY3Rpb24gc3VjY2VzcyhzKSB7XG5cblx0XHRcdFx0Ly9kZWZpbmUgbG9jYWwgdmFyaWFibGVzXG5cdFx0XHRcdHZhciBjaXR5U3RhdGVPYmplY3QgPSBzZWxmLl9wYXJzZUNpdHlTdGF0ZVJlc3BvbnNlKHMuZGF0YSk7XG5cdFx0XHRcdFxuXHRcdFx0XHQvL0FERCBJTiBFUlJPUiBIQU5ETElOR1xuXHRcdFx0XHRjb25zb2xlLmxvZyhjaXR5U3RhdGVPYmplY3QpO1xuXG5cdFx0XHRcdC8vcGFzcyB0aGUgdmFsdWUgYmFja1xuXHRcdFx0XHRyZXNvbHZlKGNpdHlTdGF0ZU9iamVjdCk7XG5cblx0XHRcdH0sIGZ1bmN0aW9uIGVycm9yKGUpIHtcblxuXHRcdFx0XHRyZWplY3QoZSk7XG5cdFx0XHR9KTtcblxuXHRcdH0pO1xuXHR9O1xuXG5cdC8qXG5cdCpcdFBSSUNFIENBTENVTEFUT1Jcblx0KlxuXHQqXHRUaGlzIGZ1bmN0aW9uIGFjY2VwdHMgdGhlIGJlbG93IHBhcmFtZXRlcnMgY29udGFpbmVkIGluIGEgc2hpcHBpbmdSZXF1ZXN0IG9iamVjdFxuXHQqXG5cdCpcdFRvIG1ha2UgdGhpbmdzIG1vcmUgY29tcGxpY2F0ZWQgdGhpcyBzaG91bGQgdHJ5IGZyb20gYm90aCB6aXAgY29kZXMgKDk3MDA1IGFuZCA4NDAxNSksIGl0IHNob3VsZCBjaG9vc2Ugd2hpY2hldmVyIGlzIGNoZWVwZXJcblx0KlxuXHQqXHRJdCBzaG91bGQgYWxzbyBnaXZlIGRlbGl2ZXJ5IG9wdGlvbnMgZm9yIFBSSU9SSVRZIGFuZCBFWFBSRVNTLlxuXHQqXG5cdCpcdEBwYXJhbSBcIlppcERlc3RpbmF0aW9uXCIgLSByZXF1aXJlZFxuXHQqXHRAcGFyYW0gXCJQb3VuZHNcIiAtIHJlcXVpcmVkXG5cdCpcdEBwYXJhbSBcIk91bmNlc1wiIC0gcmVxdWlyZWRcblx0Klx0QHBhcmFtIFwiQ29udGFpbmVyXCIgLSByZXF1aXJlZCAoUkVDVEFOR1VMQVIgb3IgTk9OUkVDVEFOR1VMQVIgbXVzdCBiZSBpbmRpY2F0ZWQgd2hlbiA8U2l6ZT5MQVJHRTwvU2l6ZT4pXG5cdCpcdEBwYXJhbSBcIlNpemVcIiAtIHJlcXVpcmVkIChSRUdVTEFSOiBQYWNrYWdlIGRpbWVuc2lvbnMgYXJlIDEy4oCZ4oCZIG9yIGxlc3M7IExBUkdFOiBBbnkgcGFja2FnZSBkaW1lbnNpb24gaXMgbGFyZ2VyIHRoYW4gMTLigJnigJkuKVxuXHQqXHRAcGFyYW0gXCJXaWR0aFwiIC0gb3B0aW9uYWwgKFZhbHVlIG11c3QgYmUgbnVtZXJpYy4gVW5pdHMgYXJlIGluY2hlcy4pXG5cdCpcdEBwYXJhbSBcIkxlbmd0aFwiIC0gb3B0aW9uYWwgKFZhbHVlIG11c3QgYmUgbnVtZXJpYy4gVW5pdHMgYXJlIGluY2hlcy4pXG5cdCpcdEBwYXJhbSBcIkhlaWdodFwiIC0gb3B0aW9uYWwgKFZhbHVlIG11c3QgYmUgbnVtZXJpYy4gVW5pdHMgYXJlIGluY2hlcy4pXG5cdCpcdEBwYXJhbSBcIkdpcnRoXCIgLSBvcHRpb25hbCAoVmFsdWUgbXVzdCBiZSBudW1lcmljLiBVbml0cyBhcmUgaW5jaGVzLilcblx0Klx0QHBhcmFtIFwiVmFsdWVcIiAtIG9wdGlvbmFsIChQYWNrYWdlIHZhbHVlLiAgVXNlZCB0byBkZXRlcm1pbmUgYXZhaWxhYmlsaXR5IGFuZCBjb3N0IG9mIGV4dHJhIHNlcnZpY2VzLilcblx0Klx0XG5cdCpcdEByZXR1cm4gUHJvbWlzZTogXCJzaGlwcGluZ09wdGlvbnNcInt6b25lWzBdLCBwb3N0YWdlW3ttYWlsU2VydmljZSwgcmF0ZX1dfVxuXHQqL1xuXHRmdW5jdGlvbiBwcmljZUNhbGN1bGF0b3Ioc2hpcHBpbmdSZXF1ZXN0KSB7XG5cdFx0Ly9kZWZpbmUgbG9jYWwgdmFyaWFibGVzXG5cdFx0dmFyIHNlbGYgPSB0aGlzO1xuXHRcdHZhciBzaGlwcGluZ09wdGlvbnMgPSBzZWxmLl9zaGlwcGluZ09wdGlvbnM7XG5cdFx0dmFyIHBvc3RhZ2VPcHRpb24gPSBzZWxmLl9wb3N0YWdlO1xuXHRcdHZhciBaaXBPcmlnaW5hdGlvbiA9IFsnOTcwMDUnLCAnODQwMTUnXTtcblx0XHR2YXIgU2VydmljZSA9IFsnRVhQUkVTUycsICdQUklPUklUWSddO1xuXHRcdHZhciBwYWNrYWdlU2l6ZSA9ICcnO1xuXHRcdHZhciBiYXNlVXJsID0gJ2h0dHA6Ly9wcm9kdWN0aW9uLnNoaXBwaW5nYXBpcy5jb20vU2hpcHBpbmdBcGkuZGxsP0FQST1SYXRlVjQmWE1MPTxSYXRlVjRSZXF1ZXN0IFVTRVJJRD1cIicgKyBzZWxmLl91c3BzVXNlcm5hbWUgKyAnXCI+Jztcblx0XHR2YXIgY2xvc2VSZXF1ZXN0ID0gJzwvUmF0ZVY0UmVxdWVzdD4gJztcblx0XHR2YXIgb3B0aW9uQ291bnQgPSAwO1xuXG5cdFx0Ly9jb25zdHJ1Y3QgdGhlIHVybCBieSBhZGRpbmcgdG8gdGhlIHN0cmluZ1xuXHRcdHZhciB1cmwgPSBiYXNlVXJsO1xuXG5cdFx0Ly9EZXRlcm1pbmUgdGhlIHBhY2thZ2Ugc2l6ZVxuXHRcdGlmKHNoaXBwaW5nUmVxdWVzdC5sID4gMTIgfHwgc2hpcHBpbmdSZXF1ZXN0LncgPiAxMiB8fCBzaGlwcGluZ1JlcXVlc3QuaCA+IDEyKSBwYWNrYWdlU2l6ZSA9IFwiTEFSR0VcIlxuXHRcdGVsc2UgcGFja2FnZVNpemUgPSAnUkVHVUxBUic7XG5cblx0XHQvL3N0YXJ0IGJ5IGl0ZXJhdGluZyB0aHJvdWdoIHRoZSB6aXBjb2Rlc1xuXHRcdFppcE9yaWdpbmF0aW9uLmZvckVhY2goZnVuY3Rpb24oemlwY29kZSkge1xuXG5cdFx0XHQvL3RoZW4gaXRlcmF0ZSB0aHJvdWdoIGVhY2ggc2VydmljZXMgdHlwZVxuXHRcdFx0U2VydmljZS5mb3JFYWNoKGZ1bmN0aW9uKHNlcnZpY2VUeXBlKSB7XG5cblx0XHRcdFx0Ly9pbmNyaW1lbnQgdGhlIG9wdGlvbiBjb3VudGVyXG5cdFx0XHRcdG9wdGlvbkNvdW50Kys7XG5cblx0XHRcdFx0Ly9hZGQgdGhlIHBhY2thZ2UgdGFnXG5cdFx0XHRcdHVybCArPSAoJzxQYWNrYWdlIElEPVwiJyArIG9wdGlvbkNvdW50ICsgJ1wiPicpO1xuXG5cdFx0XHRcdC8vYWRkIHRoZSBzZXJ2aWNlIHR5cGVcblx0XHRcdFx0dXJsICs9IChcIjxTZXJ2aWNlPlwiICsgc2VydmljZVR5cGUgKyBcIjwvU2VydmljZT5cIik7XG5cblx0XHRcdFx0Ly9hZGQgdGhlIG9yaWdpbiB6aXBcblx0XHRcdFx0dXJsICs9IChcIjxaaXBPcmlnaW5hdGlvbj5cIiArIHppcGNvZGUgKyBcIjwvWmlwT3JpZ2luYXRpb24+XCIpO1xuXG5cdFx0XHRcdC8vYWRkIHRoZSBkZXN0aW5hdGlvbiB6aXBcblx0XHRcdFx0dXJsICs9IChcIjxaaXBEZXN0aW5hdGlvbj5cIiArIHNoaXBwaW5nUmVxdWVzdC56aXBjb2RlICsgXCI8L1ppcERlc3RpbmF0aW9uPlwiKTtcblxuXHRcdFx0XHQvL2FkZCB0aGUgcG91bmRzXG5cdFx0XHRcdHVybCArPSAoXCI8UG91bmRzPlwiICsgc2hpcHBpbmdSZXF1ZXN0LnBvdW5kcyArIFwiPC9Qb3VuZHM+XCIpO1xuXG5cdFx0XHRcdC8vYWRkIHRoZSBvdW5jZXNcblx0XHRcdFx0dXJsICs9IChcIjxPdW5jZXM+XCIgKyBzaGlwcGluZ1JlcXVlc3Qub3VuY2VzICsgXCI8L091bmNlcz5cIik7XG5cblx0XHRcdFx0Ly9hZGQgdGhlIGNvbnRhaW5lclxuXHRcdFx0XHR1cmwgKz0gKFwiPENvbnRhaW5lcj5cIiArIHNoaXBwaW5nUmVxdWVzdC5jb250YWluZXIgKyBcIjwvQ29udGFpbmVyPlwiKTtcblxuXHRcdFx0XHQvL2FkZCB0aGUgc2l6ZVxuXHRcdFx0XHR1cmwgKz0gKFwiPFNpemU+XCIgKyBwYWNrYWdlU2l6ZSArIFwiPC9TaXplPlwiKTtcblxuXHRcdFx0XHQvL2FkZCB0aGUgd2lkdGhcblx0XHRcdFx0dXJsICs9IChcIjxXaWR0aD5cIiArIHNoaXBwaW5nUmVxdWVzdC53ICsgXCI8L1dpZHRoPlwiKTtcblxuXHRcdFx0XHQvL2FkZCB0aGUgbGVuZ3RoXG5cdFx0XHRcdHVybCArPSAoXCI8TGVuZ3RoPlwiICsgc2hpcHBpbmdSZXF1ZXN0LmwgKyBcIjwvTGVuZ3RoPlwiKTtcblxuXHRcdFx0XHQvL2FkZCB0aGUgaGVpZ2h0XG5cdFx0XHRcdHVybCArPSAoXCI8SGVpZ2h0PlwiICsgc2hpcHBpbmdSZXF1ZXN0LmggKyBcIjwvSGVpZ2h0PlwiKTtcblxuXHRcdFx0XHQvL2FkZCB0aGUgZ2lydGhcblx0XHRcdFx0Ly91cmwgKz0gKFwiPFNpemU+XCIgKyBwYWNrYWdlU2l6ZSArIFwiPC9TaXplPlwiKTtcblxuXHRcdFx0XHQvL2Nsb3NlIHRoZSBwYWNrYWdlIHRhZ1xuXHRcdFx0XHR1cmwgKz0gJzwvUGFja2FnZT4nO1xuXG5cdFx0XHR9KTtcblxuXHRcdH0pO1xuXG5cdFx0Ly93aGVuIGZpbmlzaGVkIGNsb3NlIHRoZSByZXF1ZXN0XG5cdFx0dXJsICs9IGNsb3NlUmVxdWVzdDtcblxuXHRcdC8vdGhlbiBwYXNzIHRoZSB1cmwgdG8gc2VydmVyXG5cdFx0cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXG5cdFx0XHQvL3VzZSB0aGUgdXJsIHJlc291cmNlXG5cdFx0XHQkaHR0cC5nZXQodXJsLCBjb25maWcpXG5cdFx0XHQudGhlbihmdW5jdGlvbiBzdWNjZXNzKHMpIHtcblxuXHRcdFx0XHQvL3BhcnNlIHRoZSB4bWwgcmVzcG9uc2Vcblx0XHRcdFx0dmFyIGRhdGFKc29uT2JqZWN0ID0gc2VsZi5fZ2VuZXJhbFBhcnNlKHMuZGF0YSk7XG5cblx0XHRcdFx0Ly9kaXN0aWxsIHRoZSBwb3N0YWdlIG9wdGlvbnMgZG93biB0byBtb3N0IGNvc3QgZWZmZWN0aXZlXG5cdFx0XHRcdHZhciBhbGxQb3N0YWdlT3B0aW9ucyA9IHNlbGYuX2ZpbHRlclBvc3RhZ2VPcHRpb25zKGRhdGFKc29uT2JqZWN0KTtcblxuXHRcdFx0XHQvL2NvbnNvbGUubG9nKCdhbGxQb3N0YWdlT3B0aW9ucycsIGFsbFBvc3RhZ2VPcHRpb25zKTtcblxuXHRcdFx0XHQvL3Bhc3MgdGhlIHJlc3VsdHMgYmFja1xuXHRcdFx0XHRyZXNvbHZlKGFsbFBvc3RhZ2VPcHRpb25zKTtcblxuXHRcdFx0fSwgZnVuY3Rpb24gZXJyb3IoZSkge1xuXHRcdFx0XHQvL3Bhc3MgZXJyb3JzIGJhY2tcblx0XHRcdFx0cmVqZWN0KGUpO1xuXHRcdFx0fSk7XG5cblx0XHR9KTtcblxuXHR9O1xuXG5cdC8qXG5cdCpcdEFERFJFU1MgVkVSSUZJQ0FUSU9OXG5cdCpcblx0Ki9cblx0ZnVuY3Rpb24gYWRkcmVzc1ZlcmlmaWNhdGlvbigpIHt9O1xuXG5cblx0cmV0dXJuIHVzcHNTZXJ2aWNlcztcbn0iLCJhbmd1bGFyXG4gICAgLm1vZHVsZSgnYWhOdXRzJylcbiAgICAuY29uZmlnKGNvbmZpZyk7XG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIGNvbmZpZygkcm91dGVQcm92aWRlcikge1xuXHQkcm91dGVQcm92aWRlclxuXHQvL2RlZmluZSB0aGUgbGFuZGluZyByb3V0ZVxuXHQud2hlbignLycsIHtcbiAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9sYW5kaW5nUGFnZS5odG0nLCAgICAgIC8vJ3ZpZXdzL21haW5QYWdlLmh0bSdcbiAgICAgICAgY29udHJvbGxlcjogJ2xhbmRpbmdDb250cm9sbGVyJywgICAgICAgICAgIC8vJ21haW5Db250cm9sbGVyJ1xuICAgICAgICBjb250cm9sbGVyQXM6ICd2bSdcbiAgICB9KVxuICAgIC8vZGVmaW5lIHRoZSBhbGwgcHJvZHVjdHMgcm91dGVcbiAgICAud2hlbignL2FsbC1wcm9kdWN0cycsIHtcbiAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9hbGxQcm9kdWN0c1BhZ2UuaHRtJyxcbiAgICAgICAgY29udHJvbGxlcjogJ2FsbFByb2R1Y3RzQ29udHJvbGxlcicsXG4gICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJyxcbiAgICAgICAgcmVzb2x2ZTogeyAvKiBAbmdJbmplY3QgKi9cbiAgICAgICAgICAgIHByb2R1Y3RMaXN0OiBwcm9kdWN0TGlzdFxuICAgICAgICB9XG4gICAgfSlcbiAgICAvL2RlZmluZSB0aGUgc2luZ2xlIHByb2R1Y3Qgcm91dGVcbiAgICAud2hlbignL3Byb2R1Y3QvOnByZGN0SWQnLCB7XG4gICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvYVByb2R1Y3RQYWdlLmh0bScsXG4gICAgICAgIGNvbnRyb2xsZXI6ICdhUHJvZHVjdENvbnRyb2xsZXInLFxuICAgICAgICBjb250cm9sbGVyQXM6ICd2bScsXG4gICAgICAgIHJlc29sdmU6IHsgLyogQG5nSW5qZWN0ICovXG4gICAgICAgICAgICBhUHJvZHVjdDogYVByb2R1Y3RcbiAgICAgICAgfVxuICAgIH0pXG4gICAgLy9kZWZpbmUgdGhlIGRlbGl2ZXJ5IHNwZWNpZmljYXRpb25zIHJvdXRlXG4gICAgLndoZW4oJy9nZXR0aW5nLXRoZS1wcm9kdWN0LzppdGVtSWQnLCB7XG4gICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvcHJvZHVjdEdldHRpbmdQYWdlLmh0bScsXG4gICAgICAgIGNvbnRyb2xsZXI6ICdwcm9kdWN0R2V0dGluZ0NvbnRyb2xsZXInLFxuICAgICAgICBjb250cm9sbGVyQXM6ICd2bScsXG4gICAgICAgIHJlc29sdmU6IHsgLyogQG5nSW5qZWN0ICovXG4gICAgICAgICAgICB1c3BzVXNlcm5hbWU6IHVzcHNVc2VybmFtZVxuICAgICAgICB9XG4gICAgfSlcbiAgICAvL2RlZmluZSB0aGUgbG9jYXRpb25zIHJvdXRlXG4gICAgLndoZW4oJy9sb2NhdGlvbnMnLCB7XG4gICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvbG9jYXRpb25zUGFnZS5odG0nLFxuICAgICAgICBjb250cm9sbGVyOiAnbG9jYXRpb25zQ29udHJvbGxlcicsXG4gICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJ1xuICAgIH0pXG4gICAgLy9kZWZpbmUgdGhlIGxvZ2luIHJvdXRlXG4gICAgLndoZW4oJy9sb2dpbicsIHtcbiAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9sb2dpblBhZ2UuaHRtJyxcbiAgICAgICAgY29udHJvbGxlcjogJ2xvZ2luQ29udHJvbGxlcicsXG4gICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJ1xuICAgIH0pXG4gICAgLy9kZWZpbmUgdGhlIHNob3BwaW5nIGNhcnQgcm91dGVcbiAgICAud2hlbignL2NhcnQnLCB7XG4gICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvY2FydFBhZ2UuaHRtJyxcbiAgICAgICAgY29udHJvbGxlcjogJ2NhcnRDb250cm9sbGVyJyxcbiAgICAgICAgY29udHJvbGxlckFzOiAndm0nXG4gICAgfSlcbiAgICAvL2RlZmluZSB0aGUgY2hlY2tvdXQgcm91dGVcbiAgICAud2hlbignL2NoZWNrb3V0Jywge1xuICAgICAgICB0ZW1wbGF0ZVVybDogJ3ZpZXdzL2NoZWNrb3V0UGFnZS5odG0nLFxuICAgICAgICBjb250cm9sbGVyOiAnY2hlY2tvdXRDb250cm9sbGVyJyxcbiAgICAgICAgY29udHJvbGxlckFzOiAndm0nLFxuICAgICAgICByZXNvbHZlOiB7IC8qIEBuZ0luamVjdCAqL1xuICAgICAgICAgICAgc3F1YXJlQ3JlZHM6IHNxdWFyZUNyZWRzXG4gICAgICAgIH1cbiAgICB9KVxuICAgIC8vZGVmaW5lIHRoZSBjaGVja291dCByb3V0ZVxuICAgIC53aGVuKCcvb3JkZXItY29uZmlybWF0aW9uLzpjb25mSWQnLCB7XG4gICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3Mvb3JkZXJDb25maXJtYXRpb25QYWdlLmh0bScsXG4gICAgICAgIGNvbnRyb2xsZXI6ICdvcmRlckNvbmZpcm1hdGlvbkNvbnRyb2xsZXInLFxuICAgICAgICBjb250cm9sbGVyQXM6ICd2bSdcbiAgICB9KVxuICAgIC8vZGVmaW5lIHRoZSBteUFjY291bnQgcm91dGUgZm9yIGN1c3RvbWVyc1xuICAgIC53aGVuKCcvcmVnaXN0ZXJVc2VyJywge1xuICAgICAgICB0ZW1wbGF0ZVVybDogJ3ZpZXdzL3JlZ2lzdHJhdGlvblBhZ2UuaHRtJyxcbiAgICAgICAgY29udHJvbGxlcjogJ3JlZ2lzdGVyQWNjdENvbnRyb2xsZXInLFxuICAgICAgICBjb250cm9sbGVyQXM6ICd2bSdcbiAgICB9KVxuICAgIC8vZGVmaW5lIHRoZSBteUFjY291bnQgcm91dGUgZm9yIGN1c3RvbWVyc1xuICAgIC53aGVuKCcvTXlBY2NvdW50LzpwYXJhbScsIHtcbiAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9hY2NvdW50c1BhZ2UuaHRtJyxcbiAgICAgICAgY29udHJvbGxlcjogJ2FjY291bnRzQ29udHJvbGxlcicsXG4gICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJ1xuICAgIH0pXG4gICAgLy9kZWZpbmUgdGhlIHRlYW1NZW1iZXIgcm91dGVcblx0LndoZW4oJy90ZWFtTWVtYmVyLzpwYXJhbScsIHtcbiAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9pbnRlcm5hbEFjdHRzUGFnZS5odG0nLFxuICAgICAgICBjb250cm9sbGVyOiAnaW50ZXJuYWxBY3R0c0NvbnRyb2xsZXInLFxuICAgICAgICBjb250cm9sbGVyQXM6ICd2bScsXG4gICAgICAgIHJlc29sdmU6IHsgLyogQG5nSW5qZWN0ICovXG4gICAgICAgICAgICBhdXRoZW50aWNhdGlvbjogYXV0aGVudGljYXRpb25cbiAgICAgICAgfVxuICAgIC8vfSkub3RoZXJ3aXNlKHtcbiAgICAvLyAgICByZWRpcmVjdFRvOiAnLydcbiAgICB9KTtcbn1cblxuLy9SZXF1aXJlZCBmdW5jdGlvbnNcbmZ1bmN0aW9uIGF1dGhlbnRpY2F0aW9uKCkge1xuXG4gICAgY29uc29sZS5sb2coJ2F1dGhlbnRpY2F0aW5nJyk7XHQvL1RPRE86IFRBS0UgVEhJUyBPVVQgTEFURVJcbn07XG5cbmZ1bmN0aW9uIHNxdWFyZUNyZWRzKGRhdGFTZXJ2aWNlcykge1xuICAgIC8vZGVmaW5lIGxvY2FsIHZhcmlhYmxlc1xuICAgIHZhciBkYXRhID0gZGF0YVNlcnZpY2VzO1xuXG4gICAgY29uc29sZS5sb2coJ2dldHRpbmcgc3F1YXJlIGNyZWRzJyk7ICAgIC8vVE9ETzogVEFLRSBUSElTIE9VVCBMQVRFUlxuXG4gICAgXG4gICAgLy9UT0RPOiBXSFkgRE9FUyBUSElTIFJFU09MVkUgU09NRVRJTUVTIEFORCBOT1QgT1RIRVJTXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXG4gICAgICAgIC8vcmVhY2ggb3V0IHRvIGVuZHBvaW50XG4gICAgICAgIGRhdGEucG9zdCgnL2FwaS9zcXVhcmUtY3JlZHMnLCB7IGtleTonb3dpbmU5MW4tc24jYnNpbndpI2snfSApXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uIHN1Y2Nlc3Mocykge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ2dvdCB0aGlzJywgcyk7XG4gICAgICAgICAgICByZXNvbHZlKHMpO1xuICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiBlcnJvcihlKSB7XG4gICAgICAgICAgICByZXNvbHZlKGUpO1xuICAgICAgICB9KTtcblxuICAgIH0pO1xuXG59O1xuXG4vKlxuKiAgIFBST0RVQ1QgTElTVFxuKlxuKiAgIFRoaXMgZnVuY3Rpb24gbG9hZHMgYSBsaXN0IG9mIHByb2R1Y3RzXG4qL1xuZnVuY3Rpb24gcHJvZHVjdExpc3QoZGF0YVNlcnZpY2VzLCAkcm91dGUpIHtcblxuICAgIC8vZGVmaW5lIGxvY2FsIHZhcmlhYmxlc1xuICAgIHZhciBkYXRhID0gZGF0YVNlcnZpY2VzO1xuICAgIHZhciBwYXRoID0gJy9hcGkvcHJvZHVjdGxpc3QnO1xuXG4gICAgaWYoJHJvdXRlLmN1cnJlbnQucGFyYW1zICE9IHVuZGVmaW5lZCkge1xuICAgICAgICBwYXRoICs9ICc/ZmlsdGVyPScgKyAkcm91dGUuY3VycmVudC5wYXJhbXMuZmlsdGVyO1xuICAgIH07XG5cbiAgICAvL2FsZXJ0KCckcm91dGUuY3VycmVudC5wYXJhbXMnLCAkcm91dGUuY3VycmVudC5wYXJhbXMpO1xuXG4gICAgLy9yZXR1cm4gdGhlIHByb21pc2Ugb2YgYXN5bmMgd29ya1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblxuICAgICAgICAvL3JlYWNoIG91dCB0byB0aGUgZW5kcG9pbnRcbiAgICAgICAgZGF0YS5nZXQocGF0aClcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24gc3VjY2VzcyhzKSB7XG4gICAgICAgICAgICByZXNvbHZlKHMpO1xuICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiBlcnJvcihlKSB7XG4gICAgICAgICAgICByZWplY3QoZSk7XG4gICAgICAgIH0pO1xuXG4gICAgfSk7XG59O1xuXG4vKlxuKiAgIEEgUFJPRFVDVFxuKlxuKiAgIFRoaXMgZnVuY3Rpb24gbG9hZHMgYSBzaW5nbGUgcHJvZHVjdFxuKi9cbmZ1bmN0aW9uIGFQcm9kdWN0KGRhdGFTZXJ2aWNlcywgJHJvdXRlKSB7XG5cbiAgICAvL2RlZmluZSBsb2NhbCB2YXJpYWJsZXNcbiAgICB2YXIgZGF0YSA9IGRhdGFTZXJ2aWNlcztcbiAgICB2YXIgcGF0aCA9ICcvYXBpL3Byb2R1Y3RsaXN0P3NlbGVjdD0nICsgJHJvdXRlLmN1cnJlbnQucGFyYW1zLnByZGN0SWQ7XG5cbiAgICBjb25zb2xlLmxvZygncGF0aCcsIHBhdGgpO1xuXG5cbiAgICAvL2FsZXJ0KCckcm91dGUuY3VycmVudC5wYXJhbXMnLCAkcm91dGUuY3VycmVudC5wYXJhbXMpO1xuXG4gICAgLy9yZXR1cm4gdGhlIHByb21pc2Ugb2YgYXN5bmMgd29ya1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblxuICAgICAgICAvL3JlYWNoIG91dCB0byB0aGUgZW5kcG9pbnRcbiAgICAgICAgZGF0YS5nZXQocGF0aClcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24gc3VjY2VzcyhzKSB7XG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKCdnb3QgdGhpcyBwcm9kdWN0Jywgcyk7XG4gICAgICAgICAgICByZXNvbHZlKHMpO1xuICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiBlcnJvcihlKSB7XG4gICAgICAgICAgICByZWplY3QoZSk7XG4gICAgICAgIH0pO1xuXG4gICAgfSk7XG5cbn07XG5cbi8qXG4qICAgVVNQUyBVU0VSTkFNRVxuKlxuKiAgIFRoaXMgZnVuY3Rpb24gZ2V0cyB0aGUgc2VjcmV0IHVzZXJuYW1lIGZvciB0aGUgYW5ndWxhciBtb2R1bGVcbiovXG5mdW5jdGlvbiB1c3BzVXNlcm5hbWUoZGF0YVNlcnZpY2VzKSB7XG4gICAgLy9kZWZpbmUgbG9jYWwgdmFyaWFibGVzXG4gICAgdmFyIGRhdGEgPSBkYXRhU2VydmljZXNcbiAgICB2YXIgcGF0aCA9ICcvYXBpL3NlY3JldHMvdXNwcy11c2VybmFtZSc7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG5cbiAgICAgICAgZGF0YS5nZXQocGF0aClcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24gc3VjY2VzcyhzKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnZ290IHRoaXMgc2VjcmV0Jywgcyk7XG4gICAgICAgICAgICByZXNvbHZlKHMpO1xuICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiBlcnJvcihlKSB7XG4gICAgICAgICAgICByZWplY3QoZSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuXG59XG4iLCIvLyBNT0RVTEVcbnZhciBhaE51dHMgPSBhbmd1bGFyLm1vZHVsZSgnYWhOdXRzJywgWyduZ1JvdXRlJ10pO1xuIiwiYW5ndWxhclxuICAgIC5tb2R1bGUoJ2FoTnV0cycpXG4gICAgLnJ1bihbJ3Nob3BwaW5nQ2FydCcsIGZ1bmN0aW9uKHNob3BwaW5nQ2FydCkge1xuXHRcdHNob3BwaW5nQ2FydC5pbml0KCk7XG5cdH1dKTsiLCIvKlxuIENvcHlyaWdodCAyMDExLTIwMTMgQWJkdWxsYSBBYmR1cmFraG1hbm92XG4gT3JpZ2luYWwgc291cmNlcyBhcmUgYXZhaWxhYmxlIGF0IGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AveDJqcy9cbiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG4oZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnkpIHtcbiAgICAgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG4gICAgICAgICBkZWZpbmUoW10sIGZhY3RvcnkpO1xuICAgICB9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcbiAgICAgfSBlbHNlIHtcbiAgICAgICAgIHJvb3QuWDJKUyA9IGZhY3RvcnkoKTtcbiAgICAgfVxuIH0odGhpcywgZnVuY3Rpb24gKCkge1xuXHRyZXR1cm4gZnVuY3Rpb24gKGNvbmZpZykge1xuXHRcdCd1c2Ugc3RyaWN0Jztcblx0XHRcdFxuXHRcdHZhciBWRVJTSU9OID0gXCIxLjIuMFwiO1xuXHRcdFxuXHRcdGNvbmZpZyA9IGNvbmZpZyB8fCB7fTtcblx0XHRpbml0Q29uZmlnRGVmYXVsdHMoKTtcblx0XHRpbml0UmVxdWlyZWRQb2x5ZmlsbHMoKTtcblx0XHRcblx0XHRmdW5jdGlvbiBpbml0Q29uZmlnRGVmYXVsdHMoKSB7XG5cdFx0XHRpZihjb25maWcuZXNjYXBlTW9kZSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdGNvbmZpZy5lc2NhcGVNb2RlID0gdHJ1ZTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0Y29uZmlnLmF0dHJpYnV0ZVByZWZpeCA9IGNvbmZpZy5hdHRyaWJ1dGVQcmVmaXggfHwgXCJfXCI7XG5cdFx0XHRjb25maWcuYXJyYXlBY2Nlc3NGb3JtID0gY29uZmlnLmFycmF5QWNjZXNzRm9ybSB8fCBcIm5vbmVcIjtcblx0XHRcdGNvbmZpZy5lbXB0eU5vZGVGb3JtID0gY29uZmlnLmVtcHR5Tm9kZUZvcm0gfHwgXCJ0ZXh0XCI7XHRcdFxuXHRcdFx0XG5cdFx0XHRpZihjb25maWcuZW5hYmxlVG9TdHJpbmdGdW5jID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0Y29uZmlnLmVuYWJsZVRvU3RyaW5nRnVuYyA9IHRydWU7IFxuXHRcdFx0fVxuXHRcdFx0Y29uZmlnLmFycmF5QWNjZXNzRm9ybVBhdGhzID0gY29uZmlnLmFycmF5QWNjZXNzRm9ybVBhdGhzIHx8IFtdOyBcblx0XHRcdGlmKGNvbmZpZy5za2lwRW1wdHlUZXh0Tm9kZXNGb3JPYmogPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRjb25maWcuc2tpcEVtcHR5VGV4dE5vZGVzRm9yT2JqID0gdHJ1ZTtcblx0XHRcdH1cblx0XHRcdGlmKGNvbmZpZy5zdHJpcFdoaXRlc3BhY2VzID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0Y29uZmlnLnN0cmlwV2hpdGVzcGFjZXMgPSB0cnVlO1xuXHRcdFx0fVxuXHRcdFx0Y29uZmlnLmRhdGV0aW1lQWNjZXNzRm9ybVBhdGhzID0gY29uZmlnLmRhdGV0aW1lQWNjZXNzRm9ybVBhdGhzIHx8IFtdO1xuXHRcblx0XHRcdGlmKGNvbmZpZy51c2VEb3VibGVRdW90ZXMgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRjb25maWcudXNlRG91YmxlUXVvdGVzID0gZmFsc2U7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdGNvbmZpZy54bWxFbGVtZW50c0ZpbHRlciA9IGNvbmZpZy54bWxFbGVtZW50c0ZpbHRlciB8fCBbXTtcblx0XHRcdGNvbmZpZy5qc29uUHJvcGVydGllc0ZpbHRlciA9IGNvbmZpZy5qc29uUHJvcGVydGllc0ZpbHRlciB8fCBbXTtcblx0XHRcdFxuXHRcdFx0aWYoY29uZmlnLmtlZXBDRGF0YSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdGNvbmZpZy5rZWVwQ0RhdGEgPSBmYWxzZTtcblx0XHRcdH1cblx0XHR9XG5cdFxuXHRcdHZhciBET01Ob2RlVHlwZXMgPSB7XG5cdFx0XHRFTEVNRU5UX05PREUgXHQgICA6IDEsXG5cdFx0XHRURVhUX05PREUgICAgXHQgICA6IDMsXG5cdFx0XHRDREFUQV9TRUNUSU9OX05PREUgOiA0LFxuXHRcdFx0Q09NTUVOVF9OT0RFXHQgICA6IDgsXG5cdFx0XHRET0NVTUVOVF9OT0RFIFx0ICAgOiA5XG5cdFx0fTtcblx0XHRcblx0XHRmdW5jdGlvbiBpbml0UmVxdWlyZWRQb2x5ZmlsbHMoKSB7XHRcdFxuXHRcdH1cblx0XHRcblx0XHRmdW5jdGlvbiBnZXROb2RlTG9jYWxOYW1lKCBub2RlICkge1xuXHRcdFx0dmFyIG5vZGVMb2NhbE5hbWUgPSBub2RlLmxvY2FsTmFtZTtcdFx0XHRcblx0XHRcdGlmKG5vZGVMb2NhbE5hbWUgPT0gbnVsbCkgLy8gWWVhaCwgdGhpcyBpcyBJRSEhIFxuXHRcdFx0XHRub2RlTG9jYWxOYW1lID0gbm9kZS5iYXNlTmFtZTtcblx0XHRcdGlmKG5vZGVMb2NhbE5hbWUgPT0gbnVsbCB8fCBub2RlTG9jYWxOYW1lPT1cIlwiKSAvLyA9PVwiXCIgaXMgSUUgdG9vXG5cdFx0XHRcdG5vZGVMb2NhbE5hbWUgPSBub2RlLm5vZGVOYW1lO1xuXHRcdFx0cmV0dXJuIG5vZGVMb2NhbE5hbWU7XG5cdFx0fVxuXHRcdFxuXHRcdGZ1bmN0aW9uIGdldE5vZGVQcmVmaXgobm9kZSkge1xuXHRcdFx0cmV0dXJuIG5vZGUucHJlZml4O1xuXHRcdH1cblx0XHRcdFxuXHRcdGZ1bmN0aW9uIGVzY2FwZVhtbENoYXJzKHN0cikge1xuXHRcdFx0aWYodHlwZW9mKHN0cikgPT0gXCJzdHJpbmdcIilcblx0XHRcdFx0cmV0dXJuIHN0ci5yZXBsYWNlKC8mL2csICcmYW1wOycpLnJlcGxhY2UoLzwvZywgJyZsdDsnKS5yZXBsYWNlKC8+L2csICcmZ3Q7JykucmVwbGFjZSgvXCIvZywgJyZxdW90OycpLnJlcGxhY2UoLycvZywgJyZhcG9zOycpO1xuXHRcdFx0ZWxzZVxuXHRcdFx0XHRyZXR1cm4gc3RyO1xuXHRcdH1cblx0XG5cdFx0ZnVuY3Rpb24gdW5lc2NhcGVYbWxDaGFycyhzdHIpIHtcblx0XHRcdHJldHVybiBzdHIucmVwbGFjZSgvJmx0Oy9nLCAnPCcpLnJlcGxhY2UoLyZndDsvZywgJz4nKS5yZXBsYWNlKC8mcXVvdDsvZywgJ1wiJykucmVwbGFjZSgvJmFwb3M7L2csIFwiJ1wiKS5yZXBsYWNlKC8mYW1wOy9nLCAnJicpO1xuXHRcdH1cblx0XHRcblx0XHRmdW5jdGlvbiBjaGVja0luU3RkRmlsdGVyc0FycmF5Rm9ybShzdGRGaWx0ZXJzQXJyYXlGb3JtLCBvYmosIG5hbWUsIHBhdGgpIHtcblx0XHRcdHZhciBpZHggPSAwO1xuXHRcdFx0Zm9yKDsgaWR4IDwgc3RkRmlsdGVyc0FycmF5Rm9ybS5sZW5ndGg7IGlkeCsrKSB7XG5cdFx0XHRcdHZhciBmaWx0ZXJQYXRoID0gc3RkRmlsdGVyc0FycmF5Rm9ybVtpZHhdO1xuXHRcdFx0XHRpZiggdHlwZW9mIGZpbHRlclBhdGggPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRcdFx0aWYoZmlsdGVyUGF0aCA9PSBwYXRoKVxuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZWxzZVxuXHRcdFx0XHRpZiggZmlsdGVyUGF0aCBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuXHRcdFx0XHRcdGlmKGZpbHRlclBhdGgudGVzdChwYXRoKSlcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XHRcdFx0XHRcblx0XHRcdFx0ZWxzZVxuXHRcdFx0XHRpZiggdHlwZW9mIGZpbHRlclBhdGggPT09IFwiZnVuY3Rpb25cIikge1xuXHRcdFx0XHRcdGlmKGZpbHRlclBhdGgob2JqLCBuYW1lLCBwYXRoKSlcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gaWR4IT1zdGRGaWx0ZXJzQXJyYXlGb3JtLmxlbmd0aDtcblx0XHR9XG5cdFx0XG5cdFx0ZnVuY3Rpb24gdG9BcnJheUFjY2Vzc0Zvcm0ob2JqLCBjaGlsZE5hbWUsIHBhdGgpIHtcblx0XHRcdHN3aXRjaChjb25maWcuYXJyYXlBY2Nlc3NGb3JtKSB7XG5cdFx0XHRcdGNhc2UgXCJwcm9wZXJ0eVwiOlxuXHRcdFx0XHRcdGlmKCEob2JqW2NoaWxkTmFtZV0gaW5zdGFuY2VvZiBBcnJheSkpXG5cdFx0XHRcdFx0XHRvYmpbY2hpbGROYW1lK1wiX2FzQXJyYXlcIl0gPSBbb2JqW2NoaWxkTmFtZV1dO1xuXHRcdFx0XHRcdGVsc2Vcblx0XHRcdFx0XHRcdG9ialtjaGlsZE5hbWUrXCJfYXNBcnJheVwiXSA9IG9ialtjaGlsZE5hbWVdO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHQvKmNhc2UgXCJub25lXCI6XG5cdFx0XHRcdFx0YnJlYWs7Ki9cblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0aWYoIShvYmpbY2hpbGROYW1lXSBpbnN0YW5jZW9mIEFycmF5KSAmJiBjb25maWcuYXJyYXlBY2Nlc3NGb3JtUGF0aHMubGVuZ3RoID4gMCkge1xuXHRcdFx0XHRpZihjaGVja0luU3RkRmlsdGVyc0FycmF5Rm9ybShjb25maWcuYXJyYXlBY2Nlc3NGb3JtUGF0aHMsIG9iaiwgY2hpbGROYW1lLCBwYXRoKSkge1xuXHRcdFx0XHRcdG9ialtjaGlsZE5hbWVdID0gW29ialtjaGlsZE5hbWVdXTtcblx0XHRcdFx0fVx0XHRcdFxuXHRcdFx0fVxuXHRcdH1cblx0XHRcblx0XHRmdW5jdGlvbiBmcm9tWG1sRGF0ZVRpbWUocHJvcCkge1xuXHRcdFx0Ly8gSW1wbGVtZW50YXRpb24gYmFzZWQgdXAgb24gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy84MTc4NTk4L3htbC1kYXRldGltZS10by1qYXZhc2NyaXB0LWRhdGUtb2JqZWN0XG5cdFx0XHQvLyBJbXByb3ZlZCB0byBzdXBwb3J0IGZ1bGwgc3BlYyBhbmQgb3B0aW9uYWwgcGFydHNcblx0XHRcdHZhciBiaXRzID0gcHJvcC5zcGxpdCgvWy1UOitaXS9nKTtcblx0XHRcdFxuXHRcdFx0dmFyIGQgPSBuZXcgRGF0ZShiaXRzWzBdLCBiaXRzWzFdLTEsIGJpdHNbMl0pO1x0XHRcdFxuXHRcdFx0dmFyIHNlY29uZEJpdHMgPSBiaXRzWzVdLnNwbGl0KFwiXFwuXCIpO1xuXHRcdFx0ZC5zZXRIb3VycyhiaXRzWzNdLCBiaXRzWzRdLCBzZWNvbmRCaXRzWzBdKTtcblx0XHRcdGlmKHNlY29uZEJpdHMubGVuZ3RoPjEpXG5cdFx0XHRcdGQuc2V0TWlsbGlzZWNvbmRzKHNlY29uZEJpdHNbMV0pO1xuXHRcblx0XHRcdC8vIEdldCBzdXBwbGllZCB0aW1lIHpvbmUgb2Zmc2V0IGluIG1pbnV0ZXNcblx0XHRcdGlmKGJpdHNbNl0gJiYgYml0c1s3XSkge1xuXHRcdFx0XHR2YXIgb2Zmc2V0TWludXRlcyA9IGJpdHNbNl0gKiA2MCArIE51bWJlcihiaXRzWzddKTtcblx0XHRcdFx0dmFyIHNpZ24gPSAvXFxkXFxkLVxcZFxcZDpcXGRcXGQkLy50ZXN0KHByb3ApPyAnLScgOiAnKyc7XG5cdFxuXHRcdFx0XHQvLyBBcHBseSB0aGUgc2lnblxuXHRcdFx0XHRvZmZzZXRNaW51dGVzID0gMCArIChzaWduID09ICctJz8gLTEgKiBvZmZzZXRNaW51dGVzIDogb2Zmc2V0TWludXRlcyk7XG5cdFxuXHRcdFx0XHQvLyBBcHBseSBvZmZzZXQgYW5kIGxvY2FsIHRpbWV6b25lXG5cdFx0XHRcdGQuc2V0TWludXRlcyhkLmdldE1pbnV0ZXMoKSAtIG9mZnNldE1pbnV0ZXMgLSBkLmdldFRpbWV6b25lT2Zmc2V0KCkpXG5cdFx0XHR9XG5cdFx0XHRlbHNlXG5cdFx0XHRcdGlmKHByb3AuaW5kZXhPZihcIlpcIiwgcHJvcC5sZW5ndGggLSAxKSAhPT0gLTEpIHtcblx0XHRcdFx0XHRkID0gbmV3IERhdGUoRGF0ZS5VVEMoZC5nZXRGdWxsWWVhcigpLCBkLmdldE1vbnRoKCksIGQuZ2V0RGF0ZSgpLCBkLmdldEhvdXJzKCksIGQuZ2V0TWludXRlcygpLCBkLmdldFNlY29uZHMoKSwgZC5nZXRNaWxsaXNlY29uZHMoKSkpO1x0XHRcdFx0XHRcblx0XHRcdFx0fVxuXHRcblx0XHRcdC8vIGQgaXMgbm93IGEgbG9jYWwgdGltZSBlcXVpdmFsZW50IHRvIHRoZSBzdXBwbGllZCB0aW1lXG5cdFx0XHRyZXR1cm4gZDtcblx0XHR9XG5cdFx0XG5cdFx0ZnVuY3Rpb24gY2hlY2tGcm9tWG1sRGF0ZVRpbWVQYXRocyh2YWx1ZSwgY2hpbGROYW1lLCBmdWxsUGF0aCkge1xuXHRcdFx0aWYoY29uZmlnLmRhdGV0aW1lQWNjZXNzRm9ybVBhdGhzLmxlbmd0aCA+IDApIHtcblx0XHRcdFx0dmFyIHBhdGggPSBmdWxsUGF0aC5zcGxpdChcIlxcLiNcIilbMF07XG5cdFx0XHRcdGlmKGNoZWNrSW5TdGRGaWx0ZXJzQXJyYXlGb3JtKGNvbmZpZy5kYXRldGltZUFjY2Vzc0Zvcm1QYXRocywgdmFsdWUsIGNoaWxkTmFtZSwgcGF0aCkpIHtcblx0XHRcdFx0XHRyZXR1cm4gZnJvbVhtbERhdGVUaW1lKHZhbHVlKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRlbHNlXG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1x0XHRcdFxuXHRcdFx0fVxuXHRcdFx0ZWxzZVxuXHRcdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0fVxuXHRcdFxuXHRcdGZ1bmN0aW9uIGNoZWNrWG1sRWxlbWVudHNGaWx0ZXIob2JqLCBjaGlsZFR5cGUsIGNoaWxkTmFtZSwgY2hpbGRQYXRoKSB7XG5cdFx0XHRpZiggY2hpbGRUeXBlID09IERPTU5vZGVUeXBlcy5FTEVNRU5UX05PREUgJiYgY29uZmlnLnhtbEVsZW1lbnRzRmlsdGVyLmxlbmd0aCA+IDApIHtcblx0XHRcdFx0cmV0dXJuIGNoZWNrSW5TdGRGaWx0ZXJzQXJyYXlGb3JtKGNvbmZpZy54bWxFbGVtZW50c0ZpbHRlciwgb2JqLCBjaGlsZE5hbWUsIGNoaWxkUGF0aCk7XHRcblx0XHRcdH1cblx0XHRcdGVsc2Vcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVx0XG5cdFxuXHRcdGZ1bmN0aW9uIHBhcnNlRE9NQ2hpbGRyZW4oIG5vZGUsIHBhdGggKSB7XG5cdFx0XHRpZihub2RlLm5vZGVUeXBlID09IERPTU5vZGVUeXBlcy5ET0NVTUVOVF9OT0RFKSB7XG5cdFx0XHRcdHZhciByZXN1bHQgPSBuZXcgT2JqZWN0O1xuXHRcdFx0XHR2YXIgbm9kZUNoaWxkcmVuID0gbm9kZS5jaGlsZE5vZGVzO1xuXHRcdFx0XHQvLyBBbHRlcm5hdGl2ZSBmb3IgZmlyc3RFbGVtZW50Q2hpbGQgd2hpY2ggaXMgbm90IHN1cHBvcnRlZCBpbiBzb21lIGVudmlyb25tZW50c1xuXHRcdFx0XHRmb3IodmFyIGNpZHg9MDsgY2lkeCA8bm9kZUNoaWxkcmVuLmxlbmd0aDsgY2lkeCsrKSB7XG5cdFx0XHRcdFx0dmFyIGNoaWxkID0gbm9kZUNoaWxkcmVuLml0ZW0oY2lkeCk7XG5cdFx0XHRcdFx0aWYoY2hpbGQubm9kZVR5cGUgPT0gRE9NTm9kZVR5cGVzLkVMRU1FTlRfTk9ERSkge1xuXHRcdFx0XHRcdFx0dmFyIGNoaWxkTmFtZSA9IGdldE5vZGVMb2NhbE5hbWUoY2hpbGQpO1xuXHRcdFx0XHRcdFx0cmVzdWx0W2NoaWxkTmFtZV0gPSBwYXJzZURPTUNoaWxkcmVuKGNoaWxkLCBjaGlsZE5hbWUpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdFx0fVxuXHRcdFx0ZWxzZVxuXHRcdFx0aWYobm9kZS5ub2RlVHlwZSA9PSBET01Ob2RlVHlwZXMuRUxFTUVOVF9OT0RFKSB7XG5cdFx0XHRcdHZhciByZXN1bHQgPSBuZXcgT2JqZWN0O1xuXHRcdFx0XHRyZXN1bHQuX19jbnQ9MDtcblx0XHRcdFx0XG5cdFx0XHRcdHZhciBub2RlQ2hpbGRyZW4gPSBub2RlLmNoaWxkTm9kZXM7XG5cdFx0XHRcdFxuXHRcdFx0XHQvLyBDaGlsZHJlbiBub2Rlc1xuXHRcdFx0XHRmb3IodmFyIGNpZHg9MDsgY2lkeCA8bm9kZUNoaWxkcmVuLmxlbmd0aDsgY2lkeCsrKSB7XG5cdFx0XHRcdFx0dmFyIGNoaWxkID0gbm9kZUNoaWxkcmVuLml0ZW0oY2lkeCk7IC8vIG5vZGVDaGlsZHJlbltjaWR4XTtcblx0XHRcdFx0XHR2YXIgY2hpbGROYW1lID0gZ2V0Tm9kZUxvY2FsTmFtZShjaGlsZCk7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0aWYoY2hpbGQubm9kZVR5cGUhPSBET01Ob2RlVHlwZXMuQ09NTUVOVF9OT0RFKSB7XG5cdFx0XHRcdFx0XHR2YXIgY2hpbGRQYXRoID0gcGF0aCtcIi5cIitjaGlsZE5hbWU7XG5cdFx0XHRcdFx0XHRpZiAoY2hlY2tYbWxFbGVtZW50c0ZpbHRlcihyZXN1bHQsY2hpbGQubm9kZVR5cGUsY2hpbGROYW1lLGNoaWxkUGF0aCkpIHtcblx0XHRcdFx0XHRcdFx0cmVzdWx0Ll9fY250Kys7XG5cdFx0XHRcdFx0XHRcdGlmKHJlc3VsdFtjaGlsZE5hbWVdID09IG51bGwpIHtcblx0XHRcdFx0XHRcdFx0XHRyZXN1bHRbY2hpbGROYW1lXSA9IHBhcnNlRE9NQ2hpbGRyZW4oY2hpbGQsIGNoaWxkUGF0aCk7XG5cdFx0XHRcdFx0XHRcdFx0dG9BcnJheUFjY2Vzc0Zvcm0ocmVzdWx0LCBjaGlsZE5hbWUsIGNoaWxkUGF0aCk7XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdGlmKHJlc3VsdFtjaGlsZE5hbWVdICE9IG51bGwpIHtcblx0XHRcdFx0XHRcdFx0XHRcdGlmKCAhKHJlc3VsdFtjaGlsZE5hbWVdIGluc3RhbmNlb2YgQXJyYXkpKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJlc3VsdFtjaGlsZE5hbWVdID0gW3Jlc3VsdFtjaGlsZE5hbWVdXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0dG9BcnJheUFjY2Vzc0Zvcm0ocmVzdWx0LCBjaGlsZE5hbWUsIGNoaWxkUGF0aCk7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdChyZXN1bHRbY2hpbGROYW1lXSlbcmVzdWx0W2NoaWxkTmFtZV0ubGVuZ3RoXSA9IHBhcnNlRE9NQ2hpbGRyZW4oY2hpbGQsIGNoaWxkUGF0aCk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XHRcdFx0XHRcdFx0XHRcdFxuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0XHQvLyBBdHRyaWJ1dGVzXG5cdFx0XHRcdGZvcih2YXIgYWlkeD0wOyBhaWR4IDxub2RlLmF0dHJpYnV0ZXMubGVuZ3RoOyBhaWR4KyspIHtcblx0XHRcdFx0XHR2YXIgYXR0ciA9IG5vZGUuYXR0cmlidXRlcy5pdGVtKGFpZHgpOyAvLyBbYWlkeF07XG5cdFx0XHRcdFx0cmVzdWx0Ll9fY250Kys7XG5cdFx0XHRcdFx0cmVzdWx0W2NvbmZpZy5hdHRyaWJ1dGVQcmVmaXgrYXR0ci5uYW1lXT1hdHRyLnZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0XHQvLyBOb2RlIG5hbWVzcGFjZSBwcmVmaXhcblx0XHRcdFx0dmFyIG5vZGVQcmVmaXggPSBnZXROb2RlUHJlZml4KG5vZGUpO1xuXHRcdFx0XHRpZihub2RlUHJlZml4IT1udWxsICYmIG5vZGVQcmVmaXghPVwiXCIpIHtcblx0XHRcdFx0XHRyZXN1bHQuX19jbnQrKztcblx0XHRcdFx0XHRyZXN1bHQuX19wcmVmaXg9bm9kZVByZWZpeDtcblx0XHRcdFx0fVxuXHRcdFx0XHRcblx0XHRcdFx0aWYocmVzdWx0W1wiI3RleHRcIl0hPW51bGwpIHtcdFx0XHRcdFxuXHRcdFx0XHRcdHJlc3VsdC5fX3RleHQgPSByZXN1bHRbXCIjdGV4dFwiXTtcblx0XHRcdFx0XHRpZihyZXN1bHQuX190ZXh0IGluc3RhbmNlb2YgQXJyYXkpIHtcblx0XHRcdFx0XHRcdHJlc3VsdC5fX3RleHQgPSByZXN1bHQuX190ZXh0LmpvaW4oXCJcXG5cIik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdC8vaWYoY29uZmlnLmVzY2FwZU1vZGUpXG5cdFx0XHRcdFx0Ly9cdHJlc3VsdC5fX3RleHQgPSB1bmVzY2FwZVhtbENoYXJzKHJlc3VsdC5fX3RleHQpO1xuXHRcdFx0XHRcdGlmKGNvbmZpZy5zdHJpcFdoaXRlc3BhY2VzKVxuXHRcdFx0XHRcdFx0cmVzdWx0Ll9fdGV4dCA9IHJlc3VsdC5fX3RleHQudHJpbSgpO1xuXHRcdFx0XHRcdGRlbGV0ZSByZXN1bHRbXCIjdGV4dFwiXTtcblx0XHRcdFx0XHRpZihjb25maWcuYXJyYXlBY2Nlc3NGb3JtPT1cInByb3BlcnR5XCIpXG5cdFx0XHRcdFx0XHRkZWxldGUgcmVzdWx0W1wiI3RleHRfYXNBcnJheVwiXTtcblx0XHRcdFx0XHRyZXN1bHQuX190ZXh0ID0gY2hlY2tGcm9tWG1sRGF0ZVRpbWVQYXRocyhyZXN1bHQuX190ZXh0LCBjaGlsZE5hbWUsIHBhdGgrXCIuXCIrY2hpbGROYW1lKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZihyZXN1bHRbXCIjY2RhdGEtc2VjdGlvblwiXSE9bnVsbCkge1xuXHRcdFx0XHRcdHJlc3VsdC5fX2NkYXRhID0gcmVzdWx0W1wiI2NkYXRhLXNlY3Rpb25cIl07XG5cdFx0XHRcdFx0ZGVsZXRlIHJlc3VsdFtcIiNjZGF0YS1zZWN0aW9uXCJdO1xuXHRcdFx0XHRcdGlmKGNvbmZpZy5hcnJheUFjY2Vzc0Zvcm09PVwicHJvcGVydHlcIilcblx0XHRcdFx0XHRcdGRlbGV0ZSByZXN1bHRbXCIjY2RhdGEtc2VjdGlvbl9hc0FycmF5XCJdO1xuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0XHRpZiggcmVzdWx0Ll9fY250ID09IDAgJiYgY29uZmlnLmVtcHR5Tm9kZUZvcm09PVwidGV4dFwiICkge1xuXHRcdFx0XHRcdHJlc3VsdCA9ICcnO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGVsc2Vcblx0XHRcdFx0aWYoIHJlc3VsdC5fX2NudCA9PSAxICYmIHJlc3VsdC5fX3RleHQhPW51bGwgICkge1xuXHRcdFx0XHRcdHJlc3VsdCA9IHJlc3VsdC5fX3RleHQ7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZWxzZVxuXHRcdFx0XHRpZiggcmVzdWx0Ll9fY250ID09IDEgJiYgcmVzdWx0Ll9fY2RhdGEhPW51bGwgJiYgIWNvbmZpZy5rZWVwQ0RhdGEgICkge1xuXHRcdFx0XHRcdHJlc3VsdCA9IHJlc3VsdC5fX2NkYXRhO1xuXHRcdFx0XHR9XHRcdFx0XG5cdFx0XHRcdGVsc2VcdFx0XHRcblx0XHRcdFx0aWYgKCByZXN1bHQuX19jbnQgPiAxICYmIHJlc3VsdC5fX3RleHQhPW51bGwgJiYgY29uZmlnLnNraXBFbXB0eVRleHROb2Rlc0Zvck9iaikge1xuXHRcdFx0XHRcdGlmKCAoY29uZmlnLnN0cmlwV2hpdGVzcGFjZXMgJiYgcmVzdWx0Ll9fdGV4dD09XCJcIikgfHwgKHJlc3VsdC5fX3RleHQudHJpbSgpPT1cIlwiKSkge1xuXHRcdFx0XHRcdFx0ZGVsZXRlIHJlc3VsdC5fX3RleHQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdGRlbGV0ZSByZXN1bHQuX19jbnQ7XHRcdFx0XG5cdFx0XHRcdFxuXHRcdFx0XHRpZiggY29uZmlnLmVuYWJsZVRvU3RyaW5nRnVuYyAmJiAocmVzdWx0Ll9fdGV4dCE9bnVsbCB8fCByZXN1bHQuX19jZGF0YSE9bnVsbCApKSB7XG5cdFx0XHRcdFx0cmVzdWx0LnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gKHRoaXMuX190ZXh0IT1udWxsPyB0aGlzLl9fdGV4dDonJykrKCB0aGlzLl9fY2RhdGEhPW51bGwgPyB0aGlzLl9fY2RhdGE6JycpO1xuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH1cblx0XHRcdFx0XG5cdFx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0XHR9XG5cdFx0XHRlbHNlXG5cdFx0XHRpZihub2RlLm5vZGVUeXBlID09IERPTU5vZGVUeXBlcy5URVhUX05PREUgfHwgbm9kZS5ub2RlVHlwZSA9PSBET01Ob2RlVHlwZXMuQ0RBVEFfU0VDVElPTl9OT0RFKSB7XG5cdFx0XHRcdHJldHVybiBub2RlLm5vZGVWYWx1ZTtcblx0XHRcdH1cdFxuXHRcdH1cblx0XHRcblx0XHRmdW5jdGlvbiBzdGFydFRhZyhqc29uT2JqLCBlbGVtZW50LCBhdHRyTGlzdCwgY2xvc2VkKSB7XG5cdFx0XHR2YXIgcmVzdWx0U3RyID0gXCI8XCIrICggKGpzb25PYmohPW51bGwgJiYganNvbk9iai5fX3ByZWZpeCE9bnVsbCk/IChqc29uT2JqLl9fcHJlZml4K1wiOlwiKTpcIlwiKSArIGVsZW1lbnQ7XG5cdFx0XHRpZihhdHRyTGlzdCE9bnVsbCkge1xuXHRcdFx0XHRmb3IodmFyIGFpZHggPSAwOyBhaWR4IDwgYXR0ckxpc3QubGVuZ3RoOyBhaWR4KyspIHtcblx0XHRcdFx0XHR2YXIgYXR0ck5hbWUgPSBhdHRyTGlzdFthaWR4XTtcblx0XHRcdFx0XHR2YXIgYXR0clZhbCA9IGpzb25PYmpbYXR0ck5hbWVdO1xuXHRcdFx0XHRcdGlmKGNvbmZpZy5lc2NhcGVNb2RlKVxuXHRcdFx0XHRcdFx0YXR0clZhbD1lc2NhcGVYbWxDaGFycyhhdHRyVmFsKTtcblx0XHRcdFx0XHRyZXN1bHRTdHIrPVwiIFwiK2F0dHJOYW1lLnN1YnN0cihjb25maWcuYXR0cmlidXRlUHJlZml4Lmxlbmd0aCkrXCI9XCI7XG5cdFx0XHRcdFx0aWYoY29uZmlnLnVzZURvdWJsZVF1b3Rlcylcblx0XHRcdFx0XHRcdHJlc3VsdFN0cis9J1wiJythdHRyVmFsKydcIic7XG5cdFx0XHRcdFx0ZWxzZVxuXHRcdFx0XHRcdFx0cmVzdWx0U3RyKz1cIidcIithdHRyVmFsK1wiJ1wiO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZighY2xvc2VkKVxuXHRcdFx0XHRyZXN1bHRTdHIrPVwiPlwiO1xuXHRcdFx0ZWxzZVxuXHRcdFx0XHRyZXN1bHRTdHIrPVwiLz5cIjtcblx0XHRcdHJldHVybiByZXN1bHRTdHI7XG5cdFx0fVxuXHRcdFxuXHRcdGZ1bmN0aW9uIGVuZFRhZyhqc29uT2JqLGVsZW1lbnROYW1lKSB7XG5cdFx0XHRyZXR1cm4gXCI8L1wiKyAoanNvbk9iai5fX3ByZWZpeCE9bnVsbD8gKGpzb25PYmouX19wcmVmaXgrXCI6XCIpOlwiXCIpK2VsZW1lbnROYW1lK1wiPlwiO1xuXHRcdH1cblx0XHRcblx0XHRmdW5jdGlvbiBlbmRzV2l0aChzdHIsIHN1ZmZpeCkge1xuXHRcdFx0cmV0dXJuIHN0ci5pbmRleE9mKHN1ZmZpeCwgc3RyLmxlbmd0aCAtIHN1ZmZpeC5sZW5ndGgpICE9PSAtMTtcblx0XHR9XG5cdFx0XG5cdFx0ZnVuY3Rpb24ganNvblhtbFNwZWNpYWxFbGVtICgganNvbk9iaiwganNvbk9iakZpZWxkICkge1xuXHRcdFx0aWYoKGNvbmZpZy5hcnJheUFjY2Vzc0Zvcm09PVwicHJvcGVydHlcIiAmJiBlbmRzV2l0aChqc29uT2JqRmllbGQudG9TdHJpbmcoKSwoXCJfYXNBcnJheVwiKSkpIFxuXHRcdFx0XHRcdHx8IGpzb25PYmpGaWVsZC50b1N0cmluZygpLmluZGV4T2YoY29uZmlnLmF0dHJpYnV0ZVByZWZpeCk9PTAgXG5cdFx0XHRcdFx0fHwganNvbk9iakZpZWxkLnRvU3RyaW5nKCkuaW5kZXhPZihcIl9fXCIpPT0wXG5cdFx0XHRcdFx0fHwgKGpzb25PYmpbanNvbk9iakZpZWxkXSBpbnN0YW5jZW9mIEZ1bmN0aW9uKSApXG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0ZWxzZVxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdFxuXHRcdGZ1bmN0aW9uIGpzb25YbWxFbGVtQ291bnQgKCBqc29uT2JqICkge1xuXHRcdFx0dmFyIGVsZW1lbnRzQ250ID0gMDtcblx0XHRcdGlmKGpzb25PYmogaW5zdGFuY2VvZiBPYmplY3QgKSB7XG5cdFx0XHRcdGZvciggdmFyIGl0IGluIGpzb25PYmogICkge1xuXHRcdFx0XHRcdGlmKGpzb25YbWxTcGVjaWFsRWxlbSAoIGpzb25PYmosIGl0KSApXG5cdFx0XHRcdFx0XHRjb250aW51ZTtcdFx0XHRcblx0XHRcdFx0XHRlbGVtZW50c0NudCsrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZWxlbWVudHNDbnQ7XG5cdFx0fVxuXHRcdFxuXHRcdGZ1bmN0aW9uIGNoZWNrSnNvbk9ialByb3BlcnRpZXNGaWx0ZXIoanNvbk9iaiwgcHJvcGVydHlOYW1lLCBqc29uT2JqUGF0aCkge1xuXHRcdFx0cmV0dXJuIGNvbmZpZy5qc29uUHJvcGVydGllc0ZpbHRlci5sZW5ndGggPT0gMFxuXHRcdFx0XHR8fCBqc29uT2JqUGF0aD09XCJcIlxuXHRcdFx0XHR8fCBjaGVja0luU3RkRmlsdGVyc0FycmF5Rm9ybShjb25maWcuanNvblByb3BlcnRpZXNGaWx0ZXIsIGpzb25PYmosIHByb3BlcnR5TmFtZSwganNvbk9ialBhdGgpO1x0XG5cdFx0fVxuXHRcdFxuXHRcdGZ1bmN0aW9uIHBhcnNlSlNPTkF0dHJpYnV0ZXMgKCBqc29uT2JqICkge1xuXHRcdFx0dmFyIGF0dHJMaXN0ID0gW107XG5cdFx0XHRpZihqc29uT2JqIGluc3RhbmNlb2YgT2JqZWN0ICkge1xuXHRcdFx0XHRmb3IoIHZhciBhaXQgaW4ganNvbk9iaiAgKSB7XG5cdFx0XHRcdFx0aWYoYWl0LnRvU3RyaW5nKCkuaW5kZXhPZihcIl9fXCIpPT0gLTEgJiYgYWl0LnRvU3RyaW5nKCkuaW5kZXhPZihjb25maWcuYXR0cmlidXRlUHJlZml4KT09MCkge1xuXHRcdFx0XHRcdFx0YXR0ckxpc3QucHVzaChhaXQpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGF0dHJMaXN0O1xuXHRcdH1cblx0XHRcblx0XHRmdW5jdGlvbiBwYXJzZUpTT05UZXh0QXR0cnMgKCBqc29uVHh0T2JqICkge1xuXHRcdFx0dmFyIHJlc3VsdCA9XCJcIjtcblx0XHRcdFxuXHRcdFx0aWYoanNvblR4dE9iai5fX2NkYXRhIT1udWxsKSB7XHRcdFx0XHRcdFx0XHRcdFx0XHRcblx0XHRcdFx0cmVzdWx0Kz1cIjwhW0NEQVRBW1wiK2pzb25UeHRPYmouX19jZGF0YStcIl1dPlwiO1x0XHRcdFx0XHRcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0aWYoanNvblR4dE9iai5fX3RleHQhPW51bGwpIHtcdFx0XHRcblx0XHRcdFx0aWYoY29uZmlnLmVzY2FwZU1vZGUpXG5cdFx0XHRcdFx0cmVzdWx0Kz1lc2NhcGVYbWxDaGFycyhqc29uVHh0T2JqLl9fdGV4dCk7XG5cdFx0XHRcdGVsc2Vcblx0XHRcdFx0XHRyZXN1bHQrPWpzb25UeHRPYmouX190ZXh0O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHR9XG5cdFx0XG5cdFx0ZnVuY3Rpb24gcGFyc2VKU09OVGV4dE9iamVjdCAoIGpzb25UeHRPYmogKSB7XG5cdFx0XHR2YXIgcmVzdWx0ID1cIlwiO1xuXHRcblx0XHRcdGlmKCBqc29uVHh0T2JqIGluc3RhbmNlb2YgT2JqZWN0ICkge1xuXHRcdFx0XHRyZXN1bHQrPXBhcnNlSlNPTlRleHRBdHRycyAoIGpzb25UeHRPYmogKTtcblx0XHRcdH1cblx0XHRcdGVsc2Vcblx0XHRcdFx0aWYoanNvblR4dE9iaiE9bnVsbCkge1xuXHRcdFx0XHRcdGlmKGNvbmZpZy5lc2NhcGVNb2RlKVxuXHRcdFx0XHRcdFx0cmVzdWx0Kz1lc2NhcGVYbWxDaGFycyhqc29uVHh0T2JqKTtcblx0XHRcdFx0XHRlbHNlXG5cdFx0XHRcdFx0XHRyZXN1bHQrPWpzb25UeHRPYmo7XG5cdFx0XHRcdH1cblx0XHRcdFxuXHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHR9XG5cdFx0XG5cdFx0ZnVuY3Rpb24gZ2V0SnNvblByb3BlcnR5UGF0aChqc29uT2JqUGF0aCwganNvblByb3BOYW1lKSB7XG5cdFx0XHRpZiAoanNvbk9ialBhdGg9PT1cIlwiKSB7XG5cdFx0XHRcdHJldHVybiBqc29uUHJvcE5hbWU7XG5cdFx0XHR9XG5cdFx0XHRlbHNlXG5cdFx0XHRcdHJldHVybiBqc29uT2JqUGF0aCtcIi5cIitqc29uUHJvcE5hbWU7XG5cdFx0fVxuXHRcdFxuXHRcdGZ1bmN0aW9uIHBhcnNlSlNPTkFycmF5ICgganNvbkFyclJvb3QsIGpzb25BcnJPYmosIGF0dHJMaXN0LCBqc29uT2JqUGF0aCApIHtcblx0XHRcdHZhciByZXN1bHQgPSBcIlwiOyBcblx0XHRcdGlmKGpzb25BcnJSb290Lmxlbmd0aCA9PSAwKSB7XG5cdFx0XHRcdHJlc3VsdCs9c3RhcnRUYWcoanNvbkFyclJvb3QsIGpzb25BcnJPYmosIGF0dHJMaXN0LCB0cnVlKTtcblx0XHRcdH1cblx0XHRcdGVsc2Uge1xuXHRcdFx0XHRmb3IodmFyIGFySWR4ID0gMDsgYXJJZHggPCBqc29uQXJyUm9vdC5sZW5ndGg7IGFySWR4KyspIHtcblx0XHRcdFx0XHRyZXN1bHQrPXN0YXJ0VGFnKGpzb25BcnJSb290W2FySWR4XSwganNvbkFyck9iaiwgcGFyc2VKU09OQXR0cmlidXRlcyhqc29uQXJyUm9vdFthcklkeF0pLCBmYWxzZSk7XG5cdFx0XHRcdFx0cmVzdWx0Kz1wYXJzZUpTT05PYmplY3QoanNvbkFyclJvb3RbYXJJZHhdLCBnZXRKc29uUHJvcGVydHlQYXRoKGpzb25PYmpQYXRoLGpzb25BcnJPYmopKTtcblx0XHRcdFx0XHRyZXN1bHQrPWVuZFRhZyhqc29uQXJyUm9vdFthcklkeF0sanNvbkFyck9iaik7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0fVxuXHRcdFxuXHRcdGZ1bmN0aW9uIHBhcnNlSlNPTk9iamVjdCAoIGpzb25PYmosIGpzb25PYmpQYXRoICkge1xuXHRcdFx0dmFyIHJlc3VsdCA9IFwiXCI7XHRcblx0XG5cdFx0XHR2YXIgZWxlbWVudHNDbnQgPSBqc29uWG1sRWxlbUNvdW50ICgganNvbk9iaiApO1xuXHRcdFx0XG5cdFx0XHRpZihlbGVtZW50c0NudCA+IDApIHtcblx0XHRcdFx0Zm9yKCB2YXIgaXQgaW4ganNvbk9iaiApIHtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRpZihqc29uWG1sU3BlY2lhbEVsZW0gKCBqc29uT2JqLCBpdCkgfHwgKGpzb25PYmpQYXRoIT1cIlwiICYmICFjaGVja0pzb25PYmpQcm9wZXJ0aWVzRmlsdGVyKGpzb25PYmosIGl0LCBnZXRKc29uUHJvcGVydHlQYXRoKGpzb25PYmpQYXRoLGl0KSkpIClcblx0XHRcdFx0XHRcdGNvbnRpbnVlO1x0XHRcdFxuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdHZhciBzdWJPYmogPSBqc29uT2JqW2l0XTtcdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcblx0XHRcdFx0XHR2YXIgYXR0ckxpc3QgPSBwYXJzZUpTT05BdHRyaWJ1dGVzKCBzdWJPYmogKVxuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdGlmKHN1Yk9iaiA9PSBudWxsIHx8IHN1Yk9iaiA9PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHRcdHJlc3VsdCs9c3RhcnRUYWcoc3ViT2JqLCBpdCwgYXR0ckxpc3QsIHRydWUpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRlbHNlXG5cdFx0XHRcdFx0aWYoc3ViT2JqIGluc3RhbmNlb2YgT2JqZWN0KSB7XG5cdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdGlmKHN1Yk9iaiBpbnN0YW5jZW9mIEFycmF5KSB7XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0XHRyZXN1bHQrPXBhcnNlSlNPTkFycmF5KCBzdWJPYmosIGl0LCBhdHRyTGlzdCwganNvbk9ialBhdGggKTtcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRlbHNlIGlmKHN1Yk9iaiBpbnN0YW5jZW9mIERhdGUpIHtcblx0XHRcdFx0XHRcdFx0cmVzdWx0Kz1zdGFydFRhZyhzdWJPYmosIGl0LCBhdHRyTGlzdCwgZmFsc2UpO1xuXHRcdFx0XHRcdFx0XHRyZXN1bHQrPXN1Yk9iai50b0lTT1N0cmluZygpO1xuXHRcdFx0XHRcdFx0XHRyZXN1bHQrPWVuZFRhZyhzdWJPYmosaXQpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0ZWxzZSB7XG5cdFx0XHRcdFx0XHRcdHZhciBzdWJPYmpFbGVtZW50c0NudCA9IGpzb25YbWxFbGVtQ291bnQgKCBzdWJPYmogKTtcblx0XHRcdFx0XHRcdFx0aWYoc3ViT2JqRWxlbWVudHNDbnQgPiAwIHx8IHN1Yk9iai5fX3RleHQhPW51bGwgfHwgc3ViT2JqLl9fY2RhdGEhPW51bGwpIHtcblx0XHRcdFx0XHRcdFx0XHRyZXN1bHQrPXN0YXJ0VGFnKHN1Yk9iaiwgaXQsIGF0dHJMaXN0LCBmYWxzZSk7XG5cdFx0XHRcdFx0XHRcdFx0cmVzdWx0Kz1wYXJzZUpTT05PYmplY3Qoc3ViT2JqLCBnZXRKc29uUHJvcGVydHlQYXRoKGpzb25PYmpQYXRoLGl0KSk7XG5cdFx0XHRcdFx0XHRcdFx0cmVzdWx0Kz1lbmRUYWcoc3ViT2JqLGl0KTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRyZXN1bHQrPXN0YXJ0VGFnKHN1Yk9iaiwgaXQsIGF0dHJMaXN0LCB0cnVlKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRlbHNlIHtcblx0XHRcdFx0XHRcdHJlc3VsdCs9c3RhcnRUYWcoc3ViT2JqLCBpdCwgYXR0ckxpc3QsIGZhbHNlKTtcblx0XHRcdFx0XHRcdHJlc3VsdCs9cGFyc2VKU09OVGV4dE9iamVjdChzdWJPYmopO1xuXHRcdFx0XHRcdFx0cmVzdWx0Kz1lbmRUYWcoc3ViT2JqLGl0KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJlc3VsdCs9cGFyc2VKU09OVGV4dE9iamVjdChqc29uT2JqKTtcblx0XHRcdFxuXHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHR9XG5cdFx0XG5cdFx0dGhpcy5wYXJzZVhtbFN0cmluZyA9IGZ1bmN0aW9uKHhtbERvY1N0cikge1xuXHRcdFx0dmFyIGlzSUVQYXJzZXIgPSB3aW5kb3cuQWN0aXZlWE9iamVjdCB8fCBcIkFjdGl2ZVhPYmplY3RcIiBpbiB3aW5kb3c7XG5cdFx0XHRpZiAoeG1sRG9jU3RyID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHR9XG5cdFx0XHR2YXIgeG1sRG9jO1xuXHRcdFx0aWYgKHdpbmRvdy5ET01QYXJzZXIpIHtcblx0XHRcdFx0dmFyIHBhcnNlcj1uZXcgd2luZG93LkRPTVBhcnNlcigpO1x0XHRcdFxuXHRcdFx0XHR2YXIgcGFyc2VyZXJyb3JOUyA9IG51bGw7XG5cdFx0XHRcdC8vIElFOSsgbm93IGlzIGhlcmVcblx0XHRcdFx0aWYoIWlzSUVQYXJzZXIpIHtcblx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0cGFyc2VyZXJyb3JOUyA9IHBhcnNlci5wYXJzZUZyb21TdHJpbmcoXCJJTlZBTElEXCIsIFwidGV4dC94bWxcIikuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJwYXJzZXJlcnJvclwiKVswXS5uYW1lc3BhY2VVUkk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGNhdGNoKGVycikge1x0XHRcdFx0XHRcblx0XHRcdFx0XHRcdHBhcnNlcmVycm9yTlMgPSBudWxsO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdHhtbERvYyA9IHBhcnNlci5wYXJzZUZyb21TdHJpbmcoIHhtbERvY1N0ciwgXCJ0ZXh0L3htbFwiICk7XG5cdFx0XHRcdFx0aWYoIHBhcnNlcmVycm9yTlMhPSBudWxsICYmIHhtbERvYy5nZXRFbGVtZW50c0J5VGFnTmFtZU5TKHBhcnNlcmVycm9yTlMsIFwicGFyc2VyZXJyb3JcIikubGVuZ3RoID4gMCkge1xuXHRcdFx0XHRcdFx0Ly90aHJvdyBuZXcgRXJyb3IoJ0Vycm9yIHBhcnNpbmcgWE1MOiAnK3htbERvY1N0cik7XG5cdFx0XHRcdFx0XHR4bWxEb2MgPSBudWxsO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRjYXRjaChlcnIpIHtcblx0XHRcdFx0XHR4bWxEb2MgPSBudWxsO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRlbHNlIHtcblx0XHRcdFx0Ly8gSUUgOihcblx0XHRcdFx0aWYoeG1sRG9jU3RyLmluZGV4T2YoXCI8P1wiKT09MCkge1xuXHRcdFx0XHRcdHhtbERvY1N0ciA9IHhtbERvY1N0ci5zdWJzdHIoIHhtbERvY1N0ci5pbmRleE9mKFwiPz5cIikgKyAyICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0eG1sRG9jPW5ldyBBY3RpdmVYT2JqZWN0KFwiTWljcm9zb2Z0LlhNTERPTVwiKTtcblx0XHRcdFx0eG1sRG9jLmFzeW5jPVwiZmFsc2VcIjtcblx0XHRcdFx0eG1sRG9jLmxvYWRYTUwoeG1sRG9jU3RyKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB4bWxEb2M7XG5cdFx0fTtcblx0XHRcblx0XHR0aGlzLmFzQXJyYXkgPSBmdW5jdGlvbihwcm9wKSB7XG5cdFx0XHRpZiAocHJvcCA9PT0gdW5kZWZpbmVkIHx8IHByb3AgPT0gbnVsbClcblx0XHRcdFx0cmV0dXJuIFtdO1xuXHRcdFx0ZWxzZVxuXHRcdFx0aWYocHJvcCBpbnN0YW5jZW9mIEFycmF5KVxuXHRcdFx0XHRyZXR1cm4gcHJvcDtcblx0XHRcdGVsc2Vcblx0XHRcdFx0cmV0dXJuIFtwcm9wXTtcblx0XHR9O1xuXHRcdFxuXHRcdHRoaXMudG9YbWxEYXRlVGltZSA9IGZ1bmN0aW9uKGR0KSB7XG5cdFx0XHRpZihkdCBpbnN0YW5jZW9mIERhdGUpXG5cdFx0XHRcdHJldHVybiBkdC50b0lTT1N0cmluZygpO1xuXHRcdFx0ZWxzZVxuXHRcdFx0aWYodHlwZW9mKGR0KSA9PT0gJ251bWJlcicgKVxuXHRcdFx0XHRyZXR1cm4gbmV3IERhdGUoZHQpLnRvSVNPU3RyaW5nKCk7XG5cdFx0XHRlbHNlXHRcblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fTtcblx0XHRcblx0XHR0aGlzLmFzRGF0ZVRpbWUgPSBmdW5jdGlvbihwcm9wKSB7XG5cdFx0XHRpZih0eXBlb2YocHJvcCkgPT0gXCJzdHJpbmdcIikge1xuXHRcdFx0XHRyZXR1cm4gZnJvbVhtbERhdGVUaW1lKHByb3ApO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZVxuXHRcdFx0XHRyZXR1cm4gcHJvcDtcblx0XHR9O1xuXHRcblx0XHR0aGlzLnhtbDJqc29uID0gZnVuY3Rpb24gKHhtbERvYykge1xuXHRcdFx0cmV0dXJuIHBhcnNlRE9NQ2hpbGRyZW4gKCB4bWxEb2MgKTtcblx0XHR9O1xuXHRcdFxuXHRcdHRoaXMueG1sX3N0cjJqc29uID0gZnVuY3Rpb24gKHhtbERvY1N0cikge1xuXHRcdFx0dmFyIHhtbERvYyA9IHRoaXMucGFyc2VYbWxTdHJpbmcoeG1sRG9jU3RyKTtcblx0XHRcdGlmKHhtbERvYyE9bnVsbClcblx0XHRcdFx0cmV0dXJuIHRoaXMueG1sMmpzb24oeG1sRG9jKTtcblx0XHRcdGVsc2Vcblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fTtcblx0XG5cdFx0dGhpcy5qc29uMnhtbF9zdHIgPSBmdW5jdGlvbiAoanNvbk9iaikge1xuXHRcdFx0cmV0dXJuIHBhcnNlSlNPTk9iamVjdCAoIGpzb25PYmosIFwiXCIgKTtcblx0XHR9O1xuXHRcblx0XHR0aGlzLmpzb24yeG1sID0gZnVuY3Rpb24gKGpzb25PYmopIHtcblx0XHRcdHZhciB4bWxEb2NTdHIgPSB0aGlzLmpzb24yeG1sX3N0ciAoanNvbk9iaik7XG5cdFx0XHRyZXR1cm4gdGhpcy5wYXJzZVhtbFN0cmluZyh4bWxEb2NTdHIpO1xuXHRcdH07XG5cdFx0XG5cdFx0dGhpcy5nZXRWZXJzaW9uID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0cmV0dXJuIFZFUlNJT047XG5cdFx0fTtcdFxuXHR9XG59KSkiXX0=
