function aProductController(t,e,o){var r=this;r.productId=e.itemId,t.info("in the a Product controller",r.product),r.returnHome=function(){o.path("/")}}function accountsController(t,e,o){var r=this;r.registeredUser=!1,r.forgotPassword=!1,t.info("in the accounts controller"),function(t){"CreateProfile"==t||"ForgotPassword"==t?"ForgotPassword"==t&&(r.forgotPassword=!0):r.registeredUser=!0}(e.param)}function allProductsController(t,e,o,r){var n=this;n.allProducts=r,void 0!=e.filter&&(n.selectedProducts=e.filter),t.info("in the all Products controller",e),t.info("got this prduct list",r)}function cartController(t,e,o,r){this.cart=r,t.info("in the cart controller")}function checkoutController(t,e,o,r){var n=this;n.squareCreds=r,t.info("in the checkout controller"),n.backBtn=function(){o.path("/cart")},n.submitOrder=function(){o.path("/order-confirmation/TESTING")}}function internalActtsController(t,e,o,r){var n=this,i=r;t.info("in the internal controller"),n.submit=function(){console.log("submitting"),i.post("/api/shiftEarnings",{test:"test"}).then(function(t){console.log("got this response",t)})}}function landingController(t,e,o,r,n){e.info("in the landing controller")}function locationsController(t,e,o){t.info("in the locations controller")}function loginController(t,e,o,r){var n=this,i=r;t.info("in the login controller"),n.email="",n.password="",n.login=function(){i.post("/api/authenticate",{email:n.email,pass:n.password},"").then(function(e){var r="#/teamMember/"+e;t.info("got this token back",r),o.path("/")})}}function mainController(t,e,o,r){t.teamMember=!1,e.info("in the main controller")}function orderConfirmationController(t,e,o,r){e.info("in the order confirmation controller")}function productGettingController(t,e,o,r){var n=this;n.product=e.item,n.cart=r,t.info("in the product getting controller",n.product),n.order=function(){o.path("/cart")}}function ahHeader(){function t(t,e,o,r){}function e(t,e,o,r){var n=this;n.cart=r,e.info("in the header directive"),n.navbnt=function(t){e.info("clicked",t),"menu"!=t&&o.path("/"+t)}}t.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/ah.header.directive.htm",replace:!0,scope:{},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log","$location","shoppingCart"],o}function ahFooter(){function t(t,e,o,r){}function e(t,e){e.info("in the header directive")}t.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/ah.footer.directive.htm",replace:!0,scope:{},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],o}function cartNavigation(){function t(t,e,o,r){}function e(t,e,o){var r=this;e.info("in the cart navigation directive"),r.shopMore=function(){o.path("/all-products")},r.checkout=function(){o.path("/checkout")}}t.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/cartNavigation.directive.htm",replace:!0,scope:{},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log","$location"],o}function cartSummary(){function t(t,e,o,r){}function e(t,e){e.info("in the cart summary directive")}t.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/cartSummary.directive.htm",replace:!0,scope:{noItems:"=",subtotal:"="},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],o}function checkoutBilling(){function t(t,e,o,r){}function e(t,e){e.info("in the checkoutBilling directive")}t.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/checkoutBilling.directive.htm",replace:!0,scope:{},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],o}function checkoutFollowup(){function t(t,e,o,r){}function e(t,e){e.info("in the checkoutFollowupController directive")}t.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/checkoutFollowup.directive.htm",replace:!0,scope:{},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],o}function checkoutPayment(){function t(t,e,o,r){}function e(t,e,o){var r=this;r.data=o;e.info("in the checkoutPayment directive");var n=new SqPaymentForm({applicationId:"REPLACE_ME",locationId:"REPLACE_ME",inputClass:"sq-input",inputStyles:[{fontSize:"15px"}],cardNumber:{elementId:"sq-card-number",placeholder:"•••• •••• •••• ••••"},cvv:{elementId:"sq-cvv",placeholder:"CVV"},expirationDate:{elementId:"sq-expiration-date",placeholder:"MM/YY"},postalCode:{elementId:"sq-postal-code"},applePay:{elementId:"sq-apple-pay"},callbacks:{methodsSupported:function(t){!0===t.applePay&&(document.getElementById("sq-apple-pay").style.display="inline-block")},createPaymentRequest:function(){return{requestShippingAddress:!0,currencyCode:"USD",countryCode:"US",total:{label:"{{ MERCHANT NAME }}",amount:"{{TOTAL AMOUNT}}",pending:!1},lineItems:[{label:"Subtotal",amount:"{{SUBTOTAL AMOUNT}}",pending:!1},{label:"Shipping",amount:"{{SHIPPING AMOUNT}}",pending:!0},{label:"Tax",amount:"{{TAX AMOUNT}}",pending:!1}]}},cardNonceResponseReceived:function(t,e,o){if(t)return console.log("Encountered errors:"),void t.forEach(function(t){console.log("  "+t.message)});document.getElementById("card-nonce").value=e,document.getElementById("nonce-form").submit(),r.data.post("/process-card",{nonce:e})},unsupportedBrowserDetected:function(){},inputEventReceived:function(t){t.eventType},paymentFormLoaded:function(){}}});r.requestCardNonce=function(t){console.log("requestion card Nonce"),t.preventDefault(),n.requestCardNonce()},n.build()}t.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/checkoutPayment.directive.htm",replace:!0,scope:{squareCreds:"="},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log","dataServices"],o}function couponSubmission(){function t(t,e,o,r){}function e(t,e){e.info("in the coupon-submission directive")}t.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/couponSubmission.directive.htm",replace:!0,scope:{},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],o}function createNewAccount(){function t(t,e,o,r){}function e(t,e,o){e.info("in the create new account directive")}t.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/createNewAccount.directive.htm",replace:!0,scope:{},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log","$location"],o}function featuredProducts(){function t(t,e,o,r){}function e(t,e,o){var r=this;e.info("in the featuredProductsController directive"),r.mrPrdctsBtn=function(){o.path("/all-products")},r.productSelectionBtn=function(t){e.info("hit the product selection button"),o.path("/all-products").search("filter",t)}}t.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/featuredProducts.directive.htm",replace:!0,scope:{},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log","$location"],o}function fullProductProfile(){function t(t,e,o,r){}function e(t,e,o,r,n){var i=this;i.data=n,i.cart=r,i.imageUrl="/../assets/img/nut_cones.jpg",i.itemSelections={code:i.data.code,size:void 0,qty:void 0},e.info("in the fullProductProfileController directive",i.product),i.selectSize=function(t){e.info("got this size",t),i.itemSelections=i.data.sizes[t]},i.addToCart=function(t){i.cart.addItem(t),o.path("/getting-the-product/"+i.product)}}t.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/fullProductProfile.directive.htm",replace:!0,scope:{product:"="},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log","$location","shoppingCart","testObject"],o}function heroBanner(){function t(t,e,o,r){}function e(t,e){e.info("in the hero banner directive")}t.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/heroBanner.directive.htm",replace:!0,scope:{},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],o}function passwordReset(){function t(t,e,o,r){}function e(t,e,o){var r=this;e.info("in the passwordReset directive"),r.email="",r.back=function(){o.path("/login")},r.submit=function(){e.info("submitting email",r.email)}}t.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/passwordReset.directive.htm",replace:!0,scope:{},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log","$location"],o}function pickupOrDelivery(){function t(t,e,o,r){}function e(t,e){var o=this;e.info("in the pickup-or-delivery directive",o.method,o.details)}t.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/pickupOrDelivery.directive.htm",replace:!0,scope:{method:"=",details:"="},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],o}function primaryContent(){function t(t,e,o,r){}function e(t,e){e.info("in the header directive")}t.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/primaryContent.directive.htm",replace:!0,scope:{},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],o}function userDashboard(){function t(t,e,o,r){}function e(t,e,o){e.info("in the userDashboard directive")}t.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/userDashboard.directive.htm",replace:!0,scope:{},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log","$location"],o}function config(t){t.when("/",{templateUrl:"views/landingPage.htm",controller:"landingController",controllerAs:"vm"}).when("/all-products",{templateUrl:"views/allProductsPage.htm",controller:"allProductsController",controllerAs:"vm",resolve:{productList:productList}}).when("/product/:itemId",{templateUrl:"views/aProductPage.htm",controller:"aProductController",controllerAs:"vm"}).when("/getting-the-product/:itemId",{templateUrl:"views/productGettingPage.htm",controller:"productGettingController",controllerAs:"vm"}).when("/locations",{templateUrl:"views/locationsPage.htm",controller:"locationsController",controllerAs:"vm"}).when("/login",{templateUrl:"views/loginPage.htm",controller:"loginController",controllerAs:"vm"}).when("/cart",{templateUrl:"views/cartPage.htm",controller:"cartController",controllerAs:"vm"}).when("/checkout",{templateUrl:"views/checkoutPage.htm",controller:"checkoutController",controllerAs:"vm",resolve:{squareCreds:squareCreds}}).when("/order-confirmation/:confId",{templateUrl:"views/orderConfirmationPage.htm",controller:"orderConfirmationController",controllerAs:"vm"}).when("/MyAccount/:param",{templateUrl:"views/accountsPage.htm",controller:"accountsController",controllerAs:"vm"}).when("/teamMember/:param",{templateUrl:"views/internalActtsPage.htm",controller:"internalActtsController",controllerAs:"vm",resolve:{authentication:authentication}})}function authentication(){console.log("authenticating")}function squareCreds(t){var e=t;return console.log("getting square creds"),new Promise(function(t,o){e.post("/api/square-creds",{key:"owine91n-sn#bsinwi#k"}).then(function(e){console.log("got this",e),t(e)}).catch(function(e){t(e)})})}function productList(t,e){var o=t,r="/api/productlist";return void 0!=e.current.params&&(r+="?filter="+e.current.params.filter),new Promise(function(t,e){o.get(r).then(function(e){t(e)}).catch(function(t){e(t)})})}function dataServices(t,e){return{get:function(t,o){return new Promise(function(r,n){e.get(t,o).then(function(t){r(t.data)},function(t){n(t)})})},post:function(t,o,r){return new Promise(function(n,i){e.post(t,o,r).then(function(t){n(t.data)},function(t){i(t)})})}}}function shoppingCart(t,e){return{isEmpty:!0,aquisitionMethod:void 0,noOfItems:0,subtotal:0,shippingPrice:0,aquisitionDetails:{},items:[],addItem:function(t){var e=this;return e.isEmpty=!1,e.subtotal=t.price*t.qty,e.noOfItems+=t.qty,e.items.push(t),!0},removeItem:function(){},updateAquisitionMethod:function(){}}}function testObject(t){return{image:void 0,code:1203,rating:void 0,name:"Specialty Cones",sizes:[{code:1203001,title:"Impressive",oz:16,price:1800},{code:1203002,title:"Average",oz:8,price:1300},{code:1203003,title:"Small",oz:4,price:700}],description:"The most amazing pecans you've ever taste",ingredients:["Pecans","Sugar","Vanilla","Salt"]}}config.$inject=["$routeProvider"],productList.$inject=["dataServices","$route"],squareCreds.$inject=["dataServices"];var ahNuts=angular.module("ahNuts",["ngRoute"]);angular.module("ahNuts").controller("aProductController",aProductController),aProductController.$inject=["$log","$routeParams","$location"],angular.module("ahNuts").controller("accountsController",accountsController),accountsController.$inject=["$log","$routeParams","$location"],angular.module("ahNuts").controller("allProductsController",allProductsController),allProductsController.$inject=["$log","$routeParams","$location","productList"],angular.module("ahNuts").controller("cartController",cartController),cartController.$inject=["$log","$routeParams","$location","shoppingCart"],angular.module("ahNuts").controller("checkoutController",checkoutController),checkoutController.$inject=["$log","$routeParams","$location","squareCreds"],angular.module("ahNuts").controller("internalActtsController",internalActtsController),internalActtsController.$inject=["$log","$routeParams","$location","dataServices"],angular.module("ahNuts").controller("landingController",landingController),landingController.$inject=["$scope","$log","$routeParams","$location","dataServices"],angular.module("ahNuts").controller("locationsController",locationsController),locationsController.$inject=["$log","$routeParams","$location"],angular.module("ahNuts").controller("loginController",loginController),loginController.$inject=["$log","$routeParams","$location","dataServices"],angular.module("ahNuts").controller("mainController",mainController),mainController.$inject=["$scope","$log","$routeParams","$location"],angular.module("ahNuts").controller("orderConfirmationController",orderConfirmationController),orderConfirmationController.$inject=["$scope","$log","$routeParams","$location"],angular.module("ahNuts").controller("productGettingController",productGettingController),productGettingController.$inject=["$log","$routeParams","$location","shoppingCart"],angular.module("ahNuts").directive("ahHeader",ahHeader),angular.module("ahNuts").directive("ahFooter",ahFooter),angular.module("ahNuts").directive("cartNavigation",cartNavigation),angular.module("ahNuts").directive("cartSummary",cartSummary),angular.module("ahNuts").directive("checkoutBilling",checkoutBilling),angular.module("ahNuts").directive("checkoutFollowup",checkoutFollowup),angular.module("ahNuts").directive("checkoutPayment",checkoutPayment),angular.module("ahNuts").directive("couponSubmission",couponSubmission),angular.module("ahNuts").directive("createNewAccount",createNewAccount),angular.module("ahNuts").directive("featuredProducts",featuredProducts),angular.module("ahNuts").directive("fullProductProfile",fullProductProfile),angular.module("ahNuts").directive("heroBanner",heroBanner),angular.module("ahNuts").directive("passwordReset",passwordReset),angular.module("ahNuts").directive("pickupOrDelivery",pickupOrDelivery),angular.module("ahNuts").directive("primaryContent",primaryContent),angular.module("ahNuts").directive("userDashboard",userDashboard),angular.module("ahNuts").config(config),angular.module("ahNuts").factory("dataServices",dataServices),dataServices.$inject=["$log","$http"],angular.module("ahNuts").factory("shoppingCart",shoppingCart),shoppingCart.$inject=["$log","$http"],angular.module("ahNuts").factory("testObject",testObject),testObject.$inject=["$log"];
//# sourceMappingURL=data:application/json;charset=utf8;base64,
