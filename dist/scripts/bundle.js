function aProductController(t,e,o,r){var n=this;n.product=r,n.returnHome=function(){o.path("/")}}function accountsController(t,e,o){var r=this;r.registeredUser=!1,r.forgotPassword=!1,t.info("in the accounts controller"),function(t){"CreateProfile"==t||"ForgotPassword"==t?"ForgotPassword"==t&&(r.forgotPassword=!0):r.registeredUser=!0}(e.param)}function allProductsController(t,e,o,r){var n=this;n.allProducts=r,void 0!=e.filter&&(n.selectedProducts=e.filter),n.selectAProuct=function(t){var e="/product/"+t;o.path(e).search("filter",null)}}function cartController(t,e,o,r){this.cart=r,t.info("in the cart controller")}function checkoutController(t,e,o,r){var n=this;n.squareCreds=r,t.info("in the checkout controller"),n.backBtn=function(){o.path("/cart")},n.submitOrder=function(){o.path("/order-confirmation/TESTING")}}function internalActtsController(t,e,o,r){var n=this,i=r;t.info("in the internal controller"),n.submit=function(){console.log("submitting"),i.post("/api/shiftEarnings",{test:"test"}).then(function(t){console.log("got this response",t)})}}function landingController(t,e,o,r,n){}function locationsController(t,e,o){t.info("in the locations controller")}function loginController(t,e,o,r){var n=this,i=r;t.info("in the login controller"),n.email="",n.password="",n.login=function(){i.post("/api/authenticate",{email:n.email,pass:n.password},"").then(function(e){var r="#/teamMember/"+e;t.info("got this token back",r),o.path("/")})}}function mainController(t,e,o,r){t.teamMember=!1}function orderConfirmationController(t,e,o,r){e.info("in the order confirmation controller")}function productGettingController(t,e,o,r){var n=this;n.product=e.item,n.cart=r,n.acquisitionSteps={zipAndDateSelected:!1,shippedOrPUSelected:!1,willShippp:!1,willPU:!1,puLocSelected:!1,delMthSelected:!1,pickupLocation:{},deliveryMethod:{}},t.info("in the product getting controller",n.product),n.order=function(){o.path("/cart")}}function registerAcctController(t,e,o){console.log("in the registerAcctController ")}function ahHeader(){function t(t,e,o,r){}function e(t,e,o,r){var n=this;n.cart=r,n.navbnt=function(t){e.info("clicked",t),"menu"!=t&&o.path("/"+t)}}t.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/ah.header.directive.htm",replace:!0,scope:{},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log","$location","shoppingCart"],o}function ahFooter(){function t(t,e,o,r){}function e(t,e){}t.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/ah.footer.directive.htm",replace:!0,scope:{},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],o}function cartItemsList(){function t(t,e,o,r){}function e(t,e){}t.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/cartItemsList.directive.htm",replace:!0,scope:{cartItems:"="},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],o}function cartNavigation(){function t(t,e,o,r){}function e(t,e,o){var r=this;e.info("in the cart navigation directive"),r.shopMore=function(){o.path("/all-products")},r.checkout=function(){o.path("/checkout")}}t.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/cartNavigation.directive.htm",replace:!0,scope:{},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log","$location"],o}function cartSummary(){function t(t,e,o,r){}function e(t,e){e.info("in the cart summary directive")}t.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/cartSummary.directive.htm",replace:!0,scope:{noItems:"=",subtotal:"="},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],o}function checkoutBilling(){function t(t,e,o,r){}function e(t,e){e.info("in the checkoutBilling directive")}t.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/checkoutBilling.directive.htm",replace:!0,scope:{},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],o}function checkoutFollowup(){function t(t,e,o,r){}function e(t,e){e.info("in the checkoutFollowupController directive")}t.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/checkoutFollowup.directive.htm",replace:!0,scope:{},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],o}function checkoutPayment(){function t(t,e,o,r){}function e(t,e,o){var r=this;r.data=o;e.info("in the checkoutPayment directive");var n=new SqPaymentForm({applicationId:"REPLACE_ME",locationId:"REPLACE_ME",inputClass:"sq-input",inputStyles:[{fontSize:"15px"}],cardNumber:{elementId:"sq-card-number",placeholder:"•••• •••• •••• ••••"},cvv:{elementId:"sq-cvv",placeholder:"CVV"},expirationDate:{elementId:"sq-expiration-date",placeholder:"MM/YY"},postalCode:{elementId:"sq-postal-code"},applePay:{elementId:"sq-apple-pay"},callbacks:{methodsSupported:function(t){!0===t.applePay&&(document.getElementById("sq-apple-pay").style.display="inline-block")},createPaymentRequest:function(){return{requestShippingAddress:!0,currencyCode:"USD",countryCode:"US",total:{label:"{{ MERCHANT NAME }}",amount:"{{TOTAL AMOUNT}}",pending:!1},lineItems:[{label:"Subtotal",amount:"{{SUBTOTAL AMOUNT}}",pending:!1},{label:"Shipping",amount:"{{SHIPPING AMOUNT}}",pending:!0},{label:"Tax",amount:"{{TAX AMOUNT}}",pending:!1}]}},cardNonceResponseReceived:function(t,e,o){if(t)return console.log("Encountered errors:"),void t.forEach(function(t){console.log("  "+t.message)});document.getElementById("card-nonce").value=e,document.getElementById("nonce-form").submit(),r.data.post("/process-card",{nonce:e})},unsupportedBrowserDetected:function(){},inputEventReceived:function(t){t.eventType},paymentFormLoaded:function(){}}});r.requestCardNonce=function(t){console.log("requestion card Nonce"),t.preventDefault(),n.requestCardNonce()},n.build()}t.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/checkoutPayment.directive.htm",replace:!0,scope:{squareCreds:"="},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log","dataServices"],o}function couponSubmission(){function t(t,e,o,r){}function e(t,e){e.info("in the coupon-submission directive")}t.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/couponSubmission.directive.htm",replace:!0,scope:{},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],o}function createNewAccount(){function t(t,e,o,r){}function e(t,e,o){e.info("in the create new account directive")}t.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/createNewAccount.directive.htm",replace:!0,scope:{},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log","$location"],o}function featuredProducts(){function t(t,e,o,r){}function e(t,e,o){var r=this;r.mrPrdctsBtn=function(){o.path("/all-products")},r.productSelectionBtn=function(t){o.path("/all-products").search("filter",t)}}t.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/featuredProducts.directive.htm",replace:!0,scope:{},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log","$location"],o}function fedexOptions(){function t(t,e,o,r){}function e(t,e){}t.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/fedexOptions.directive.htm",replace:!0,scope:{},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],o}function fullProductProfile(){function t(t,e,o,r){}function e(t,e,o,r){var n=this;n.cart=r,n.itemSelections=n.product.sizes,n.addToCart=function(t){console.log("vm.itemSelections",n.itemSelections),n.itemSelections.forEach(function(t){t.qty>0&&n.cart.addItem(t)}),o.path("/getting-the-product/10")}}t.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/fullProductProfile.directive.htm",replace:!0,scope:{product:"="},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log","$location","shoppingCart"],o}function heroBanner(){function t(t,e,o,r){}function e(t,e){}t.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/heroBanner.directive.htm",replace:!0,scope:{},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],o}function passwordReset(){function t(t,e,o,r){}function e(t,e,o){var r=this;e.info("in the passwordReset directive"),r.email="",r.back=function(){o.path("/login")},r.submit=function(){e.info("submitting email",r.email)}}t.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/passwordReset.directive.htm",replace:!0,scope:{},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log","$location"],o}function pickupOrDelivery(){function t(t,e,o,r){}function e(t,e){var o=this;e.info("in the pickup-or-delivery directive",o.method,o.details)}t.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/pickupOrDelivery.directive.htm",replace:!0,scope:{method:"=",details:"="},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],o}function primaryContent(){function t(t,e,o,r){}function e(t,e){e.info("in the header directive")}t.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/primaryContent.directive.htm",replace:!0,scope:{},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],o}function productSizePicker(){function t(t,e,o,r){}function e(t,e){}t.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/productSizePicker.directive.htm",replace:!0,scope:{sizes:"="},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],o}function prdctThmbnl(){function t(t,e,o,r){}function e(t,e){}t.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/prdctThmbnl.directive.htm",replace:!0,scope:{product:"="},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],o}function selectDeliveryMethod(){function t(t,e,o,r){}function e(t,e){}t.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/selectDeliveryMethod.directive.htm",replace:!0,scope:{},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],o}function selectPOrD(){function t(t,e,o,r){}function e(t,e){}t.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/selectPOrD.directive.htm",replace:!0,scope:{},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],o}function selectPickupLocation(){function t(t,e,o,r){}function e(t,e){}t.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/selectPickupLocation.directive.htm",replace:!0,scope:{},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],o}function sizeQtySelector(){function t(t,e,o,r){}function e(t,e){var o=this;o.incriment=function(){o.size.qty++},o.decriment=function(){o.size.qty>=1&&o.size.qty--}}t.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/sizeQtySelector.directive.htm",replace:!0,scope:{size:"="},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],o}function toZipOnDate(){function t(t,e,o,r){}function e(t,e){}t.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/toZipOnDate.directive.htm",replace:!0,scope:{},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],o}function upsOptions(){function t(t,e,o,r){}function e(t,e){}t.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/upsOptions.directive.htm",replace:!0,scope:{},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],o}function userDashboard(){function t(t,e,o,r){}function e(t,e,o){e.info("in the userDashboard directive")}t.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/userDashboard.directive.htm",replace:!0,scope:{},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log","$location"],o}function uspsOptions(){function t(t,e,o,r){}function e(t,e){}t.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/uspsOptions.directive.htm",replace:!0,scope:{},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],o}function dataServices(t,e){return{get:function(t,o){return new Promise(function(r,n){e.get(t,o).then(function(t){r(t.data)},function(t){n(t)})})},post:function(t,o,r){return new Promise(function(n,i){e.post(t,o,r).then(function(t){n(t.data)},function(t){i(t)})})}}}function shoppingCart(t,e,o){function r(t){var e={};return Object.keys(t).forEach(function(o){e[o]=t[o]}),e}function n(t){var e=0;return Object.keys(t).forEach(function(o){e+=t[o].qty}),e}function i(t){var e=0;return Object.keys(t).forEach(function(o){e+=t[o].qty*t[o].price}),e}return{isEmpty:!0,orderNumber:void 0,aquisitionMethod:void 0,noOfItems:0,subtotal:0,shippingPrice:0,discounts:0,totalCost:0,aquisitionDetails:{},items:{},_saveToBrowser:function(t){o.sessionStorage.setItem("ah-nuts-cart",JSON.stringify(t))},_getCart:function(){return o.sessionStorage["ah-nuts-cart"]},_removeCart:function(){o.sessionStorage.removeItem("ah-nuts-cart")},_addNewItem:r,_countNoItems:n,_calcSubtotal:i,init:function(){var t=this;if(null!=o.sessionStorage.getItem("ah-nuts-cart")){var e=JSON.parse(o.sessionStorage.getItem("ah-nuts-cart"));t.isEmpty=e.isEmpty,t.orderNumber=e.orderNumber,t.aquisitionMethod=e.aquisitionMethod,t.noOfItems=e.noOfItems,t.subtotal=e.subtotal,t.shippingPrice=e.shippingPrice,t.discounts=e.discounts,t.totalCost=e.totalCost,t.aquisitionDetails=e.aquisitionDetails}console.log(t)},addItem:function(t){var e=this,o=t.code;return e.isEmpty=!1,void 0==e.items[o]&&(e.items[o]=r(t),e.noOfItems=n(e.items),e.subtotal=i(e.items)),e._saveToBrowser({isEmpty:e.isEmpty,orderNumber:e.orderNumber,aquisitionMethod:e.aquisitionMethod,noOfItems:e.noOfItems,subtotal:e.subtotal,shippingPrice:e.shippingPrice,discounts:e.discounts,totalCost:e.totalCost,aquisitionDetails:e.aquisitionDetails}),!0},removeItem:function(){},updateAquisitionMethod:function(){}}}function testObject(t){return{image:void 0,code:1203,rating:void 0,name:"Specialty Cones",sizes:[{code:1203001,title:"Impressive",oz:16,price:1800},{code:1203002,title:"Average",oz:8,price:1300},{code:1203003,title:"Small",oz:4,price:700}],description:"The most amazing pecans you've ever taste",ingredients:["Pecans","Sugar","Vanilla","Salt"]}}function userAuthentication(t,e){}function config(t){t.when("/",{templateUrl:"views/landingPage.htm",controller:"landingController",controllerAs:"vm"}).when("/all-products",{templateUrl:"views/allProductsPage.htm",controller:"allProductsController",controllerAs:"vm",resolve:{productList:productList}}).when("/product/:prdctId",{templateUrl:"views/aProductPage.htm",controller:"aProductController",controllerAs:"vm",resolve:{aProduct:aProduct}}).when("/getting-the-product/:itemId",{templateUrl:"views/productGettingPage.htm",controller:"productGettingController",controllerAs:"vm"}).when("/locations",{templateUrl:"views/locationsPage.htm",controller:"locationsController",controllerAs:"vm"}).when("/login",{templateUrl:"views/loginPage.htm",controller:"loginController",controllerAs:"vm"}).when("/cart",{templateUrl:"views/cartPage.htm",controller:"cartController",controllerAs:"vm"}).when("/checkout",{templateUrl:"views/checkoutPage.htm",controller:"checkoutController",controllerAs:"vm",resolve:{squareCreds:squareCreds}}).when("/order-confirmation/:confId",{templateUrl:"views/orderConfirmationPage.htm",controller:"orderConfirmationController",controllerAs:"vm"}).when("/registerUser",{templateUrl:"views/registrationPage.htm",controller:"registerAcctController",controllerAs:"vm"}).when("/MyAccount/:param",{templateUrl:"views/accountsPage.htm",controller:"accountsController",controllerAs:"vm"}).when("/teamMember/:param",{templateUrl:"views/internalActtsPage.htm",controller:"internalActtsController",controllerAs:"vm",resolve:{authentication:authentication}})}function authentication(){console.log("authenticating")}function squareCreds(t){var e=t;return console.log("getting square creds"),new Promise(function(t,o){e.post("/api/square-creds",{key:"owine91n-sn#bsinwi#k"}).then(function(e){console.log("got this",e),t(e)}).catch(function(e){t(e)})})}function productList(t,e){var o=t,r="/api/productlist";return void 0!=e.current.params&&(r+="?filter="+e.current.params.filter),new Promise(function(t,e){o.get(r).then(function(e){t(e)}).catch(function(t){e(t)})})}function aProduct(t,e){var o=t,r="/api/productlist?select="+e.current.params.prdctId;return console.log("path",r),new Promise(function(t,e){o.get(r).then(function(e){t(e)}).catch(function(t){e(t)})})}config.$inject=["$routeProvider"],productList.$inject=["dataServices","$route"],aProduct.$inject=["dataServices","$route"],squareCreds.$inject=["dataServices"];var ahNuts=angular.module("ahNuts",["ngRoute"]);angular.module("ahNuts").run(["shoppingCart",function(t){t.init()}]),angular.module("ahNuts").controller("aProductController",aProductController),aProductController.$inject=["$log","$routeParams","$location","aProduct"],angular.module("ahNuts").controller("accountsController",accountsController),accountsController.$inject=["$log","$routeParams","$location"],angular.module("ahNuts").controller("allProductsController",allProductsController),allProductsController.$inject=["$log","$routeParams","$location","productList"],angular.module("ahNuts").controller("cartController",cartController),cartController.$inject=["$log","$routeParams","$location","shoppingCart"],angular.module("ahNuts").controller("checkoutController",checkoutController),checkoutController.$inject=["$log","$routeParams","$location","squareCreds"],angular.module("ahNuts").controller("internalActtsController",internalActtsController),internalActtsController.$inject=["$log","$routeParams","$location","dataServices"],angular.module("ahNuts").controller("landingController",landingController),landingController.$inject=["$scope","$log","$routeParams","$location","dataServices"],angular.module("ahNuts").controller("locationsController",locationsController),locationsController.$inject=["$log","$routeParams","$location"],angular.module("ahNuts").controller("loginController",loginController),loginController.$inject=["$log","$routeParams","$location","dataServices"],angular.module("ahNuts").controller("mainController",mainController),mainController.$inject=["$scope","$log","$routeParams","$location"],angular.module("ahNuts").controller("orderConfirmationController",orderConfirmationController),orderConfirmationController.$inject=["$scope","$log","$routeParams","$location"],angular.module("ahNuts").controller("productGettingController",productGettingController),productGettingController.$inject=["$log","$routeParams","$location","shoppingCart"],angular.module("ahNuts").controller("registerAcctController",registerAcctController),registerAcctController.$inject=["$log","$routeParams","$location"],angular.module("ahNuts").directive("ahHeader",ahHeader),angular.module("ahNuts").directive("ahFooter",ahFooter),angular.module("ahNuts").directive("cartItemsList",cartItemsList),angular.module("ahNuts").directive("cartNavigation",cartNavigation),angular.module("ahNuts").directive("cartSummary",cartSummary),angular.module("ahNuts").directive("checkoutBilling",checkoutBilling),angular.module("ahNuts").directive("checkoutFollowup",checkoutFollowup),angular.module("ahNuts").directive("checkoutPayment",checkoutPayment),angular.module("ahNuts").directive("couponSubmission",couponSubmission),angular.module("ahNuts").directive("createNewAccount",createNewAccount),angular.module("ahNuts").directive("featuredProducts",featuredProducts),angular.module("ahNuts").directive("fedexOptions",fedexOptions),angular.module("ahNuts").directive("fullProductProfile",fullProductProfile),angular.module("ahNuts").directive("heroBanner",heroBanner),angular.module("ahNuts").directive("passwordReset",passwordReset),angular.module("ahNuts").directive("pickupOrDelivery",pickupOrDelivery),angular.module("ahNuts").directive("primaryContent",primaryContent),angular.module("ahNuts").directive("productSizePicker",productSizePicker),angular.module("ahNuts").directive("prdctThmbnl",prdctThmbnl),angular.module("ahNuts").directive("selectDeliveryMethod",selectDeliveryMethod),angular.module("ahNuts").directive("selectPOrD",selectPOrD),angular.module("ahNuts").directive("selectPickupLocation",selectPickupLocation),angular.module("ahNuts").directive("sizeQtySelector",sizeQtySelector),angular.module("ahNuts").directive("toZipOnDate",toZipOnDate),angular.module("ahNuts").directive("upsOptions",upsOptions),angular.module("ahNuts").directive("userDashboard",userDashboard),angular.module("ahNuts").directive("uspsOptions",uspsOptions),angular.module("ahNuts").factory("dataServices",dataServices),dataServices.$inject=["$log","$http"],angular.module("ahNuts").factory("shoppingCart",shoppingCart),shoppingCart.$inject=["$log","$http","$window"],angular.module("ahNuts").factory("testObject",testObject),testObject.$inject=["$log"],angular.module("ahNuts").service("userAuthentication",userAuthentication),userAuthentication.$inject=["$http","$window"],angular.module("ahNuts").config(config);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNjcmlwdHMvY29udHJvbGxlcnMvYVByb2R1Y3QuY29udHJvbGxlci5qcyIsInNjcmlwdHMvY29udHJvbGxlcnMvYWNjb3VudHMuY29udHJvbGxlci5qcyIsInNjcmlwdHMvY29udHJvbGxlcnMvYWxsUHJvZHVjdHMuY29udHJvbGxlci5qcyIsInNjcmlwdHMvY29udHJvbGxlcnMvY2FydC5jb250cm9sbGVyLmpzIiwic2NyaXB0cy9jb250cm9sbGVycy9jaGVja291dC5jb250cm9sbGVyLmpzIiwic2NyaXB0cy9jb250cm9sbGVycy9pbnRlcm5hbC5hY2NvdW50cy5jb250cm9sbGVyLmpzIiwic2NyaXB0cy9jb250cm9sbGVycy9sYW5kaW5nLmNvbnRyb2xsZXIuanMiLCJzY3JpcHRzL2NvbnRyb2xsZXJzL2xvY2F0aW9ucy5jb250cm9sbGVyLmpzIiwic2NyaXB0cy9jb250cm9sbGVycy9sb2dpbi5jb250cm9sbGVyLmpzIiwic2NyaXB0cy9jb250cm9sbGVycy9tYWluLmNvbnRyb2xsZXIuanMiLCJzY3JpcHRzL2NvbnRyb2xsZXJzL29yZGVyQ29uZmlybWF0aW9uLmNvbnRyb2xsZXIuanMiLCJzY3JpcHRzL2NvbnRyb2xsZXJzL3Byb2R1Y3RHZXR0aW5nLmNvbnRyb2xsZXIuanMiLCJzY3JpcHRzL2NvbnRyb2xsZXJzL3JlZ2lzdGVyQWNjdC5jb250cm9sbGVyLmpzIiwic2NyaXB0cy9kaXJlY3RpdmVzL2FoLmhlYWRlci5kaXJlY3RpdmUuanMiLCJzY3JpcHRzL2RpcmVjdGl2ZXMvYWhGb290ZXIuZGlyZWN0aXZlLmpzIiwic2NyaXB0cy9kaXJlY3RpdmVzL2NhcnRJdGVtc0xpc3QuZGlyZWN0aXZlLmpzIiwic2NyaXB0cy9kaXJlY3RpdmVzL2NhcnROYXZpZ2F0aW9uLmRpcmVjdGl2ZS5qcyIsInNjcmlwdHMvZGlyZWN0aXZlcy9jYXJ0U3VtbWFyeS5kaXJlY3RpdmUuanMiLCJzY3JpcHRzL2RpcmVjdGl2ZXMvY2hlY2tvdXRCaWxsaW5nLmRpcmVjdGl2ZS5qcyIsInNjcmlwdHMvZGlyZWN0aXZlcy9jaGVja291dEZvbGxvd3VwLmRpcmVjdGl2ZS5qcyIsInNjcmlwdHMvZGlyZWN0aXZlcy9jaGVja291dFBheW1lbnQuZGlyZWN0aXZlLmpzIiwic2NyaXB0cy9kaXJlY3RpdmVzL2NvdXBvblN1Ym1pc3Npb24uZGlyZWN0aXZlLmpzIiwic2NyaXB0cy9kaXJlY3RpdmVzL2NyZWF0ZU5ld0FjY291bnQuZGlyZWN0aXZlLmpzIiwic2NyaXB0cy9kaXJlY3RpdmVzL2ZlYXR1cmVkUHJvZHVjdHMuZGlyZWN0aXZlLmpzIiwic2NyaXB0cy9kaXJlY3RpdmVzL2ZlZGV4T3B0aW9ucy5kaXJlY3RpdmUuanMiLCJzY3JpcHRzL2RpcmVjdGl2ZXMvZnVsbFByb2R1Y3RQcm9maWxlLmRpcmVjdGl2ZS5qcyIsInNjcmlwdHMvZGlyZWN0aXZlcy9oZXJvQmFubmVyLmRpcmVjdGl2ZS5qcyIsInNjcmlwdHMvZGlyZWN0aXZlcy9wYXNzd29yZFJlc2V0LmRpcmVjdGl2ZS5qcyIsInNjcmlwdHMvZGlyZWN0aXZlcy9waWNrdXBPckRlbGl2ZXJ5LmRpcmVjdGl2ZS5qcyIsInNjcmlwdHMvZGlyZWN0aXZlcy9wcmltYXJ5Q29udGVudENvbnRyb2xsZXIuZGlyZWN0aXZlLmpzIiwic2NyaXB0cy9kaXJlY3RpdmVzL3Byb2R1Y3RTaXplUGlja2VyLmRpcmVjdGl2ZS5qcyIsInNjcmlwdHMvZGlyZWN0aXZlcy9wcm9kdWN0VGh1bWJuYWlscy5kaXJlY3RpdmUuanMiLCJzY3JpcHRzL2RpcmVjdGl2ZXMvc2VsZWN0RGVsaXZlcnlNZXRob2QuZGlyZWN0aXZlLmpzIiwic2NyaXB0cy9kaXJlY3RpdmVzL3NlbGVjdFBPckQuZGlyZWN0aXZlLmpzIiwic2NyaXB0cy9kaXJlY3RpdmVzL3NlbGVjdFBpY2t1cExvY2F0aW9uLmRpcmVjdGl2ZS5qcyIsInNjcmlwdHMvZGlyZWN0aXZlcy9zaXplUXR5U2VsZWN0b3IuZGlyZWN0aXZlLmpzIiwic2NyaXB0cy9kaXJlY3RpdmVzL3RvWmlwT25EYXRlLmRpcmVjdGl2ZS5qcyIsInNjcmlwdHMvZGlyZWN0aXZlcy91cHNPcHRpb25zLmRpcmVjdGl2ZS5qcyIsInNjcmlwdHMvZGlyZWN0aXZlcy91c2VyRGFzaGJvYXJkLmRpcmVjdGl2ZS5qcyIsInNjcmlwdHMvZGlyZWN0aXZlcy91c3BzT3B0aW9ucy5kaXJlY3RpdmUuanMiLCJzY3JpcHRzL2ZhY3Rvcmllcy9kYXRhLnNlcnZpY2VzLmZhY3RvcnkuanMiLCJzY3JpcHRzL2ZhY3Rvcmllcy9zaG9wcGluZ0NhcnQuc2VydmljZXMuZmFjdG9yeS5qcyIsInNjcmlwdHMvZmFjdG9yaWVzL3Rlc3RPYmplY3Quc2VydmljZXMuZmFjdG9yeS5qcyIsInNjcmlwdHMvZmFjdG9yaWVzL3VzZXJBdXRoZW50aWNhdGlvbi5zZXJ2aWNlLmpzIiwic2NyaXB0cy9yb3V0ZXMvcm91dGVzLWNvbmZpZy5qcyIsInNjcmlwdHMvYXBwLmpzIiwic2NyaXB0cy9ydW4uanMiXSwibmFtZXMiOlsiYVByb2R1Y3RDb250cm9sbGVyIiwiJGxvZyIsIiRyb3V0ZVBhcmFtcyIsIiRsb2NhdGlvbiIsImFQcm9kdWN0Iiwidm0iLCJ0aGlzIiwicHJvZHVjdCIsInJldHVybkhvbWUiLCJwYXRoIiwiYWNjb3VudHNDb250cm9sbGVyIiwicmVnaXN0ZXJlZFVzZXIiLCJmb3Jnb3RQYXNzd29yZCIsImluZm8iLCJ1c2VySWQiLCJ1c2VyQ2hlY2siLCJwYXJhbSIsImFsbFByb2R1Y3RzQ29udHJvbGxlciIsInByb2R1Y3RMaXN0IiwiYWxsUHJvZHVjdHMiLCJ1bmRlZmluZWQiLCJmaWx0ZXIiLCJzZWxlY3RlZFByb2R1Y3RzIiwic2VsZWN0QVByb3VjdCIsInByZGN0Q29kZSIsInNlYXJjaCIsImNhcnRDb250cm9sbGVyIiwic2hvcHBpbmdDYXJ0IiwiY2FydCIsImNoZWNrb3V0Q29udHJvbGxlciIsInNxdWFyZUNyZWRzIiwiYmFja0J0biIsInN1Ym1pdE9yZGVyIiwiaW50ZXJuYWxBY3R0c0NvbnRyb2xsZXIiLCJkYXRhU2VydmljZXMiLCJkYXRhIiwic3VibWl0IiwiY29uc29sZSIsImxvZyIsInBvc3QiLCJ0ZXN0IiwidGhlbiIsInJlc3BvbnNlIiwibGFuZGluZ0NvbnRyb2xsZXIiLCIkc2NvcGUiLCJsb2NhdGlvbnNDb250cm9sbGVyIiwibG9naW5Db250cm9sbGVyIiwiZW1haWwiLCJwYXNzd29yZCIsImxvZ2luIiwicGFzcyIsInRva2VuIiwibWFpbkNvbnRyb2xsZXIiLCJ0ZWFtTWVtYmVyIiwib3JkZXJDb25maXJtYXRpb25Db250cm9sbGVyIiwicHJvZHVjdEdldHRpbmdDb250cm9sbGVyIiwiaXRlbSIsImFjcXVpc2l0aW9uU3RlcHMiLCJ6aXBBbmREYXRlU2VsZWN0ZWQiLCJzaGlwcGVkT3JQVVNlbGVjdGVkIiwid2lsbFNoaXBwcCIsIndpbGxQVSIsInB1TG9jU2VsZWN0ZWQiLCJkZWxNdGhTZWxlY3RlZCIsInBpY2t1cExvY2F0aW9uIiwiZGVsaXZlcnlNZXRob2QiLCJvcmRlciIsInJlZ2lzdGVyQWNjdENvbnRyb2xsZXIiLCJsaW5rRnVuYyIsInNjb3BlIiwiZWwiLCJhdHRyIiwiY3RybCIsImFoSGVhZGVyQ29udHJvbGxlciIsIm5hdmJudCIsImJ1dHRvbiIsImRpcmVjdGl2ZSIsInJlc3RyaWN0IiwidGVtcGxhdGVVcmwiLCJyZXBsYWNlIiwibGluayIsImNvbnRyb2xsZXIiLCJjb250cm9sbGVyQXMiLCJiaW5kVG9Db250cm9sbGVyIiwiJGluamVjdCIsImFoRm9vdGVyQ29udHJvbGxlciIsImNhcnRJdGVtc0xpc3RDb250cm9sbGVyIiwiY2FydEl0ZW1zIiwiY2FydE5hdmlnYXRpb25Db250cm9sbGVyIiwic2hvcE1vcmUiLCJjaGVja291dCIsImNhcnRTdW1tYXJ5Q29udHJvbGxlciIsIm5vSXRlbXMiLCJzdWJ0b3RhbCIsImNoZWNrb3V0QmlsbGluZ0NvbnRyb2xsZXIiLCJjaGVja291dEZvbGxvd3VwQ29udHJvbGxlciIsImNoZWNrb3V0UGF5bWVudENvbnRyb2xsZXIiLCJwYXltZW50Rm9ybSIsIlNxUGF5bWVudEZvcm0iLCJhcHBsaWNhdGlvbklkIiwibG9jYXRpb25JZCIsImlucHV0Q2xhc3MiLCJpbnB1dFN0eWxlcyIsImZvbnRTaXplIiwiY2FyZE51bWJlciIsImVsZW1lbnRJZCIsInBsYWNlaG9sZGVyIiwiY3Z2IiwiZXhwaXJhdGlvbkRhdGUiLCJwb3N0YWxDb2RlIiwiYXBwbGVQYXkiLCJjYWxsYmFja3MiLCJtZXRob2RzU3VwcG9ydGVkIiwibWV0aG9kcyIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJzdHlsZSIsImRpc3BsYXkiLCJjcmVhdGVQYXltZW50UmVxdWVzdCIsInJlcXVlc3RTaGlwcGluZ0FkZHJlc3MiLCJjdXJyZW5jeUNvZGUiLCJjb3VudHJ5Q29kZSIsInRvdGFsIiwibGFiZWwiLCJhbW91bnQiLCJwZW5kaW5nIiwibGluZUl0ZW1zIiwiY2FyZE5vbmNlUmVzcG9uc2VSZWNlaXZlZCIsImVycm9ycyIsIm5vbmNlIiwiY2FyZERhdGEiLCJmb3JFYWNoIiwiZXJyb3IiLCJtZXNzYWdlIiwidmFsdWUiLCJ1bnN1cHBvcnRlZEJyb3dzZXJEZXRlY3RlZCIsImlucHV0RXZlbnRSZWNlaXZlZCIsImlucHV0RXZlbnQiLCJldmVudFR5cGUiLCJwYXltZW50Rm9ybUxvYWRlZCIsInJlcXVlc3RDYXJkTm9uY2UiLCJldmVudCIsInByZXZlbnREZWZhdWx0IiwiYnVpbGQiLCJjb3Vwb25TdWJtaXNzaW9uQ29udHJvbGxlciIsImNyZWF0ZU5ld0FjY291bnRDb250cm9sbGVyIiwiZmVhdHVyZWRQcm9kdWN0c0NvbnRyb2xsZXIiLCJtclByZGN0c0J0biIsInByb2R1Y3RTZWxlY3Rpb25CdG4iLCJwcm9kdWN0TmFtZSIsImZlZGV4T3B0aW9uc0NvbnRyb2xsZXIiLCJmdWxsUHJvZHVjdFByb2ZpbGVDb250cm9sbGVyIiwiaXRlbVNlbGVjdGlvbnMiLCJzaXplcyIsImFkZFRvQ2FydCIsInNpemUiLCJxdHkiLCJhZGRJdGVtIiwiaGVyb0Jhbm5lckNvbnRyb2xsZXIiLCJwYXNzd29yZFJlc2V0Q29udHJvbGxlciIsImJhY2siLCJwaWNrdXBPckRlbGl2ZXJ5Q29udHJvbGxlciIsIm1ldGhvZCIsImRldGFpbHMiLCJwcmltYXJ5Q29udGVudENvbnRyb2xsZXIiLCJwcm9kdWN0U2l6ZVBpY2tlckNvbnRyb2xsZXIiLCJwcmRjdFRobWJubENvbnRyb2xsZXIiLCJzZWxlY3REZWxpdmVyeU1ldGhvZENvbnRyb2xsZXIiLCJzZWxlY3RQT3JEQ29udHJvbGxlciIsInNlbGVjdFBpY2t1cExvY2F0aW9uQ29udHJvbGxlciIsInNpemVRdHlTZWxlY3RvckNvbnRyb2xsZXIiLCJpbmNyaW1lbnQiLCJkZWNyaW1lbnQiLCJ0b1ppcE9uRGF0ZUNvbnRyb2xsZXIiLCJ1cHNPcHRpb25zQ29udHJvbGxlciIsInVzZXJEYXNoYm9hcmRDb250cm9sbGVyIiwidXNwc09wdGlvbnNDb250cm9sbGVyIiwiJGh0dHAiLCJnZXQiLCJ1cmwiLCJjb25maWciLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsInMiLCJlIiwiJHdpbmRvdyIsIl9hZGROZXdJdGVtIiwibmV3SXRlbSIsInJldHVybk9iamVjdCIsIk9iamVjdCIsImtleXMiLCJrZXkiLCJfY291bnROb0l0ZW1zIiwiYWxsSXRlbXMiLCJuZXdUb3RhbCIsIl9jYWxjU3VidG90YWwiLCJwcmljZSIsImlzRW1wdHkiLCJvcmRlck51bWJlciIsImFxdWlzaXRpb25NZXRob2QiLCJub09mSXRlbXMiLCJzaGlwcGluZ1ByaWNlIiwiZGlzY291bnRzIiwidG90YWxDb3N0IiwiYXF1aXNpdGlvbkRldGFpbHMiLCJpdGVtcyIsIl9zYXZlVG9Ccm93c2VyIiwic2Vzc2lvblN0b3JhZ2UiLCJzZXRJdGVtIiwiSlNPTiIsInN0cmluZ2lmeSIsIl9nZXRDYXJ0IiwiX3JlbW92ZUNhcnQiLCJyZW1vdmVJdGVtIiwiaW5pdCIsInNlbGYiLCJnZXRJdGVtIiwic2F2ZWRDYXJ0IiwicGFyc2UiLCJpdG1Db2RlIiwiY29kZSIsInVwZGF0ZUFxdWlzaXRpb25NZXRob2QiLCJ0ZXN0T2JqZWN0IiwiaW1hZ2UiLCJyYXRpbmciLCJuYW1lIiwidGl0bGUiLCJveiIsImRlc2NyaXB0aW9uIiwiaW5ncmVkaWVudHMiLCJ1c2VyQXV0aGVudGljYXRpb24iLCIkcm91dGVQcm92aWRlciIsIndoZW4iLCJhdXRoZW50aWNhdGlvbiIsImNhdGNoIiwiJHJvdXRlIiwiY3VycmVudCIsInBhcmFtcyIsInByZGN0SWQiLCJhaE51dHMiLCJhbmd1bGFyIiwibW9kdWxlIiwicnVuIiwiYWhIZWFkZXIiLCJhaEZvb3RlciIsImNhcnRJdGVtc0xpc3QiLCJjYXJ0TmF2aWdhdGlvbiIsImNhcnRTdW1tYXJ5IiwiY2hlY2tvdXRCaWxsaW5nIiwiY2hlY2tvdXRGb2xsb3d1cCIsImNoZWNrb3V0UGF5bWVudCIsImNvdXBvblN1Ym1pc3Npb24iLCJjcmVhdGVOZXdBY2NvdW50IiwiZmVhdHVyZWRQcm9kdWN0cyIsImZlZGV4T3B0aW9ucyIsImZ1bGxQcm9kdWN0UHJvZmlsZSIsImhlcm9CYW5uZXIiLCJwYXNzd29yZFJlc2V0IiwicGlja3VwT3JEZWxpdmVyeSIsInByaW1hcnlDb250ZW50IiwicHJvZHVjdFNpemVQaWNrZXIiLCJwcmRjdFRobWJubCIsInNlbGVjdERlbGl2ZXJ5TWV0aG9kIiwic2VsZWN0UE9yRCIsInNlbGVjdFBpY2t1cExvY2F0aW9uIiwic2l6ZVF0eVNlbGVjdG9yIiwidG9aaXBPbkRhdGUiLCJ1cHNPcHRpb25zIiwidXNlckRhc2hib2FyZCIsInVzcHNPcHRpb25zIiwiZmFjdG9yeSIsInNlcnZpY2UiXSwibWFwcGluZ3MiOiJBQU9BLFNBQUFBLG1CQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxHQUdBLElBQUFDLEVBQUFDLEtBQ0FELEVBQUFFLFFBQUFILEVBS0FDLEVBQUFHLFdBQUEsV0FDQUwsRUFBQU0sS0FBQSxNQ1ZBLFNBQUFDLG1CQUFBVCxFQUFBQyxFQUFBQyxHQUdBLElBQUFFLEVBQUFDLEtBR0FELEVBQUFNLGdCQUFBLEVBQ0FOLEVBQUFPLGdCQUFBLEVBR0FYLEVBQUFZLEtBQUEsOEJBR0EsU0FBQUMsR0FHQSxpQkFBQUEsR0FBQSxrQkFBQUEsRUFHQSxrQkFBQUEsSUFBQVQsRUFBQU8sZ0JBQUEsR0FLQVAsRUFBQU0sZ0JBQUEsRUFNQUksQ0FBQWIsRUFBQWMsT0M5QkEsU0FBQUMsc0JBQUFoQixFQUFBQyxFQUFBQyxFQUFBZSxHQUdBLElBQUFiLEVBQUFDLEtBQ0FELEVBQUFjLFlBQUFELE9BRUFFLEdBQUFsQixFQUFBbUIsU0FBQWhCLEVBQUFpQixpQkFBQXBCLEVBQUFtQixRQU1BaEIsRUFBQWtCLGNBQUEsU0FBQUMsR0FDQSxJQUFBZixFQUFBLFlBQUFlLEVBRUFyQixFQUFBTSxLQUFBQSxHQUFBZ0IsT0FBQSxTQUFBLE9DZkEsU0FBQUMsZUFBQXpCLEVBQUFDLEVBQUFDLEVBQUF3QixHQUdBckIsS0FDQXNCLEtBQUFELEVBRUExQixFQUFBWSxLQUFBLDBCQ05BLFNBQUFnQixtQkFBQTVCLEVBQUFDLEVBQUFDLEVBQUEyQixHQUdBLElBQUF6QixFQUFBQyxLQUNBRCxFQUFBeUIsWUFBQUEsRUFFQTdCLEVBQUFZLEtBQUEsOEJBRUFSLEVBQUEwQixRQUFBLFdBQUE1QixFQUFBTSxLQUFBLFVBQ0FKLEVBQUEyQixZQUFBLFdBQUE3QixFQUFBTSxLQUFBLGdDQ1RBLFNBQUF3Qix3QkFBQWhDLEVBQUFDLEVBQUFDLEVBQUErQixHQUdBLElBQUE3QixFQUFBQyxLQUNBNkIsRUFBQUQsRUFHQWpDLEVBQUFZLEtBQUEsOEJBRUFSLEVBQUErQixPQUFBLFdBQ0FDLFFBQUFDLElBQUEsY0FDQUgsRUFBQUksS0FBQSxzQkFBQUMsS0FBQSxTQUNBQyxLQUFBLFNBQUFDLEdBQ0FMLFFBQUFDLElBQUEsb0JBQUFJLE1DYkEsU0FBQUMsa0JBQUFDLEVBQUEzQyxFQUFBQyxFQUFBQyxFQUFBK0IsSUNBQSxTQUFBVyxvQkFBQTVDLEVBQUFDLEVBQUFDLEdBS0FGLEVBQUFZLEtBQUEsK0JDTEEsU0FBQWlDLGdCQUFBN0MsRUFBQUMsRUFBQUMsRUFBQStCLEdBR0EsSUFBQTdCLEVBQUFDLEtBQ0E2QixFQUFBRCxFQUVBakMsRUFBQVksS0FBQSwyQkFHQVIsRUFBQTBDLE1BQUEsR0FDQTFDLEVBQUEyQyxTQUFBLEdBR0EzQyxFQUFBNEMsTUFBQSxXQUdBZCxFQUFBSSxLQUFBLHFCQUFBUSxNQUFBMUMsRUFBQTBDLE1BQUFHLEtBQUE3QyxFQUFBMkMsVUFBQSxJQUNBUCxLQUFBLFNBQUFVLEdBRUEsSUFBQTFDLEVBQUEsZ0JBQUEwQyxFQUdBbEQsRUFBQVksS0FBQSxzQkFBQUosR0FFQU4sRUFBQU0sS0FBQSxRQ3hCQSxTQUFBMkMsZUFBQVIsRUFBQTNDLEVBQUFDLEVBQUFDLEdBS0F5QyxFQUFBUyxZQUFBLEVDTEEsU0FBQUMsNEJBQUFWLEVBQUEzQyxFQUFBQyxFQUFBQyxHQUtBRixFQUFBWSxLQUFBLHdDQ0xBLFNBQUEwQyx5QkFBQXRELEVBQUFDLEVBQUFDLEVBQUF3QixHQUdBLElBQUF0QixFQUFBQyxLQUNBRCxFQUFBRSxRQUFBTCxFQUFBc0QsS0FDQW5ELEVBQUF1QixLQUFBRCxFQUNBdEIsRUFBQW9ELGtCQUNBQyxvQkFBQSxFQUNBQyxxQkFBQSxFQUNBQyxZQUFBLEVBQ0FDLFFBQUEsRUFDQUMsZUFBQSxFQUNBQyxnQkFBQSxFQUNBQyxrQkFDQUMsbUJBR0FoRSxFQUFBWSxLQUFBLG9DQUFBUixFQUFBRSxTQUVBRixFQUFBNkQsTUFBQSxXQUNBL0QsRUFBQU0sS0FBQSxVQ3BCQSxTQUFBMEQsdUJBQUFsRSxFQUFBQyxFQUFBQyxHQUtBa0MsUUFBQUMsSUFBQSxzRENhQSxTQUFBOEIsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsSUFLQSxTQUFBQyxFQUFBN0IsRUFBQTNDLEVBQUFFLEVBQUF3QixHQUNBLElBQUF0QixFQUFBQyxLQUNBRCxFQUFBdUIsS0FBQUQsRUFLQXRCLEVBQUFxRSxPQUFBLFNBQUFDLEdBR0ExRSxFQUFBWSxLQUFBLFVBQUE4RCxHQUdBLFFBQUFBLEdBRUF4RSxFQUFBTSxLQUFBLElBQUFrRSwyQ0FoQ0EsSUFBQUMsR0FDQUMsU0FBQSxPQUNBQyxZQUFBLDJDQUNBQyxTQUFBLEVBQ0FWLFNBQ0FXLEtBQUFaLEVBQ0FhLFdBQUFSLEVBQ0FTLGFBQUEsS0FDQUMsa0JBQUEsR0ErQkEsT0F4QkFWLEVBQUFXLFNBQUEsU0FBQSxPQUFBLFlBQUEsZ0JBd0JBUixzQkMzQkEsU0FBQVIsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsSUFLQSxTQUFBYSxFQUFBekMsRUFBQTNDLDJDQWpCQSxJQUFBMkUsR0FDQUMsU0FBQSxPQUNBQyxZQUFBLDJDQUNBQyxTQUFBLEVBQ0FWLFNBQ0FXLEtBQUFaLEVBQ0FhLFdBQUFJLEVBQ0FILGFBQUEsS0FDQUMsa0JBQUEsR0FnQkEsT0FUQUUsRUFBQUQsU0FBQSxTQUFBLFFBU0FSLDJCQ1ZBLFNBQUFSLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLElBS0EsU0FBQWMsRUFBQTFDLEVBQUEzQywyQ0FuQkEsSUFBQTJFLEdBQ0FDLFNBQUEsT0FDQUMsWUFBQSwrQ0FDQUMsU0FBQSxFQUNBVixPQUNBa0IsVUFBQSxLQUVBUCxLQUFBWixFQUNBYSxXQUFBSyxFQUNBSixhQUFBLEtBQ0FDLGtCQUFBLEdBZ0JBLE9BVEFHLEVBQUFGLFNBQUEsU0FBQSxRQVNBUiw0QkNkQSxTQUFBUixFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxJQUtBLFNBQUFnQixFQUFBNUMsRUFBQTNDLEVBQUFFLEdBQ0EsSUFBQUUsRUFBQUMsS0FFQUwsRUFBQVksS0FBQSxvQ0FFQVIsRUFBQW9GLFNBQUEsV0FDQXRGLEVBQUFNLEtBQUEsa0JBRUFKLEVBQUFxRixTQUFBLFdBQ0F2RixFQUFBTSxLQUFBLHFEQTFCQSxJQUFBbUUsR0FDQUMsU0FBQSxPQUNBQyxZQUFBLGdEQUNBQyxTQUFBLEVBQ0FWLFNBQ0FXLEtBQUFaLEVBQ0FhLFdBQUFPLEVBQ0FOLGFBQUEsS0FDQUMsa0JBQUEsR0FzQkEsT0FmQUssRUFBQUosU0FBQSxTQUFBLE9BQUEsYUFlQVIseUJDZkEsU0FBQVIsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsSUFLQSxTQUFBbUIsRUFBQS9DLEVBQUEzQyxHQUdBQSxFQUFBWSxLQUFBLHdFQXZCQSxJQUFBK0QsR0FDQUMsU0FBQSxPQUNBQyxZQUFBLDZDQUNBQyxTQUFBLEVBQ0FWLE9BQ0F1QixRQUFBLElBQ0FDLFNBQUEsS0FFQWIsS0FBQVosRUFDQWEsV0FBQVUsRUFDQVQsYUFBQSxLQUNBQyxrQkFBQSxHQWdCQSxPQVRBUSxFQUFBUCxTQUFBLFNBQUEsUUFTQVIsNkJDZkEsU0FBQVIsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsSUFLQSxTQUFBc0IsRUFBQWxELEVBQUEzQyxHQUdBQSxFQUFBWSxLQUFBLDJFQXBCQSxJQUFBK0QsR0FDQUMsU0FBQSxPQUNBQyxZQUFBLGlEQUNBQyxTQUFBLEVBQ0FWLFNBQ0FXLEtBQUFaLEVBQ0FhLFdBQUFhLEVBQ0FaLGFBQUEsS0FDQUMsa0JBQUEsR0FnQkEsT0FUQVcsRUFBQVYsU0FBQSxTQUFBLFFBU0FSLDhCQ1pBLFNBQUFSLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLElBS0EsU0FBQXVCLEVBQUFuRCxFQUFBM0MsR0FHQUEsRUFBQVksS0FBQSxzRkFwQkEsSUFBQStELEdBQ0FDLFNBQUEsT0FDQUMsWUFBQSxrREFDQUMsU0FBQSxFQUNBVixTQUNBVyxLQUFBWixFQUNBYSxXQUFBYyxFQUNBYixhQUFBLEtBQ0FDLGtCQUFBLEdBZ0JBLE9BVEFZLEVBQUFYLFNBQUEsU0FBQSxRQVNBUiw2QkNWQSxTQUFBUixFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxJQUtBLFNBQUF3QixFQUFBcEQsRUFBQTNDLEVBQUFpQyxHQUNBLElBQUE3QixFQUFBQyxLQUNBRCxFQUFBOEIsS0FBQUQsRUFVQWpDLEVBQUFZLEtBQUEsb0NBRUEsSUFBQW9GLEVBQUEsSUFBQUMsZUFDQUMsY0FYQSxhQVlBQyxXQVhBLGFBWUFDLFdBQUEsV0FDQUMsY0FFQUMsU0FBQSxTQUlBQyxZQUNBQyxVQUFBLGlCQUNBQyxZQUFBLHVCQUVBQyxLQUNBRixVQUFBLFNBQ0FDLFlBQUEsT0FFQUUsZ0JBQ0FILFVBQUEscUJBQ0FDLFlBQUEsU0FFQUcsWUFDQUosVUFBQSxrQkFHQUssVUFDQUwsVUFBQSxnQkFHQU0sV0FNQUMsaUJBQUEsU0FBQUMsSUFDQSxJQUFBQSxFQUFBSCxXQUVBSSxTQUFBQyxlQUFBLGdCQUNBQyxNQUFBQyxRQUFBLGlCQVNBQyxxQkFBQSxXQUNBLE9BQ0FDLHdCQUFBLEVBQ0FDLGFBQUEsTUFDQUMsWUFBQSxLQUNBQyxPQUNBQyxNQUFBLHNCQUNBQyxPQUFBLG1CQUNBQyxTQUFBLEdBRUFDLFlBRUFILE1BQUEsV0FDQUMsT0FBQSxzQkFDQUMsU0FBQSxJQUdBRixNQUFBLFdBQ0FDLE9BQUEsc0JBQ0FDLFNBQUEsSUFHQUYsTUFBQSxNQUNBQyxPQUFBLGlCQUNBQyxTQUFBLE1BU0FFLDBCQUFBLFNBQUFDLEVBQUFDLEVBQUFDLEdBQ0EsR0FBQUYsRUFTQSxPQVJBM0YsUUFBQUMsSUFBQSw0QkFJQTBGLEVBQUFHLFFBQUEsU0FBQUMsR0FDQS9GLFFBQUFDLElBQUEsS0FBQThGLEVBQUFDLFdBV0FuQixTQUFBQyxlQUFBLGNBQUFtQixNQUFBTCxFQUNBZixTQUFBQyxlQUFBLGNBQUEvRSxTQUlBL0IsRUFBQThCLEtBQUFJLEtBQUEsaUJBQUEwRixNQUFBQSxLQUlBTSwyQkFBQSxhQU1BQyxtQkFBQSxTQUFBQyxHQUNBQSxFQUFBQyxXQXNCQUMsa0JBQUEsZ0JBVUF0SSxFQUFBdUksaUJBQUEsU0FBQUMsR0FFQXhHLFFBQUFDLElBQUEseUJBS0F1RyxFQUFBQyxpQkFFQTdDLEVBQUEyQyxvQkFJQTNDLEVBQUE4QywrQ0FsTUEsSUFBQW5FLEdBQ0FDLFNBQUEsT0FDQUMsWUFBQSxpREFDQUMsU0FBQSxFQUNBVixPQUNBdkMsWUFBQSxLQUVBa0QsS0FBQVosRUFDQWEsV0FBQWUsRUFDQWQsYUFBQSxLQUNBQyxrQkFBQSxHQTRMQSxPQXJMQWEsRUFBQVosU0FBQSxTQUFBLE9BQUEsZ0JBcUxBUiw4QkMxTEEsU0FBQVIsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsSUFLQSxTQUFBd0UsRUFBQXBHLEVBQUEzQyxHQUdBQSxFQUFBWSxLQUFBLDZFQXBCQSxJQUFBK0QsR0FDQUMsU0FBQSxPQUNBQyxZQUFBLGtEQUNBQyxTQUFBLEVBQ0FWLFNBQ0FXLEtBQUFaLEVBQ0FhLFdBQUErRCxFQUNBOUQsYUFBQSxLQUNBQyxrQkFBQSxHQWdCQSxPQVRBNkQsRUFBQTVELFNBQUEsU0FBQSxRQVNBUiw4QkNaQSxTQUFBUixFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxJQUtBLFNBQUF5RSxFQUFBckcsRUFBQTNDLEVBQUFFLEdBR0FGLEVBQUFZLEtBQUEsOEVBcEJBLElBQUErRCxHQUNBQyxTQUFBLE9BQ0FDLFlBQUEsa0RBQ0FDLFNBQUEsRUFDQVYsU0FDQVcsS0FBQVosRUFDQWEsV0FBQWdFLEVBQ0EvRCxhQUFBLEtBQ0FDLGtCQUFBLEdBa0JBLE9BWEE4RCxFQUFBN0QsU0FBQSxTQUFBLE9BQUEsYUFXQVIsOEJDZEEsU0FBQVIsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsSUFLQSxTQUFBMEUsRUFBQXRHLEVBQUEzQyxFQUFBRSxHQUNBLElBQUFFLEVBQUFDLEtBS0FELEVBQUE4SSxZQUFBLFdBQ0FoSixFQUFBTSxLQUFBLGtCQUdBSixFQUFBK0ksb0JBQUEsU0FBQUMsR0FFQWxKLEVBQUFNLEtBQUEsaUJBQUFnQixPQUFBLFNBQUE0SCwyQ0E3QkEsSUFBQXpFLEdBQ0FDLFNBQUEsT0FDQUMsWUFBQSxrREFDQUMsU0FBQSxFQUNBVixTQUNBVyxLQUFBWixFQUNBYSxXQUFBaUUsRUFDQWhFLGFBQUEsS0FDQUMsa0JBQUEsR0EwQkEsT0FuQkErRCxFQUFBOUQsU0FBQSxTQUFBLE9BQUEsYUFtQkFSLDBCQ3RCQSxTQUFBUixFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxJQUtBLFNBQUE4RSxFQUFBMUcsRUFBQTNDLDJDQWpCQSxJQUFBMkUsR0FDQUMsU0FBQSxPQUNBQyxZQUFBLDhDQUNBQyxTQUFBLEVBQ0FWLFNBQ0FXLEtBQUFaLEVBQ0FhLFdBQUFxRSxFQUNBcEUsYUFBQSxLQUNBQyxrQkFBQSxHQWdCQSxPQVRBbUUsRUFBQWxFLFNBQUEsU0FBQSxRQVNBUixnQ0NWQSxTQUFBUixFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxJQUtBLFNBQUErRSxFQUFBM0csRUFBQTNDLEVBQUFFLEVBQUF3QixHQUNBLElBQUF0QixFQUFBQyxLQUNBRCxFQUFBdUIsS0FBQUQsRUFDQXRCLEVBQUFtSixlQUFBbkosRUFBQUUsUUFBQWtKLE1BR0FwSixFQUFBcUosVUFBQSxTQUFBRixHQUVBbkgsUUFBQUMsSUFBQSxvQkFBQWpDLEVBQUFtSixnQkFHQW5KLEVBQUFtSixlQUFBckIsUUFBQSxTQUFBd0IsR0FFQUEsRUFBQUMsSUFBQSxHQUFBdkosRUFBQXVCLEtBQUFpSSxRQUFBRixLQUlBeEosRUFBQU0sS0FBQSxtRUFwQ0EsSUFBQW1FLEdBQ0FDLFNBQUEsT0FDQUMsWUFBQSxvREFDQUMsU0FBQSxFQUNBVixPQUNBOUQsUUFBQSxLQUVBeUUsS0FBQVosRUFDQWEsV0FBQXNFLEVBQ0FyRSxhQUFBLEtBQ0FDLGtCQUFBLEdBK0JBLE9BeEJBb0UsRUFBQW5FLFNBQUEsU0FBQSxPQUFBLFlBQUEsZ0JBd0JBUix3QkM3QkEsU0FBQVIsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsSUFLQSxTQUFBc0YsRUFBQWxILEVBQUEzQywyQ0FqQkEsSUFBQTJFLEdBQ0FDLFNBQUEsT0FDQUMsWUFBQSw0Q0FDQUMsU0FBQSxFQUNBVixTQUNBVyxLQUFBWixFQUNBYSxXQUFBNkUsRUFDQTVFLGFBQUEsS0FDQUMsa0JBQUEsR0FnQkEsT0FUQTJFLEVBQUExRSxTQUFBLFNBQUEsUUFTQVIsMkJDWkEsU0FBQVIsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsSUFLQSxTQUFBdUYsRUFBQW5ILEVBQUEzQyxFQUFBRSxHQUNBLElBQUFFLEVBQUFDLEtBRUFMLEVBQUFZLEtBQUEsa0NBR0FSLEVBQUEwQyxNQUFBLEdBR0ExQyxFQUFBMkosS0FBQSxXQUNBN0osRUFBQU0sS0FBQSxXQUdBSixFQUFBK0IsT0FBQSxXQUNBbkMsRUFBQVksS0FBQSxtQkFBQVIsRUFBQTBDLCtDQS9CQSxJQUFBNkIsR0FDQUMsU0FBQSxPQUNBQyxZQUFBLCtDQUNBQyxTQUFBLEVBQ0FWLFNBQ0FXLEtBQUFaLEVBQ0FhLFdBQUE4RSxFQUNBN0UsYUFBQSxLQUNBQyxrQkFBQSxHQTJCQSxPQXBCQTRFLEVBQUEzRSxTQUFBLFNBQUEsT0FBQSxhQW9CQVIsOEJDcEJBLFNBQUFSLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLElBS0EsU0FBQXlGLEVBQUFySCxFQUFBM0MsR0FDQSxJQUFBSSxFQUFBQyxLQUVBTCxFQUFBWSxLQUFBLHNDQUFBUixFQUFBNkosT0FBQTdKLEVBQUE4SixnREF2QkEsSUFBQXZGLEdBQ0FDLFNBQUEsT0FDQUMsWUFBQSxrREFDQUMsU0FBQSxFQUNBVixPQUNBNkYsT0FBQSxJQUNBQyxRQUFBLEtBRUFuRixLQUFBWixFQUNBYSxXQUFBZ0YsRUFDQS9FLGFBQUEsS0FDQUMsa0JBQUEsR0FnQkEsT0FUQThFLEVBQUE3RSxTQUFBLFNBQUEsUUFTQVIsNEJDZkEsU0FBQVIsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsSUFLQSxTQUFBNEYsRUFBQXhILEVBQUEzQyxHQUdBQSxFQUFBWSxLQUFBLGtFQXBCQSxJQUFBK0QsR0FDQUMsU0FBQSxPQUNBQyxZQUFBLGdEQUNBQyxTQUFBLEVBQ0FWLFNBQ0FXLEtBQUFaLEVBQ0FhLFdBQUFtRixFQUNBbEYsYUFBQSxLQUNBQyxrQkFBQSxHQWdCQSxPQVRBaUYsRUFBQWhGLFNBQUEsU0FBQSxRQVNBUiwrQkNWQSxTQUFBUixFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxJQUtBLFNBQUE2RixFQUFBekgsRUFBQTNDLDJDQW5CQSxJQUFBMkUsR0FDQUMsU0FBQSxPQUNBQyxZQUFBLG1EQUNBQyxTQUFBLEVBQ0FWLE9BQ0FvRixNQUFBLEtBRUF6RSxLQUFBWixFQUNBYSxXQUFBb0YsRUFDQW5GLGFBQUEsS0FDQUMsa0JBQUEsR0FnQkEsT0FUQWtGLEVBQUFqRixTQUFBLFNBQUEsUUFTQVIseUJDWkEsU0FBQVIsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsSUFLQSxTQUFBOEYsRUFBQTFILEVBQUEzQywyQ0FuQkEsSUFBQTJFLEdBQ0FDLFNBQUEsT0FDQUMsWUFBQSw2Q0FDQUMsU0FBQSxFQUNBVixPQUNBOUQsUUFBQSxLQUVBeUUsS0FBQVosRUFDQWEsV0FBQXFGLEVBQ0FwRixhQUFBLEtBQ0FDLGtCQUFBLEdBZ0JBLE9BVEFtRixFQUFBbEYsU0FBQSxTQUFBLFFBU0FSLGtDQ2RBLFNBQUFSLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLElBS0EsU0FBQStGLEVBQUEzSCxFQUFBM0MsMkNBakJBLElBQUEyRSxHQUNBQyxTQUFBLE9BQ0FDLFlBQUEsc0RBQ0FDLFNBQUEsRUFDQVYsU0FDQVcsS0FBQVosRUFDQWEsV0FBQXNGLEVBQ0FyRixhQUFBLEtBQ0FDLGtCQUFBLEdBZ0JBLE9BVEFvRixFQUFBbkYsU0FBQSxTQUFBLFFBU0FSLHdCQ1pBLFNBQUFSLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLElBS0EsU0FBQWdHLEVBQUE1SCxFQUFBM0MsMkNBakJBLElBQUEyRSxHQUNBQyxTQUFBLE9BQ0FDLFlBQUEsNENBQ0FDLFNBQUEsRUFDQVYsU0FDQVcsS0FBQVosRUFDQWEsV0FBQXVGLEVBQ0F0RixhQUFBLEtBQ0FDLGtCQUFBLEdBZ0JBLE9BVEFxRixFQUFBcEYsU0FBQSxTQUFBLFFBU0FSLGtDQ1pBLFNBQUFSLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLElBS0EsU0FBQWlHLEVBQUE3SCxFQUFBM0MsMkNBakJBLElBQUEyRSxHQUNBQyxTQUFBLE9BQ0FDLFlBQUEsc0RBQ0FDLFNBQUEsRUFDQVYsU0FDQVcsS0FBQVosRUFDQWEsV0FBQXdGLEVBQ0F2RixhQUFBLEtBQ0FDLGtCQUFBLEdBZ0JBLE9BVEFzRixFQUFBckYsU0FBQSxTQUFBLFFBU0FSLDZCQ1ZBLFNBQUFSLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLElBS0EsU0FBQWtHLEVBQUE5SCxFQUFBM0MsR0FDQSxJQUFBSSxFQUFBQyxLQUdBRCxFQUFBc0ssVUFBQSxXQUFBdEssRUFBQXNKLEtBQUFDLE9BRUF2SixFQUFBdUssVUFBQSxXQUNBdkssRUFBQXNKLEtBQUFDLEtBQUEsR0FBQXZKLEVBQUFzSixLQUFBQyw4Q0ExQkEsSUFBQWhGLEdBQ0FDLFNBQUEsT0FDQUMsWUFBQSxpREFDQUMsU0FBQSxFQUNBVixPQUNBc0YsS0FBQSxLQUVBM0UsS0FBQVosRUFDQWEsV0FBQXlGLEVBQ0F4RixhQUFBLEtBQ0FDLGtCQUFBLEdBb0JBLE9BYkF1RixFQUFBdEYsU0FBQSxTQUFBLFFBYUFSLHlCQ2xCQSxTQUFBUixFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxJQUtBLFNBQUFxRyxFQUFBakksRUFBQTNDLDJDQWpCQSxJQUFBMkUsR0FDQUMsU0FBQSxPQUNBQyxZQUFBLDZDQUNBQyxTQUFBLEVBQ0FWLFNBQ0FXLEtBQUFaLEVBQ0FhLFdBQUE0RixFQUNBM0YsYUFBQSxLQUNBQyxrQkFBQSxHQWdCQSxPQVRBMEYsRUFBQXpGLFNBQUEsU0FBQSxRQVNBUix3QkNaQSxTQUFBUixFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxJQUtBLFNBQUFzRyxFQUFBbEksRUFBQTNDLDJDQWpCQSxJQUFBMkUsR0FDQUMsU0FBQSxPQUNBQyxZQUFBLDRDQUNBQyxTQUFBLEVBQ0FWLFNBQ0FXLEtBQUFaLEVBQ0FhLFdBQUE2RixFQUNBNUYsYUFBQSxLQUNBQyxrQkFBQSxHQWdCQSxPQVRBMkYsRUFBQTFGLFNBQUEsU0FBQSxRQVNBUiwyQkNaQSxTQUFBUixFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxJQUtBLFNBQUF1RyxFQUFBbkksRUFBQTNDLEVBQUFFLEdBR0FGLEVBQUFZLEtBQUEseUVBcEJBLElBQUErRCxHQUNBQyxTQUFBLE9BQ0FDLFlBQUEsK0NBQ0FDLFNBQUEsRUFDQVYsU0FDQVcsS0FBQVosRUFDQWEsV0FBQThGLEVBQ0E3RixhQUFBLEtBQ0FDLGtCQUFBLEdBa0JBLE9BWEE0RixFQUFBM0YsU0FBQSxTQUFBLE9BQUEsYUFXQVIseUJDZEEsU0FBQVIsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsSUFLQSxTQUFBd0csRUFBQXBJLEVBQUEzQywyQ0FqQkEsSUFBQTJFLEdBQ0FDLFNBQUEsT0FDQUMsWUFBQSw2Q0FDQUMsU0FBQSxFQUNBVixTQUNBVyxLQUFBWixFQUNBYSxXQUFBK0YsRUFDQTlGLGFBQUEsS0FDQUMsa0JBQUEsR0FnQkEsT0FUQTZGLEVBQUE1RixTQUFBLFNBQUEsUUFTQVIsRUM5QkEsU0FBQTFDLGFBQUFqQyxFQUFBZ0wsR0E4Q0EsT0EzQ0FDLElBS0EsU0FBQUMsRUFBQUMsR0FHQSxPQUFBLElBQUFDLFFBQUEsU0FBQUMsRUFBQUMsR0FFQU4sRUFBQUMsSUFBQUMsRUFBQUMsR0FDQTNJLEtBQUEsU0FBQStJLEdBRUFGLEVBQUFFLEVBQUFySixPQUVBLFNBQUFzSixHQUVBRixFQUFBRSxRQWhCQWxKLEtBdUJBLFNBQUE0SSxFQUFBaEosRUFBQWlKLEdBR0EsT0FBQSxJQUFBQyxRQUFBLFNBQUFDLEVBQUFDLEdBRUFOLEVBQUExSSxLQUFBNEksRUFBQWhKLEVBQUFpSixHQUNBM0ksS0FBQSxTQUFBQyxHQUVBNEksRUFBQTVJLEVBQUFQLE9BRUEsU0FBQXNKLEdBRUFGLEVBQUFFLFNDdkNBLFNBQUE5SixhQUFBMUIsRUFBQWdMLEVBQUFTLEdBNERBLFNBQUFDLEVBQUFDLEdBRUEsSUFBQUMsS0FPQSxPQUpBQyxPQUFBQyxLQUFBSCxHQUFBekQsUUFBQSxTQUFBNkQsR0FDQUgsRUFBQUcsR0FBQUosRUFBQUksS0FHQUgsRUFHQSxTQUFBSSxFQUFBQyxHQUVBLElBQUFDLEVBQUEsRUFVQSxPQVBBTCxPQUFBQyxLQUFBRyxHQUFBL0QsUUFBQSxTQUFBNkQsR0FFQUcsR0FBQUQsRUFBQUYsR0FBQXBDLE1BS0F1QyxFQUdBLFNBQUFDLEVBQUFGLEdBRUEsSUFBQUMsRUFBQSxFQVNBLE9BTkFMLE9BQUFDLEtBQUFHLEdBQUEvRCxRQUFBLFNBQUE2RCxHQUNBRyxHQUFBRCxFQUFBRixHQUFBcEMsSUFBQXNDLEVBQUFGLEdBQUFLLFFBS0FGLEVBeURBLE9BeEpBRyxTQUFBLEVBQ0FDLGlCQUFBbkwsRUFDQW9MLHNCQUFBcEwsRUFDQXFMLFVBQUEsRUFDQTVHLFNBQUEsRUFDQTZHLGNBQUEsRUFDQUMsVUFBQSxFQUNBQyxVQUFBLEVBQ0FDLHFCQUNBQyxTQUNBQyxlQW1DQSxTQUFBbkwsR0FDQThKLEVBQUFzQixlQUFBQyxRQUFBLGVBQUFDLEtBQUFDLFVBQUF2TCxLQW5DQXdMLFNBc0NBLFdBQ0EsT0FBQTFCLEVBQUFzQixlQUFBLGlCQXRDQUssWUF5Q0EsV0FDQTNCLEVBQUFzQixlQUFBTSxXQUFBLGlCQXpDQTNCLFlBQUFBLEVBQ0FNLGNBQUFBLEVBQ0FHLGNBQUFBLEVBQ0FtQixLQU1BLFdBRUEsSUFBQUMsRUFBQWxOLEtBR0EsR0FBQSxNQUFBb0wsRUFBQXNCLGVBQUFTLFFBQUEsZ0JBQUEsQ0FDQSxJQUFBQyxFQUFBUixLQUFBUyxNQUFBakMsRUFBQXNCLGVBQUFTLFFBQUEsaUJBRUFELEVBQUFsQixRQUFBb0IsRUFBQXBCLFFBQ0FrQixFQUFBakIsWUFBQW1CLEVBQUFuQixZQUNBaUIsRUFBQWhCLGlCQUFBa0IsRUFBQWxCLGlCQUNBZ0IsRUFBQWYsVUFBQWlCLEVBQUFqQixVQUNBZSxFQUFBM0gsU0FBQTZILEVBQUE3SCxTQUNBMkgsRUFBQWQsY0FBQWdCLEVBQUFoQixjQUNBYyxFQUFBYixVQUFBZSxFQUFBZixVQUNBYSxFQUFBWixVQUFBYyxFQUFBZCxVQUNBWSxFQUFBWCxrQkFBQWEsRUFBQWIsa0JBR0F4SyxRQUFBQyxJQUFBa0wsSUF4QkEzRCxRQWlGQSxTQUFBK0IsR0FFQSxJQUFBNEIsRUFBQWxOLEtBQ0FzTixFQUFBaEMsRUFBQWlDLEtBNkNBLE9BdkNBTCxFQUFBbEIsU0FBQSxPQUdBbEwsR0FBQW9NLEVBQUFWLE1BQUFjLEtBR0FKLEVBQUFWLE1BQUFjLEdBQUFqQyxFQUFBQyxHQUdBNEIsRUFBQWYsVUFBQVIsRUFBQXVCLEVBQUFWLE9BR0FVLEVBQUEzSCxTQUFBdUcsRUFBQW9CLEVBQUFWLFFBZUFVLEVBQUFULGdCQUNBVCxRQUFBa0IsRUFBQWxCLFFBQ0FDLFlBQUFpQixFQUFBakIsWUFDQUMsaUJBQUFnQixFQUFBaEIsaUJBQ0FDLFVBQUFlLEVBQUFmLFVBQ0E1RyxTQUFBMkgsRUFBQTNILFNBQ0E2RyxjQUFBYyxFQUFBZCxjQUNBQyxVQUFBYSxFQUFBYixVQUNBQyxVQUFBWSxFQUFBWixVQUNBQyxrQkFBQVcsRUFBQVgscUJBR0EsR0FoSUFTLFdBbUlBLGFBbElBUSx1QkFtSUEsY0N6SkEsU0FBQUMsV0FBQTlOLEdBaUJBLE9BZEErTixXQUFBNU0sRUFDQXlNLEtBQUEsS0FDQUksWUFBQTdNLEVBQ0E4TSxLQUFBLGtCQUNBekUsUUFDQW9FLEtBQUEsUUFBQU0sTUFBQSxhQUFBQyxHQUFBLEdBQUEvQixNQUFBLE9BQ0F3QixLQUFBLFFBQUFNLE1BQUEsVUFBQUMsR0FBQSxFQUFBL0IsTUFBQSxPQUNBd0IsS0FBQSxRQUFBTSxNQUFBLFFBQUFDLEdBQUEsRUFBQS9CLE1BQUEsTUFFQWdDLFlBQUEsNENBQ0FDLGFBQUEsU0FBQSxRQUFBLFVBQUEsU0NkQSxTQUFBQyxtQkFBQXRELEVBQUFTLElDRkEsU0FBQU4sT0FBQW9ELEdBQ0FBLEVBRUFDLEtBQUEsS0FDQTNKLFlBQUEsd0JBQ0FHLFdBQUEsb0JBQ0FDLGFBQUEsT0FHQXVKLEtBQUEsaUJBQ0EzSixZQUFBLDRCQUNBRyxXQUFBLHdCQUNBQyxhQUFBLEtBQ0FvRyxTQUNBcEssWUFBQUEsZUFJQXVOLEtBQUEscUJBQ0EzSixZQUFBLHlCQUNBRyxXQUFBLHFCQUNBQyxhQUFBLEtBQ0FvRyxTQUNBbEwsU0FBQUEsWUFJQXFPLEtBQUEsZ0NBQ0EzSixZQUFBLCtCQUNBRyxXQUFBLDJCQUNBQyxhQUFBLE9BR0F1SixLQUFBLGNBQ0EzSixZQUFBLDBCQUNBRyxXQUFBLHNCQUNBQyxhQUFBLE9BR0F1SixLQUFBLFVBQ0EzSixZQUFBLHNCQUNBRyxXQUFBLGtCQUNBQyxhQUFBLE9BR0F1SixLQUFBLFNBQ0EzSixZQUFBLHFCQUNBRyxXQUFBLGlCQUNBQyxhQUFBLE9BR0F1SixLQUFBLGFBQ0EzSixZQUFBLHlCQUNBRyxXQUFBLHFCQUNBQyxhQUFBLEtBQ0FvRyxTQUNBeEosWUFBQUEsZUFJQTJNLEtBQUEsK0JBQ0EzSixZQUFBLGtDQUNBRyxXQUFBLDhCQUNBQyxhQUFBLE9BR0F1SixLQUFBLGlCQUNBM0osWUFBQSw2QkFDQUcsV0FBQSx5QkFDQUMsYUFBQSxPQUdBdUosS0FBQSxxQkFDQTNKLFlBQUEseUJBQ0FHLFdBQUEscUJBQ0FDLGFBQUEsT0FHQXVKLEtBQUEsc0JBQ0EzSixZQUFBLDhCQUNBRyxXQUFBLDBCQUNBQyxhQUFBLEtBQ0FvRyxTQUNBb0QsZUFBQUEsa0JBUUEsU0FBQUEsaUJBRUFyTSxRQUFBQyxJQUFBLGtCQUdBLFNBQUFSLFlBQUFJLEdBRUEsSUFBQUMsRUFBQUQsRUFNQSxPQUpBRyxRQUFBQyxJQUFBLHdCQUlBLElBQUErSSxRQUFBLFNBQUFDLEVBQUFDLEdBR0FwSixFQUFBSSxLQUFBLHFCQUFBeUosSUFBQSx5QkFDQXZKLEtBQUEsU0FBQStJLEdBQ0FuSixRQUFBQyxJQUFBLFdBQUFrSixHQUNBRixFQUFBRSxLQUNBbUQsTUFBQSxTQUFBbEQsR0FDQUgsRUFBQUcsT0FZQSxTQUFBdkssWUFBQWdCLEVBQUEwTSxHQUdBLElBQUF6TSxFQUFBRCxFQUNBekIsRUFBQSxtQkFTQSxZQVBBVyxHQUFBd04sRUFBQUMsUUFBQUMsU0FDQXJPLEdBQUEsV0FBQW1PLEVBQUFDLFFBQUFDLE9BQUF6TixRQU1BLElBQUFnSyxRQUFBLFNBQUFDLEVBQUFDLEdBR0FwSixFQUFBK0ksSUFBQXpLLEdBQ0FnQyxLQUFBLFNBQUErSSxHQUNBRixFQUFBRSxLQUNBbUQsTUFBQSxTQUFBbEQsR0FDQUYsRUFBQUUsT0FXQSxTQUFBckwsU0FBQThCLEVBQUEwTSxHQUdBLElBQUF6TSxFQUFBRCxFQUNBekIsRUFBQSwyQkFBQW1PLEVBQUFDLFFBQUFDLE9BQUFDLFFBUUEsT0FOQTFNLFFBQUFDLElBQUEsT0FBQTdCLEdBTUEsSUFBQTRLLFFBQUEsU0FBQUMsRUFBQUMsR0FHQXBKLEVBQUErSSxJQUFBekssR0FDQWdDLEtBQUEsU0FBQStJLEdBRUFGLEVBQUFFLEtBQ0FtRCxNQUFBLFNBQUFsRCxHQUNBRixFQUFBRSx1S0NsTEEsSUFBQXVELE9BQUFDLFFBQUFDLE9BQUEsVUFBQSxZQ0RBRCxRQUNBQyxPQUFBLFVBQ0FDLEtBQUEsZUFBQSxTQUFBeE4sR0FDQUEsRUFBQTRMLFU5Q0hBMEIsUUFDQUMsT0FBQSxVQUNBakssV0FBQSxxQkFBQWpGLG9CQUVBQSxtQkFBQW9GLFNBQUEsT0FBQSxlQUFBLFlBQUEsWUNKQTZKLFFBQ0FDLE9BQUEsVUFDQWpLLFdBQUEscUJBQUF2RSxvQkFFQUEsbUJBQUEwRSxTQUFBLE9BQUEsZUFBQSxhQ0pBNkosUUFDQUMsT0FBQSxVQUNBakssV0FBQSx3QkFBQWhFLHVCQUVBQSxzQkFBQW1FLFNBQUEsT0FBQSxlQUFBLFlBQUEsZUNKQTZKLFFBQ0FDLE9BQUEsVUFDQWpLLFdBQUEsaUJBQUF2RCxnQkFFQUEsZUFBQTBELFNBQUEsT0FBQSxlQUFBLFlBQUEsZ0JDSkE2SixRQUNBQyxPQUFBLFVBQ0FqSyxXQUFBLHFCQUFBcEQsb0JBRUFBLG1CQUFBdUQsU0FBQSxPQUFBLGVBQUEsWUFBQSxlQ0pBNkosUUFDQUMsT0FBQSxVQUNBakssV0FBQSwwQkFBQWhELHlCQUVBQSx3QkFBQW1ELFNBQUEsT0FBQSxlQUFBLFlBQUEsZ0JDSkE2SixRQUNBQyxPQUFBLFVBQ0FqSyxXQUFBLG9CQUFBdEMsbUJBRUFBLGtCQUFBeUMsU0FBQSxTQUFBLE9BQUEsZUFBQSxZQUFBLGdCQ0pBNkosUUFDQUMsT0FBQSxVQUNBakssV0FBQSxzQkFBQXBDLHFCQUVBQSxvQkFBQXVDLFNBQUEsT0FBQSxlQUFBLGFDSkE2SixRQUNBQyxPQUFBLFVBQ0FqSyxXQUFBLGtCQUFBbkMsaUJBRUFBLGdCQUFBc0MsU0FBQSxPQUFBLGVBQUEsWUFBQSxnQkNKQTZKLFFBQ0FDLE9BQUEsVUFDQWpLLFdBQUEsaUJBQUE3QixnQkFFQUEsZUFBQWdDLFNBQUEsU0FBQSxPQUFBLGVBQUEsYUNKQTZKLFFBQ0FDLE9BQUEsVUFDQWpLLFdBQUEsOEJBQUEzQiw2QkFFQUEsNEJBQUE4QixTQUFBLFNBQUEsT0FBQSxlQUFBLGFDSkE2SixRQUNBQyxPQUFBLFVBQ0FqSyxXQUFBLDJCQUFBMUIsMEJBRUFBLHlCQUFBNkIsU0FBQSxPQUFBLGVBQUEsWUFBQSxnQkNKQTZKLFFBQ0FDLE9BQUEsVUFDQWpLLFdBQUEseUJBQUFkLHdCQUVBQSx1QkFBQWlCLFNBQUEsT0FBQSxlQUFBLGFDR0E2SixRQUNBQyxPQUFBLFVBQ0F0SyxVQUFBLFdBQUF3SyxVQ0ZBSCxRQUNBQyxPQUFBLFVBQ0F0SyxVQUFBLFdBQUF5SyxVQ0ZBSixRQUNBQyxPQUFBLFVBQ0F0SyxVQUFBLGdCQUFBMEssZUNGQUwsUUFDQUMsT0FBQSxVQUNBdEssVUFBQSxpQkFBQTJLLGdCQ0ZBTixRQUNBQyxPQUFBLFVBQ0F0SyxVQUFBLGNBQUE0SyxhQ0ZBUCxRQUNBQyxPQUFBLFVBQ0F0SyxVQUFBLGtCQUFBNkssaUJDRkFSLFFBQ0FDLE9BQUEsVUFDQXRLLFVBQUEsbUJBQUE4SyxrQkNGQVQsUUFDQUMsT0FBQSxVQUNBdEssVUFBQSxrQkFBQStLLGlCQ0ZBVixRQUNBQyxPQUFBLFVBQ0F0SyxVQUFBLG1CQUFBZ0wsa0JDRkFYLFFBQ0FDLE9BQUEsVUFDQXRLLFVBQUEsbUJBQUFpTCxrQkNGQVosUUFDQUMsT0FBQSxVQUNBdEssVUFBQSxtQkFBQWtMLGtCQ0ZBYixRQUNBQyxPQUFBLFVBQ0F0SyxVQUFBLGVBQUFtTCxjQ0ZBZCxRQUNBQyxPQUFBLFVBQ0F0SyxVQUFBLHFCQUFBb0wsb0JDRkFmLFFBQ0FDLE9BQUEsVUFDQXRLLFVBQUEsYUFBQXFMLFlDRkFoQixRQUNBQyxPQUFBLFVBQ0F0SyxVQUFBLGdCQUFBc0wsZUNGQWpCLFFBQ0FDLE9BQUEsVUFDQXRLLFVBQUEsbUJBQUF1TCxrQkNGQWxCLFFBQ0FDLE9BQUEsVUFDQXRLLFVBQUEsaUJBQUF3TCxnQkNGQW5CLFFBQ0FDLE9BQUEsVUFDQXRLLFVBQUEsb0JBQUF5TCxtQkNGQXBCLFFBQ0FDLE9BQUEsVUFDQXRLLFVBQUEsY0FBQTBMLGFDRkFyQixRQUNBQyxPQUFBLFVBQ0F0SyxVQUFBLHVCQUFBMkwsc0JDRkF0QixRQUNBQyxPQUFBLFVBQ0F0SyxVQUFBLGFBQUE0TCxZQ0ZBdkIsUUFDQUMsT0FBQSxVQUNBdEssVUFBQSx1QkFBQTZMLHNCQ0ZBeEIsUUFDQUMsT0FBQSxVQUNBdEssVUFBQSxrQkFBQThMLGlCQ0ZBekIsUUFDQUMsT0FBQSxVQUNBdEssVUFBQSxjQUFBK0wsYUNGQTFCLFFBQ0FDLE9BQUEsVUFDQXRLLFVBQUEsYUFBQWdNLFlDRkEzQixRQUNBQyxPQUFBLFVBQ0F0SyxVQUFBLGdCQUFBaU0sZUNGQTVCLFFBQ0FDLE9BQUEsVUFDQXRLLFVBQUEsY0FBQWtNLGFDVEE3QixRQUNBQyxPQUFBLFVBQ0E2QixRQUFBLGVBQUE3TyxjQUVBQSxhQUFBa0QsU0FBQSxPQUFBLFNDSkE2SixRQUNBQyxPQUFBLFVBQ0E2QixRQUFBLGVBQUFwUCxjQUVBQSxhQUFBeUQsU0FBQSxPQUFBLFFBQUEsV0NKQTZKLFFBQ0FDLE9BQUEsVUFDQTZCLFFBQUEsYUFBQWhELFlBRUFBLFdBQUEzSSxTQUFBLFFDSkE2SixRQUNBQyxPQUFBLFVBQ0E4QixRQUFBLHFCQUFBekMsb0JBRUFBLG1CQUFBbkosU0FBQSxRQUFBLFdDSkE2SixRQUNBQyxPQUFBLFVBQ0E5RCxPQUFBQSIsImZpbGUiOiJidW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJhbmd1bGFyXG4gICAgLm1vZHVsZSgnYWhOdXRzJylcbiAgICAuY29udHJvbGxlcignYVByb2R1Y3RDb250cm9sbGVyJywgYVByb2R1Y3RDb250cm9sbGVyKTtcblxuYVByb2R1Y3RDb250cm9sbGVyLiRpbmplY3QgPSBbJyRsb2cnLCAnJHJvdXRlUGFyYW1zJywgJyRsb2NhdGlvbicsICdhUHJvZHVjdCddO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIGFQcm9kdWN0Q29udHJvbGxlcigkbG9nLCAkcm91dGVQYXJhbXMsICRsb2NhdGlvbiwgYVByb2R1Y3QpIHtcblxuXHQvL2RlZmluZSB2aWV3IG1vZGVsIHZhcmlhYmxlXG5cdHZhciB2bSA9IHRoaXM7XG5cdHZtLnByb2R1Y3QgPSBhUHJvZHVjdDtcblx0Ly92bS5wcmRjdElkID0gJHJvdXRlUGFyYW1zLnByZGN0SWQ7XG5cblx0Ly8kbG9nLmluZm8oJ2luIHRoZSBQcm9kdWN0IGNvbnRyb2xsZXInLCB2bS5wcmRjdElkKTtcdC8vVE9ETzogVEFLRSBUSElTIE9VVCBMQVRFUlxuXG5cdHZtLnJldHVybkhvbWUgPSBmdW5jdGlvbigpIHtcblx0XHQkbG9jYXRpb24ucGF0aCgnLycpO1xuXHR9O1xufSIsImFuZ3VsYXJcbiAgICAubW9kdWxlKCdhaE51dHMnKVxuICAgIC5jb250cm9sbGVyKCdhY2NvdW50c0NvbnRyb2xsZXInLCBhY2NvdW50c0NvbnRyb2xsZXIpO1xuXG5hY2NvdW50c0NvbnRyb2xsZXIuJGluamVjdCA9IFsnJGxvZycsICckcm91dGVQYXJhbXMnLCAnJGxvY2F0aW9uJ107XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gYWNjb3VudHNDb250cm9sbGVyKCRsb2csICRyb3V0ZVBhcmFtcywgJGxvY2F0aW9uKSB7XG5cblx0Ly9kZWZpbmUgdmlldyBtb2RlbCB2YXJpYWJsZVxuXHR2YXIgdm0gPSB0aGlzO1xuXG5cdC8vZGVmaW5lIHZpZXcgbW9kZWwgdmFyaWFibGVcblx0dm0ucmVnaXN0ZXJlZFVzZXIgPSBmYWxzZTtcdC8vZGVmYXVsdCB0byBmYWxzZVxuXHR2bS5mb3Jnb3RQYXNzd29yZCA9IGZhbHNlO1x0Ly9kZWZhdWx0IHRvIGZhbHNlXG5cblx0Ly9ub3RpZnkgdXMgb2YgdGhlIGxvY2F0aW9uXG5cdCRsb2cuaW5mbygnaW4gdGhlIGFjY291bnRzIGNvbnRyb2xsZXInKTtcdC8vVE9ETzogVEFLRSBUSElTIE9VVCBMQVRFUlxuXG5cdC8vY2hlY2sgdGhlIHBhcmFtc1xuXHRmdW5jdGlvbiB1c2VyQ2hlY2sodXNlcklkKSB7XG5cblx0XHQvL2NoZWNrIHRoZSBjcmVkZW50aWFsc1xuXHRcdGlmKHVzZXJJZCA9PSAnQ3JlYXRlUHJvZmlsZScgfHwgdXNlcklkID09ICdGb3Jnb3RQYXNzd29yZCcpIHtcblxuXHRcdFx0Ly9pZiBpdCdzIGp1c3QgYSBmb3Jnb3R0ZW4gcGFzc3dvcmQgZ28gdGhlcmVcblx0XHRcdGlmKHVzZXJJZCA9PSAnRm9yZ290UGFzc3dvcmQnKSB2bS5mb3Jnb3RQYXNzd29yZCA9IHRydWU7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvL2lmIHRoZXkgYXJlIG5vdCBjcmVhdGluZyBhIG5ldyBwcm9maWxlLCBjaGVjayBjcmVkZW50aWFsc1xuXHRcdFx0dm0ucmVnaXN0ZXJlZFVzZXIgPSB0cnVlO1xuXG5cdFx0fTtcblxuXHR9O1xuXG5cdHVzZXJDaGVjaygkcm91dGVQYXJhbXMucGFyYW0pO1xufSIsImFuZ3VsYXJcbiAgICAubW9kdWxlKCdhaE51dHMnKVxuICAgIC5jb250cm9sbGVyKCdhbGxQcm9kdWN0c0NvbnRyb2xsZXInLCBhbGxQcm9kdWN0c0NvbnRyb2xsZXIpO1xuXG5hbGxQcm9kdWN0c0NvbnRyb2xsZXIuJGluamVjdCA9IFsnJGxvZycsICckcm91dGVQYXJhbXMnLCAnJGxvY2F0aW9uJywgJ3Byb2R1Y3RMaXN0J107XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gYWxsUHJvZHVjdHNDb250cm9sbGVyKCRsb2csICRyb3V0ZVBhcmFtcywgJGxvY2F0aW9uLCBwcm9kdWN0TGlzdCkge1xuXG5cdC8vZGVmaW5lIHZpZXcgbW9kZWwgdmFyaWFibGVcblx0dmFyIHZtID0gdGhpcztcblx0dm0uYWxsUHJvZHVjdHMgPSBwcm9kdWN0TGlzdDtcblx0XG5cdGlmKCRyb3V0ZVBhcmFtcy5maWx0ZXIgIT0gdW5kZWZpbmVkKSB2bS5zZWxlY3RlZFByb2R1Y3RzID0gJHJvdXRlUGFyYW1zLmZpbHRlcjtcblxuXHQvLyRsb2cuaW5mbygnaW4gdGhlIGFsbCBQcm9kdWN0cyBjb250cm9sbGVyJywgJHJvdXRlUGFyYW1zKTtcdC8vVE9ETzogVEFLRSBUSElTIE9VVCBMQVRFUlxuXHQvLyRsb2cuaW5mbygnZ290IHRoaXMgcHJkdWN0IGxpc3QnLCBwcm9kdWN0TGlzdCk7XG5cblx0Ly9zb21ldGhpbmdcblx0dm0uc2VsZWN0QVByb3VjdCA9IGZ1bmN0aW9uKHByZGN0Q29kZSkge1xuXHRcdHZhciBwYXRoID0gJy9wcm9kdWN0LycgKyBwcmRjdENvZGU7XG5cblx0XHQkbG9jYXRpb24ucGF0aChwYXRoKS5zZWFyY2goJ2ZpbHRlcicsIG51bGwpO1xuXHR9O1xuXG59IiwiYW5ndWxhclxuICAgIC5tb2R1bGUoJ2FoTnV0cycpXG4gICAgLmNvbnRyb2xsZXIoJ2NhcnRDb250cm9sbGVyJywgY2FydENvbnRyb2xsZXIpO1xuXG5jYXJ0Q29udHJvbGxlci4kaW5qZWN0ID0gWyckbG9nJywgJyRyb3V0ZVBhcmFtcycsICckbG9jYXRpb24nLCAnc2hvcHBpbmdDYXJ0J107XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gY2FydENvbnRyb2xsZXIoJGxvZywgJHJvdXRlUGFyYW1zLCAkbG9jYXRpb24sIHNob3BwaW5nQ2FydCkge1xuXG5cdC8vZGVmaW5lIHZpZXcgbW9kZWwgdmFyaWFibGVcblx0dmFyIHZtID0gdGhpcztcblx0dm0uY2FydCA9IHNob3BwaW5nQ2FydDtcblxuXHQkbG9nLmluZm8oJ2luIHRoZSBjYXJ0IGNvbnRyb2xsZXInKTtcdC8vVE9ETzogVEFLRSBUSElTIE9VVCBMQVRFUlxuXG5cbn0iLCJhbmd1bGFyXG4gICAgLm1vZHVsZSgnYWhOdXRzJylcbiAgICAuY29udHJvbGxlcignY2hlY2tvdXRDb250cm9sbGVyJywgY2hlY2tvdXRDb250cm9sbGVyKTtcblxuY2hlY2tvdXRDb250cm9sbGVyLiRpbmplY3QgPSBbJyRsb2cnLCAnJHJvdXRlUGFyYW1zJywgJyRsb2NhdGlvbicsICdzcXVhcmVDcmVkcyddO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIGNoZWNrb3V0Q29udHJvbGxlcigkbG9nLCAkcm91dGVQYXJhbXMsICRsb2NhdGlvbiwgc3F1YXJlQ3JlZHMpIHtcblxuXHQvL2RlZmluZSB2aWV3IG1vZGVsIHZhcmlhYmxlXG5cdHZhciB2bSA9IHRoaXM7XG5cdHZtLnNxdWFyZUNyZWRzID0gc3F1YXJlQ3JlZHM7XG5cblx0JGxvZy5pbmZvKCdpbiB0aGUgY2hlY2tvdXQgY29udHJvbGxlcicpO1x0Ly9UT0RPOiBUQUtFIFRISVMgT1VUIExBVEVSXG5cblx0dm0uYmFja0J0biA9IGZ1bmN0aW9uKCkgeyAkbG9jYXRpb24ucGF0aCgnL2NhcnQnKTsgfVxuXHR2bS5zdWJtaXRPcmRlciA9IGZ1bmN0aW9uKCkgeyAkbG9jYXRpb24ucGF0aCgnL29yZGVyLWNvbmZpcm1hdGlvbi8nICsgXCJURVNUSU5HXCIpOyB9XG59IiwiYW5ndWxhclxuICAgIC5tb2R1bGUoJ2FoTnV0cycpXG4gICAgLmNvbnRyb2xsZXIoJ2ludGVybmFsQWN0dHNDb250cm9sbGVyJywgaW50ZXJuYWxBY3R0c0NvbnRyb2xsZXIpO1xuXG5pbnRlcm5hbEFjdHRzQ29udHJvbGxlci4kaW5qZWN0ID0gWyckbG9nJywgJyRyb3V0ZVBhcmFtcycsICckbG9jYXRpb24nLCAnZGF0YVNlcnZpY2VzJ107XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gaW50ZXJuYWxBY3R0c0NvbnRyb2xsZXIoJGxvZywgJHJvdXRlUGFyYW1zLCAkbG9jYXRpb24sIGRhdGFTZXJ2aWNlcykge1xuXG5cdC8vZGVmaW5lIHZpZXcgbW9kZWwgdmFyaWFibGVcblx0dmFyIHZtID0gdGhpcztcblx0dmFyIGRhdGEgPSBkYXRhU2VydmljZXM7XG5cblx0Ly9ub3RpZnkgdXMgb2YgdGhlIGxvY2F0aW9uXG5cdCRsb2cuaW5mbygnaW4gdGhlIGludGVybmFsIGNvbnRyb2xsZXInKTtcdC8vVE9ETzogVEFLRSBUSElTIE9VVCBMQVRFUlxuXG5cdHZtLnN1Ym1pdCA9IGZ1bmN0aW9uKCkge1xuXHRcdGNvbnNvbGUubG9nKCdzdWJtaXR0aW5nJyk7XG5cdFx0ZGF0YS5wb3N0KCcvYXBpL3NoaWZ0RWFybmluZ3MnLCB7XCJ0ZXN0XCI6XCJ0ZXN0XCJ9KVxuXHRcdC50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG5cdFx0XHRjb25zb2xlLmxvZygnZ290IHRoaXMgcmVzcG9uc2UnLCByZXNwb25zZSk7XG5cdFx0fSk7XG5cdH1cbn1cdCIsImFuZ3VsYXJcbiAgICAubW9kdWxlKCdhaE51dHMnKVxuICAgIC5jb250cm9sbGVyKCdsYW5kaW5nQ29udHJvbGxlcicsIGxhbmRpbmdDb250cm9sbGVyKTtcblxubGFuZGluZ0NvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywnJGxvZycsICckcm91dGVQYXJhbXMnLCAnJGxvY2F0aW9uJywgJ2RhdGFTZXJ2aWNlcyddO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIGxhbmRpbmdDb250cm9sbGVyKCRzY29wZSwgJGxvZywgJHJvdXRlUGFyYW1zLCAkbG9jYXRpb24sIGRhdGFTZXJ2aWNlcykge1xuXG5cdC8vZGVmaW5lIHZpZXcgbW9kZWwgdmFyaWFibGVcblx0dmFyIHZtID0gdGhpcztcblx0dmFyIGRhdGEgPSBkYXRhU2VydmljZXM7XG5cblx0Ly8kbG9nLmluZm8oJ2luIHRoZSBsYW5kaW5nIGNvbnRyb2xsZXInKTtcdC8vVE9ETzogVEFLRSBUSElTIE9VVCBMQVRFUlxuXG5cdC8vZGVmaW5lIGxvY2FsIGZ1bmN0aW9uc1xuXG5cdC8vcnVuIHRoZSB0ZXN0XG5cblxufSIsImFuZ3VsYXJcbiAgICAubW9kdWxlKCdhaE51dHMnKVxuICAgIC5jb250cm9sbGVyKCdsb2NhdGlvbnNDb250cm9sbGVyJywgbG9jYXRpb25zQ29udHJvbGxlcik7XG5cbmxvY2F0aW9uc0NvbnRyb2xsZXIuJGluamVjdCA9IFsnJGxvZycsICckcm91dGVQYXJhbXMnLCAnJGxvY2F0aW9uJ107XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gbG9jYXRpb25zQ29udHJvbGxlcigkbG9nLCAkcm91dGVQYXJhbXMsICRsb2NhdGlvbikge1xuXG5cdC8vZGVmaW5lIHZpZXcgbW9kZWwgdmFyaWFibGVcblx0dmFyIHZtID0gdGhpcztcblxuXHQkbG9nLmluZm8oJ2luIHRoZSBsb2NhdGlvbnMgY29udHJvbGxlcicpO1x0Ly9UT0RPOiBUQUtFIFRISVMgT1VUIExBVEVSXG59IiwiYW5ndWxhclxuICAgIC5tb2R1bGUoJ2FoTnV0cycpXG4gICAgLmNvbnRyb2xsZXIoJ2xvZ2luQ29udHJvbGxlcicsIGxvZ2luQ29udHJvbGxlcik7XG5cbmxvZ2luQ29udHJvbGxlci4kaW5qZWN0ID0gWyckbG9nJywgJyRyb3V0ZVBhcmFtcycsICckbG9jYXRpb24nLCAnZGF0YVNlcnZpY2VzJ107XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gbG9naW5Db250cm9sbGVyKCRsb2csICRyb3V0ZVBhcmFtcywgJGxvY2F0aW9uLCBkYXRhU2VydmljZXMpIHtcblxuXHQvL2RlZmluZSB2aWV3IG1vZGVsIHZhcmlhYmxlXG5cdHZhciB2bSA9IHRoaXM7XG5cdHZhciBkYXRhID0gZGF0YVNlcnZpY2VzO1xuXG5cdCRsb2cuaW5mbygnaW4gdGhlIGxvZ2luIGNvbnRyb2xsZXInKTtcdC8vVE9ETzogVEFLRSBUSElTIE9VVCBMQVRFUlxuXG5cdC8vZGVmaW5lIHZpZXcgbW9kZWwgdmFyaWFibGVzXG5cdHZtLmVtYWlsID0gJyc7XG5cdHZtLnBhc3N3b3JkID0gJyc7XG5cblx0Ly9kZWZpbmUgdm0gZnVuY3Rpb25cblx0dm0ubG9naW4gPSBmdW5jdGlvbigpIHtcblxuXHRcdC8vdXBvbiBsb2dpbiwgYXJlIHRoZSBjcmVkZW50YWlscyBnb29kXG5cdFx0ZGF0YS5wb3N0KCcvYXBpL2F1dGhlbnRpY2F0ZScsIHsgZW1haWw6IHZtLmVtYWlsLCBwYXNzOiB2bS5wYXNzd29yZCB9LCcnKVxuXHRcdC50aGVuKGZ1bmN0aW9uKHRva2VuKSB7XG5cdFx0XHRcblx0XHRcdHZhciBwYXRoID0gJyMvdGVhbU1lbWJlci8nICsgdG9rZW47XG5cblx0XHRcdC8vc2hvdyB3aGF0IHJldHVybmVkXG5cdFx0XHQkbG9nLmluZm8oJ2dvdCB0aGlzIHRva2VuIGJhY2snLCBwYXRoKTtcblxuXHRcdFx0JGxvY2F0aW9uLnBhdGgoJy8nKTtcdC8vVE9ETzogV0hZIERPRVNOJ1QgVEhJUyBXT1JLP1xuXG5cdFx0fSk7XG5cdFx0XG5cdH07XG59IiwiYW5ndWxhclxuICAgIC5tb2R1bGUoJ2FoTnV0cycpXG4gICAgLmNvbnRyb2xsZXIoJ21haW5Db250cm9sbGVyJywgbWFpbkNvbnRyb2xsZXIpO1xuXG5tYWluQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCckbG9nJywgJyRyb3V0ZVBhcmFtcycsICckbG9jYXRpb24nXTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBtYWluQ29udHJvbGxlcigkc2NvcGUsICRsb2csICRyb3V0ZVBhcmFtcywgJGxvY2F0aW9uKSB7XG5cblx0Ly9kZWZpbmUgdmlldyBtb2RlbCB2YXJpYWJsZVxuXHR2YXIgdm0gPSB0aGlzO1xuXHRcblx0JHNjb3BlLnRlYW1NZW1iZXIgPSBmYWxzZTtcblxuXHQvLyRsb2cuaW5mbygnaW4gdGhlIG1haW4gY29udHJvbGxlcicpO1x0Ly9UT0RPOiBUQUtFIFRISVMgT1VUIExBVEVSXG59IiwiYW5ndWxhclxuICAgIC5tb2R1bGUoJ2FoTnV0cycpXG4gICAgLmNvbnRyb2xsZXIoJ29yZGVyQ29uZmlybWF0aW9uQ29udHJvbGxlcicsIG9yZGVyQ29uZmlybWF0aW9uQ29udHJvbGxlcik7XG5cbm9yZGVyQ29uZmlybWF0aW9uQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCckbG9nJywgJyRyb3V0ZVBhcmFtcycsICckbG9jYXRpb24nXTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBvcmRlckNvbmZpcm1hdGlvbkNvbnRyb2xsZXIoJHNjb3BlLCAkbG9nLCAkcm91dGVQYXJhbXMsICRsb2NhdGlvbikge1xuXG5cdC8vZGVmaW5lIHZpZXcgbW9kZWwgdmFyaWFibGVcblx0dmFyIHZtID0gdGhpcztcblxuXHQkbG9nLmluZm8oJ2luIHRoZSBvcmRlciBjb25maXJtYXRpb24gY29udHJvbGxlcicpO1x0Ly9UT0RPOiBUQUtFIFRISVMgT1VUIExBVEVSXG59IiwiYW5ndWxhclxuICAgIC5tb2R1bGUoJ2FoTnV0cycpXG4gICAgLmNvbnRyb2xsZXIoJ3Byb2R1Y3RHZXR0aW5nQ29udHJvbGxlcicsIHByb2R1Y3RHZXR0aW5nQ29udHJvbGxlcik7XG5cbnByb2R1Y3RHZXR0aW5nQ29udHJvbGxlci4kaW5qZWN0ID0gWyckbG9nJywgJyRyb3V0ZVBhcmFtcycsICckbG9jYXRpb24nLCAnc2hvcHBpbmdDYXJ0J107XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gcHJvZHVjdEdldHRpbmdDb250cm9sbGVyKCRsb2csICRyb3V0ZVBhcmFtcywgJGxvY2F0aW9uLCBzaG9wcGluZ0NhcnQpIHtcblxuXHQvL2RlZmluZSB2aWV3IG1vZGVsIHZhcmlhYmxlXG5cdHZhciB2bSA9IHRoaXM7XG5cdHZtLnByb2R1Y3QgPSAkcm91dGVQYXJhbXMuaXRlbTtcblx0dm0uY2FydCA9IHNob3BwaW5nQ2FydDtcblx0dm0uYWNxdWlzaXRpb25TdGVwcyA9IHtcblx0XHR6aXBBbmREYXRlU2VsZWN0ZWQ6IGZhbHNlLFxuXHRcdHNoaXBwZWRPclBVU2VsZWN0ZWQ6IGZhbHNlLFxuXHRcdHdpbGxTaGlwcHA6IGZhbHNlLFxuXHRcdHdpbGxQVTogZmFsc2UsXG5cdFx0cHVMb2NTZWxlY3RlZDogZmFsc2UsXG5cdFx0ZGVsTXRoU2VsZWN0ZWQ6IGZhbHNlLFxuXHRcdHBpY2t1cExvY2F0aW9uOiB7fSxcblx0XHRkZWxpdmVyeU1ldGhvZDoge31cblx0fVxuXHRcblx0JGxvZy5pbmZvKCdpbiB0aGUgcHJvZHVjdCBnZXR0aW5nIGNvbnRyb2xsZXInLCB2bS5wcm9kdWN0KTtcdC8vVE9ETzogVEFLRSBUSElTIE9VVCBMQVRFUlxuXG5cdHZtLm9yZGVyID0gZnVuY3Rpb24oKSB7XG5cdFx0JGxvY2F0aW9uLnBhdGgoJy9jYXJ0Jyk7XG5cdH1cbn0iLCJhbmd1bGFyXG4gICAgLm1vZHVsZSgnYWhOdXRzJylcbiAgICAuY29udHJvbGxlcigncmVnaXN0ZXJBY2N0Q29udHJvbGxlcicsIHJlZ2lzdGVyQWNjdENvbnRyb2xsZXIpO1xuXG5yZWdpc3RlckFjY3RDb250cm9sbGVyLiRpbmplY3QgPSBbJyRsb2cnLCAnJHJvdXRlUGFyYW1zJywgJyRsb2NhdGlvbiddO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIHJlZ2lzdGVyQWNjdENvbnRyb2xsZXIoJGxvZywgJHJvdXRlUGFyYW1zLCAkbG9jYXRpb24pIHtcblxuXHQvL2RlZmluZSB2aWV3IG1vZGVsIHZhcmlhYmxlXG5cdHZhciB2bSA9IHRoaXM7XG5cblx0Y29uc29sZS5sb2coJ2luIHRoZSByZWdpc3RlckFjY3RDb250cm9sbGVyICcpO1xuXG59IiwiLyogYWhIZWFkZXIuZGlyZWN0aXZlLmpzICovXG5cbi8qKlxuKiBAZGVzYyB0b29sYmFyIGRpcmVjdGl2ZSB0aGF0IGlzIHVzZWQgb24gdGhlIG1haW4gcGFnZSBhY3Jvc3MgdGhlIGVudGlyZSBhcHAuXG4qIEBleGFtcGxlIDxkaXYgYWgtaGVhZGVyPjwvZGl2PlxuKi9cblxuYW5ndWxhclxuXHQubW9kdWxlKCdhaE51dHMnKVxuXHQuZGlyZWN0aXZlKCdhaEhlYWRlcicsIGFoSGVhZGVyKTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBhaEhlYWRlcigpIHtcblx0dmFyIGRpcmVjdGl2ZSA9IHtcblx0XHRyZXN0cmljdDogJ0FFQ00nLFxuXHRcdHRlbXBsYXRlVXJsOiAndmlld3MvZGlyZWN0aXZlcy9haC5oZWFkZXIuZGlyZWN0aXZlLmh0bScsXG5cdFx0cmVwbGFjZTogdHJ1ZSxcblx0XHRzY29wZToge30sXG5cdFx0bGluazogbGlua0Z1bmMsXG5cdFx0Y29udHJvbGxlcjogYWhIZWFkZXJDb250cm9sbGVyLFxuXHRcdGNvbnRyb2xsZXJBczogJ3ZtJyxcblx0XHRiaW5kVG9Db250cm9sbGVyOiB0cnVlXG5cdH1cblxuXHQvKiBAbmdJbmplY3QgKi9cblx0ZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsLCBhdHRyLCBjdHJsKSB7XG4gICAgfVxuXG4gICAgYWhIZWFkZXJDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsICckbG9nJywgJyRsb2NhdGlvbicsICdzaG9wcGluZ0NhcnQnXTtcbiAgICAvKiBAbmdJbmplY3QgKi9cbiAgICBmdW5jdGlvbiBhaEhlYWRlckNvbnRyb2xsZXIoJHNjb3BlLCAkbG9nLCAkbG9jYXRpb24sIHNob3BwaW5nQ2FydCkge1xuXHQgICAgdmFyIHZtID0gdGhpcztcblx0ICAgIHZtLmNhcnQgPSBzaG9wcGluZ0NhcnQ7XG5cblx0ICAgIC8vJGxvZy5pbmZvKCdpbiB0aGUgaGVhZGVyIGRpcmVjdGl2ZScpO1xuXG5cdCAgICAvL2RlZmluZSB2aWV3bW9kZWwgZnVuY3Rpb25zXG5cdCAgICB2bS5uYXZibnQgPSBmdW5jdGlvbihidXR0b24pIHtcblxuXHQgICAgXHQvL3RlbGwgdXMgd2hpY2ggYnV0dG9uIHdhcyBjbGlja2VkXG5cdCAgICBcdCRsb2cuaW5mbygnY2xpY2tlZCcsIGJ1dHRvbik7XG5cblx0ICAgIFx0Ly90aGVuIHJlZGlyZWN0IHRoZXJlLCBpZiBub3QgdGhlIG1lbnUgYnV0dG9uXG5cdCAgICBcdGlmKGJ1dHRvbiAhPSAnbWVudScpIHtcblx0ICAgIFx0XHRcblx0ICAgIFx0XHQkbG9jYXRpb24ucGF0aCgnLycgKyBidXR0b24pO1xuXHQgICAgXHR9O1xuXHQgICAgXHRcblx0ICAgIH07XG5cblx0fVxuXG5cdHJldHVybiAgZGlyZWN0aXZlO1xufSIsIi8qIGFoRm9vdGVyLmRpcmVjdGl2ZS5qcyAqL1xuXG4vKipcbiogQGRlc2MgdG9vbGJhciBkaXJlY3RpdmUgdGhhdCBpcyB1c2VkIG9uIHRoZSBtYWluIHBhZ2UgYWNyb3NzIHRoZSBlbnRpcmUgYXBwLlxuKiBAZXhhbXBsZSA8ZGl2IGFoLWZvb3Rlcj48L2Rpdj5cbiovXG5cbmFuZ3VsYXJcblx0Lm1vZHVsZSgnYWhOdXRzJylcblx0LmRpcmVjdGl2ZSgnYWhGb290ZXInLCBhaEZvb3Rlcik7XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gYWhGb290ZXIoKSB7XG5cdHZhciBkaXJlY3RpdmUgPSB7XG5cdFx0cmVzdHJpY3Q6ICdBRUNNJyxcblx0XHR0ZW1wbGF0ZVVybDogJ3ZpZXdzL2RpcmVjdGl2ZXMvYWguZm9vdGVyLmRpcmVjdGl2ZS5odG0nLFxuXHRcdHJlcGxhY2U6IHRydWUsXG5cdFx0c2NvcGU6IHt9LFxuXHRcdGxpbms6IGxpbmtGdW5jLFxuXHRcdGNvbnRyb2xsZXI6IGFoRm9vdGVyQ29udHJvbGxlcixcblx0XHRjb250cm9sbGVyQXM6ICd2bScsXG5cdFx0YmluZFRvQ29udHJvbGxlcjogdHJ1ZVxuXHR9XG5cblx0LyogQG5nSW5qZWN0ICovXG5cdGZ1bmN0aW9uIGxpbmtGdW5jKHNjb3BlLCBlbCwgYXR0ciwgY3RybCkge1xuICAgIH1cblxuICAgIGFoRm9vdGVyQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGxvZyddO1xuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIGFoRm9vdGVyQ29udHJvbGxlcigkc2NvcGUsICRsb2cpIHtcblx0ICAgIHZhciB2bSA9IHRoaXM7XG5cblx0ICAgIC8vJGxvZy5pbmZvKCdpbiB0aGUgaGVhZGVyIGRpcmVjdGl2ZScpO1xuXG5cdH1cblxuXHRyZXR1cm4gIGRpcmVjdGl2ZTtcbn0iLCIvKiBjYXJ0SXRlbXNMaXN0LmRpcmVjdGl2ZS5qcyAqL1xuXG4vKipcbiogQGRlc2MgdG9vbGJhciBkaXJlY3RpdmUgdGhhdCBpcyB1c2VkIG9uIHRoZSBtYWluIHBhZ2UgYWNyb3NzIHRoZSBlbnRpcmUgYXBwLlxuKiBAZXhhbXBsZSA8ZGl2IGNhcnQtaXRlbXMtbGlzdD48L2Rpdj5cbiovXG5cbmFuZ3VsYXJcblx0Lm1vZHVsZSgnYWhOdXRzJylcblx0LmRpcmVjdGl2ZSgnY2FydEl0ZW1zTGlzdCcsIGNhcnRJdGVtc0xpc3QpO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIGNhcnRJdGVtc0xpc3QoKSB7XG5cdHZhciBkaXJlY3RpdmUgPSB7XG5cdFx0cmVzdHJpY3Q6ICdBRUNNJyxcblx0XHR0ZW1wbGF0ZVVybDogJ3ZpZXdzL2RpcmVjdGl2ZXMvY2FydEl0ZW1zTGlzdC5kaXJlY3RpdmUuaHRtJyxcblx0XHRyZXBsYWNlOiB0cnVlLFxuXHRcdHNjb3BlOiB7XG5cdFx0XHRjYXJ0SXRlbXM6ICc9J1xuXHRcdH0sXG5cdFx0bGluazogbGlua0Z1bmMsXG5cdFx0Y29udHJvbGxlcjogY2FydEl0ZW1zTGlzdENvbnRyb2xsZXIsXG5cdFx0Y29udHJvbGxlckFzOiAndm0nLFxuXHRcdGJpbmRUb0NvbnRyb2xsZXI6IHRydWVcblx0fVxuXG5cdC8qIEBuZ0luamVjdCAqL1xuXHRmdW5jdGlvbiBsaW5rRnVuYyhzY29wZSwgZWwsIGF0dHIsIGN0cmwpIHtcbiAgICB9XG5cbiAgICBjYXJ0SXRlbXNMaXN0Q29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGxvZyddO1xuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIGNhcnRJdGVtc0xpc3RDb250cm9sbGVyKCRzY29wZSwgJGxvZykge1xuXHQgICAgdmFyIHZtID0gdGhpcztcblxuXHQgICAgLy8kbG9nLmluZm8oJ2luIHRoZSBoZWFkZXIgZGlyZWN0aXZlJyk7XG5cblx0fVxuXG5cdHJldHVybiAgZGlyZWN0aXZlO1xufSIsIi8qIGNhcnROYXZpZ2F0aW9uLmRpcmVjdGl2ZS5qcyAqL1xuXG4vKipcbiogQGRlc2MgdG9vbGJhciBkaXJlY3RpdmUgdGhhdCBpcyB1c2VkIG9uIHRoZSBtYWluIHBhZ2UgYWNyb3NzIHRoZSBlbnRpcmUgYXBwLlxuKiBAZXhhbXBsZSA8ZGl2IGNhcnQtbmF2aWdhdGlvbj48L2Rpdj5cbiovXG5cbmFuZ3VsYXJcblx0Lm1vZHVsZSgnYWhOdXRzJylcblx0LmRpcmVjdGl2ZSgnY2FydE5hdmlnYXRpb24nLCBjYXJ0TmF2aWdhdGlvbik7XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gY2FydE5hdmlnYXRpb24oKSB7XG5cdHZhciBkaXJlY3RpdmUgPSB7XG5cdFx0cmVzdHJpY3Q6ICdBRUNNJyxcblx0XHR0ZW1wbGF0ZVVybDogJ3ZpZXdzL2RpcmVjdGl2ZXMvY2FydE5hdmlnYXRpb24uZGlyZWN0aXZlLmh0bScsXG5cdFx0cmVwbGFjZTogdHJ1ZSxcblx0XHRzY29wZToge30sXG5cdFx0bGluazogbGlua0Z1bmMsXG5cdFx0Y29udHJvbGxlcjogY2FydE5hdmlnYXRpb25Db250cm9sbGVyLFxuXHRcdGNvbnRyb2xsZXJBczogJ3ZtJyxcblx0XHRiaW5kVG9Db250cm9sbGVyOiB0cnVlXG5cdH1cblxuXHQvKiBAbmdJbmplY3QgKi9cblx0ZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsLCBhdHRyLCBjdHJsKSB7XG4gICAgfVxuXG4gICAgY2FydE5hdmlnYXRpb25Db250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsICckbG9nJywgJyRsb2NhdGlvbiddO1xuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIGNhcnROYXZpZ2F0aW9uQ29udHJvbGxlcigkc2NvcGUsICRsb2csICRsb2NhdGlvbikge1xuXHQgICAgdmFyIHZtID0gdGhpcztcblxuXHQgICAgJGxvZy5pbmZvKCdpbiB0aGUgY2FydCBuYXZpZ2F0aW9uIGRpcmVjdGl2ZScpO1xuXG5cdCAgICB2bS5zaG9wTW9yZSA9IGZ1bmN0aW9uKCkge1xuXHQgICAgXHQkbG9jYXRpb24ucGF0aCgnL2FsbC1wcm9kdWN0cycpO1xuXHQgICAgfVxuXHQgICAgdm0uY2hlY2tvdXQgPSBmdW5jdGlvbigpIHtcblx0ICAgIFx0JGxvY2F0aW9uLnBhdGgoJy9jaGVja291dCcpO1xuXHQgICAgfVxuXHR9XG5cblx0cmV0dXJuICBkaXJlY3RpdmU7XG59IiwiLyogY2FydFN1bW1hcnkuZGlyZWN0aXZlLmpzICovXG5cbi8qKlxuKiBAZGVzYyB0b29sYmFyIGRpcmVjdGl2ZSB0aGF0IGlzIHVzZWQgb24gdGhlIG1haW4gcGFnZSBhY3Jvc3MgdGhlIGVudGlyZSBhcHAuXG4qIEBleGFtcGxlIDxkaXYgY2FydC1zdW1tYXJ5PjwvZGl2PlxuKi9cblxuYW5ndWxhclxuXHQubW9kdWxlKCdhaE51dHMnKVxuXHQuZGlyZWN0aXZlKCdjYXJ0U3VtbWFyeScsIGNhcnRTdW1tYXJ5KTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBjYXJ0U3VtbWFyeSgpIHtcblx0dmFyIGRpcmVjdGl2ZSA9IHtcblx0XHRyZXN0cmljdDogJ0FFQ00nLFxuXHRcdHRlbXBsYXRlVXJsOiAndmlld3MvZGlyZWN0aXZlcy9jYXJ0U3VtbWFyeS5kaXJlY3RpdmUuaHRtJyxcblx0XHRyZXBsYWNlOiB0cnVlLFxuXHRcdHNjb3BlOiB7XG5cdFx0XHRub0l0ZW1zOiBcIj1cIixcblx0XHRcdHN1YnRvdGFsOiBcIj1cIlxuXHRcdH0sXG5cdFx0bGluazogbGlua0Z1bmMsXG5cdFx0Y29udHJvbGxlcjogY2FydFN1bW1hcnlDb250cm9sbGVyLFxuXHRcdGNvbnRyb2xsZXJBczogJ3ZtJyxcblx0XHRiaW5kVG9Db250cm9sbGVyOiB0cnVlXG5cdH1cblxuXHQvKiBAbmdJbmplY3QgKi9cblx0ZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsLCBhdHRyLCBjdHJsKSB7XG4gICAgfVxuXG4gICAgY2FydFN1bW1hcnlDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsICckbG9nJ107XG4gICAgLyogQG5nSW5qZWN0ICovXG4gICAgZnVuY3Rpb24gY2FydFN1bW1hcnlDb250cm9sbGVyKCRzY29wZSwgJGxvZykge1xuXHQgICAgdmFyIHZtID0gdGhpcztcblxuXHQgICAgJGxvZy5pbmZvKCdpbiB0aGUgY2FydCBzdW1tYXJ5IGRpcmVjdGl2ZScpO1xuXG5cdH1cblxuXHRyZXR1cm4gIGRpcmVjdGl2ZTtcbn0iLCIvKiBjaGVja291dEJpbGxpbmcuZGlyZWN0aXZlLmpzICovXG5cbi8qKlxuKiBAZGVzYyB0b29sYmFyIGRpcmVjdGl2ZSB0aGF0IGlzIHVzZWQgb24gdGhlIG1haW4gcGFnZSBhY3Jvc3MgdGhlIGVudGlyZSBhcHAuXG4qIEBleGFtcGxlIDxkaXYgY2hlY2tvdXQtYmlsbGluZz48L2Rpdj5cbiovXG5cbmFuZ3VsYXJcblx0Lm1vZHVsZSgnYWhOdXRzJylcblx0LmRpcmVjdGl2ZSgnY2hlY2tvdXRCaWxsaW5nJywgY2hlY2tvdXRCaWxsaW5nKTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBjaGVja291dEJpbGxpbmcoKSB7XG5cdHZhciBkaXJlY3RpdmUgPSB7XG5cdFx0cmVzdHJpY3Q6ICdBRUNNJyxcblx0XHR0ZW1wbGF0ZVVybDogJ3ZpZXdzL2RpcmVjdGl2ZXMvY2hlY2tvdXRCaWxsaW5nLmRpcmVjdGl2ZS5odG0nLFxuXHRcdHJlcGxhY2U6IHRydWUsXG5cdFx0c2NvcGU6IHt9LFxuXHRcdGxpbms6IGxpbmtGdW5jLFxuXHRcdGNvbnRyb2xsZXI6IGNoZWNrb3V0QmlsbGluZ0NvbnRyb2xsZXIsXG5cdFx0Y29udHJvbGxlckFzOiAndm0nLFxuXHRcdGJpbmRUb0NvbnRyb2xsZXI6IHRydWVcblx0fVxuXG5cdC8qIEBuZ0luamVjdCAqL1xuXHRmdW5jdGlvbiBsaW5rRnVuYyhzY29wZSwgZWwsIGF0dHIsIGN0cmwpIHtcbiAgICB9XG5cbiAgICBjaGVja291dEJpbGxpbmdDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsICckbG9nJ107XG4gICAgLyogQG5nSW5qZWN0ICovXG4gICAgZnVuY3Rpb24gY2hlY2tvdXRCaWxsaW5nQ29udHJvbGxlcigkc2NvcGUsICRsb2cpIHtcblx0ICAgIHZhciB2bSA9IHRoaXM7XG5cblx0ICAgICRsb2cuaW5mbygnaW4gdGhlIGNoZWNrb3V0QmlsbGluZyBkaXJlY3RpdmUnKTtcblxuXHR9XG5cblx0cmV0dXJuICBkaXJlY3RpdmU7XG59IiwiLyogY2hlY2tvdXRGb2xsb3d1cC5kaXJlY3RpdmUuanMgKi9cblxuLyoqXG4qIEBkZXNjIHRvb2xiYXIgZGlyZWN0aXZlIHRoYXQgaXMgdXNlZCBvbiB0aGUgbWFpbiBwYWdlIGFjcm9zcyB0aGUgZW50aXJlIGFwcC5cbiogQGV4YW1wbGUgPGRpdiBjaGVja291dC1mb2xsb3d1cD48L2Rpdj5cbiovXG5cbmFuZ3VsYXJcblx0Lm1vZHVsZSgnYWhOdXRzJylcblx0LmRpcmVjdGl2ZSgnY2hlY2tvdXRGb2xsb3d1cCcsIGNoZWNrb3V0Rm9sbG93dXApO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIGNoZWNrb3V0Rm9sbG93dXAoKSB7XG5cdHZhciBkaXJlY3RpdmUgPSB7XG5cdFx0cmVzdHJpY3Q6ICdBRUNNJyxcblx0XHR0ZW1wbGF0ZVVybDogJ3ZpZXdzL2RpcmVjdGl2ZXMvY2hlY2tvdXRGb2xsb3d1cC5kaXJlY3RpdmUuaHRtJyxcblx0XHRyZXBsYWNlOiB0cnVlLFxuXHRcdHNjb3BlOiB7fSxcblx0XHRsaW5rOiBsaW5rRnVuYyxcblx0XHRjb250cm9sbGVyOiBjaGVja291dEZvbGxvd3VwQ29udHJvbGxlcixcblx0XHRjb250cm9sbGVyQXM6ICd2bScsXG5cdFx0YmluZFRvQ29udHJvbGxlcjogdHJ1ZVxuXHR9XG5cblx0LyogQG5nSW5qZWN0ICovXG5cdGZ1bmN0aW9uIGxpbmtGdW5jKHNjb3BlLCBlbCwgYXR0ciwgY3RybCkge1xuICAgIH1cblxuICAgIGNoZWNrb3V0Rm9sbG93dXBDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsICckbG9nJ107XG4gICAgLyogQG5nSW5qZWN0ICovXG4gICAgZnVuY3Rpb24gY2hlY2tvdXRGb2xsb3d1cENvbnRyb2xsZXIoJHNjb3BlLCAkbG9nKSB7XG5cdCAgICB2YXIgdm0gPSB0aGlzO1xuXG5cdCAgICAkbG9nLmluZm8oJ2luIHRoZSBjaGVja291dEZvbGxvd3VwQ29udHJvbGxlciBkaXJlY3RpdmUnKTtcblxuXHR9XG5cblx0cmV0dXJuICBkaXJlY3RpdmU7XG59IiwiLyogY2hlY2tvdXRQYXltZW50LmRpcmVjdGl2ZS5qcyAqL1xuXG4vKipcbiogQGRlc2MgdG9vbGJhciBkaXJlY3RpdmUgdGhhdCBpcyB1c2VkIG9uIHRoZSBtYWluIHBhZ2UgYWNyb3NzIHRoZSBlbnRpcmUgYXBwLlxuKiBAZXhhbXBsZSA8ZGl2IGNoZWNrb3V0LXBheW1lbnQ+PC9kaXY+XG4qL1xuXG5hbmd1bGFyXG5cdC5tb2R1bGUoJ2FoTnV0cycpXG5cdC5kaXJlY3RpdmUoJ2NoZWNrb3V0UGF5bWVudCcsIGNoZWNrb3V0UGF5bWVudCk7XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gY2hlY2tvdXRQYXltZW50KCkge1xuXHR2YXIgZGlyZWN0aXZlID0ge1xuXHRcdHJlc3RyaWN0OiAnQUVDTScsXG5cdFx0dGVtcGxhdGVVcmw6ICd2aWV3cy9kaXJlY3RpdmVzL2NoZWNrb3V0UGF5bWVudC5kaXJlY3RpdmUuaHRtJyxcblx0XHRyZXBsYWNlOiB0cnVlLFxuXHRcdHNjb3BlOiB7XG5cdFx0XHRzcXVhcmVDcmVkczogJz0nXG5cdFx0fSxcblx0XHRsaW5rOiBsaW5rRnVuYyxcblx0XHRjb250cm9sbGVyOiBjaGVja291dFBheW1lbnRDb250cm9sbGVyLFxuXHRcdGNvbnRyb2xsZXJBczogJ3ZtJyxcblx0XHRiaW5kVG9Db250cm9sbGVyOiB0cnVlXG5cdH1cblxuXHQvKiBAbmdJbmplY3QgKi9cblx0ZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsLCBhdHRyLCBjdHJsKSB7XG4gICAgfVxuXG4gICAgY2hlY2tvdXRQYXltZW50Q29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGxvZycsICdkYXRhU2VydmljZXMnXTtcbiAgICAvKiBAbmdJbmplY3QgKi9cbiAgICBmdW5jdGlvbiBjaGVja291dFBheW1lbnRDb250cm9sbGVyKCRzY29wZSwgJGxvZywgZGF0YVNlcnZpY2VzKSB7XG5cdCAgICB2YXIgdm0gPSB0aGlzO1xuXHQgICAgdm0uZGF0YSA9IGRhdGFTZXJ2aWNlcztcblxuXHQgICAgdmFyIGFwcGxpY2F0aW9uSWQgPSAnUkVQTEFDRV9NRSc7IC8vIDwtLSBBZGQgeW91ciBhcHBsaWNhdGlvbidzIElEIGhlcmVcblx0XHR2YXIgbG9jYXRpb25JZCA9ICdSRVBMQUNFX01FJzsgICAgLy8gPC0tIEZvciBBcHBsZSBQYXksIHNldCB5b3VyIGxvY2F0aW9uIElEIGhlcmVcblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGUgYXBwbGljYXRpb24gSUQgaXMgc2V0IGJlZm9yZSBjb250aW51aW5nLlxuXHRcdC8vIE5vdGU6IGNoZWNraW5nIGxvY2F0aW9uSWQgaWYgdXNpbmcgQXBwbGUgUGF5LlxuXHRcdGlmIChhcHBsaWNhdGlvbklkID09ICcnKSB7XG5cdFx0ICBhbGVydCgnWW91IG5lZWQgdG8gcHJvdmlkZSBhIHZhbHVlIGZvciB0aGUgYXBwbGljYXRpb25JZCB2YXJpYWJsZS4nKTtcblx0XHR9XG5cdCAgICAkbG9nLmluZm8oJ2luIHRoZSBjaGVja291dFBheW1lbnQgZGlyZWN0aXZlJyk7XG5cblx0ICAgIHZhciBwYXltZW50Rm9ybSA9IG5ldyBTcVBheW1lbnRGb3JtKHtcblx0XHQgICAgYXBwbGljYXRpb25JZDogYXBwbGljYXRpb25JZCxcblx0XHQgICAgbG9jYXRpb25JZDogbG9jYXRpb25JZCxcblx0XHQgICAgaW5wdXRDbGFzczogJ3NxLWlucHV0Jyxcblx0XHQgICAgaW5wdXRTdHlsZXM6IFtcblx0XHQgICAgICB7XG5cdFx0ICAgICAgICBmb250U2l6ZTogJzE1cHgnXG5cdFx0ICAgICAgfVxuXHRcdCAgICBdLFxuXHRcdCAgICAvLyBVc2VkIGZvciBjcmVkaXQgY2FyZCBwYXltZW50c1xuXHRcdCAgICBjYXJkTnVtYmVyOiB7XG5cdFx0ICAgICAgZWxlbWVudElkOiAnc3EtY2FyZC1udW1iZXInLFxuXHRcdCAgICAgIHBsYWNlaG9sZGVyOiAn4oCi4oCi4oCi4oCiIOKAouKAouKAouKAoiDigKLigKLigKLigKIg4oCi4oCi4oCi4oCiJ1xuXHRcdCAgICB9LFxuXHRcdCAgICBjdnY6IHtcblx0XHQgICAgICBlbGVtZW50SWQ6ICdzcS1jdnYnLFxuXHRcdCAgICAgIHBsYWNlaG9sZGVyOiAnQ1ZWJ1xuXHRcdCAgICB9LFxuXHRcdCAgICBleHBpcmF0aW9uRGF0ZToge1xuXHRcdCAgICAgIGVsZW1lbnRJZDogJ3NxLWV4cGlyYXRpb24tZGF0ZScsXG5cdFx0ICAgICAgcGxhY2Vob2xkZXI6ICdNTS9ZWSdcblx0XHQgICAgfSxcblx0XHQgICAgcG9zdGFsQ29kZToge1xuXHRcdCAgICAgIGVsZW1lbnRJZDogJ3NxLXBvc3RhbC1jb2RlJ1xuXHRcdCAgICB9LFxuXHRcdCAgICAvLyBVc2VkIGZvciBXZWIgQXBwbGUgUGF5IHBheW1lbnRzXG5cdFx0ICAgIGFwcGxlUGF5OiB7XG5cdFx0ICAgICAgICBlbGVtZW50SWQ6ICdzcS1hcHBsZS1wYXknXG5cdFx0ICAgIH0sXG5cdFx0ICAgIC8vIFBheW1lbnQgZm9ybSBjYWxsYmFjayBmdW5jdGlvbnNcblx0XHQgICAgY2FsbGJhY2tzOiB7XG5cblx0XHQgICAgICAvLyBDcmVkaXQgY2FyZCBwYXltZW50cyBhcmUgYWx3YXlzIHN1cHBvcnRlZCwgYnV0IHRoZSBXZWIgQXBwbGUgUGF5XG5cdFx0ICAgICAgLy8gYnV0dG9uIHNob3VsZCBvbmx5IGRpc3BsYXkgaWYgQXBwbGUgUGF5IGlzIHN1cHBvcnRlZCBmb3IgdGhpc1xuXHRcdCAgICAgIC8vIGRvbWFpbi4gQXBwbGUgUGF5IHN1cHBvcnQgaXMgZGV0ZXJtaW5lZCBieSB0aGUgU3FQYXltZW50Rm9ybSBsaWJyYXJ5XG5cdFx0ICAgICAgLy8gd2hlbiB0aGUgcGFnZSBsb2Fkcy4gWW91IGRvIG5vdCBuZWVkIHRvIG1vZGlmeSB0aGlzIGZ1bmN0aW9uLlxuXHRcdCAgICAgIG1ldGhvZHNTdXBwb3J0ZWQ6IGZ1bmN0aW9uIChtZXRob2RzKSB7XG5cdFx0ICAgICAgICAgIGlmIChtZXRob2RzLmFwcGxlUGF5ID09PSB0cnVlKSB7XG5cdFx0ICAgICAgICAgICAgICAvLyBTaG93IGFwcGxlIHBheSBidXR0b25cblx0XHQgICAgICAgICAgICAgIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NxLWFwcGxlLXBheScpO1xuXHRcdCAgICAgICAgICAgICAgZWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ2lubGluZS1ibG9jayc7XG5cdFx0ICAgICAgICAgIH1cblx0XHQgICAgICB9LFxuXG5cdFx0ICAgICAgLy8gY3JlYXRlUGF5bWVudFJlcXVlc3QgaXMgdHJpZ2dlcmVkIHdoZW4gdGhlIEFwcGxlIFBheSBidXR0b24gaXNcblx0XHQgICAgICAvLyBjbGlja2VkLiBUaGUgcGF5bWVudCByZXF1ZXN0IG9iamVjdCBpcyB1c2VkIGJ5IGRpZ2l0YWwgd2FsbGV0c1xuXHRcdCAgICAgIC8vIChsaWtlIEFwcGxlIFBheSkgdG8gY3JlYXRlIHRoZWlyIGVxdWl2YWxlbnQgb2YgYSBjcmVkaXQgY2FyZCBub25jZS5cblx0XHQgICAgICAvLyBOT1RFOiBUaGUgcGF5bWVudCByZXF1ZXN0IGJlbG93IGlzIHByb3ZpZGVkIGFzIGd1aWRhbmNlLiBZb3Ugc2hvdWxkXG5cdFx0ICAgICAgLy8gYWRkIGNvZGUgdG8gY3JlYXRlIHRoZSBvYmplY3QgcHJvZ3JhbW1hdGljYWxseS5cblx0XHQgICAgICBjcmVhdGVQYXltZW50UmVxdWVzdDogZnVuY3Rpb24gKCkge1xuXHRcdCAgICAgICAgICByZXR1cm4ge1xuXHRcdCAgICAgICAgICAgICAgcmVxdWVzdFNoaXBwaW5nQWRkcmVzczogdHJ1ZSxcblx0XHQgICAgICAgICAgICAgIGN1cnJlbmN5Q29kZTogXCJVU0RcIixcblx0XHQgICAgICAgICAgICAgIGNvdW50cnlDb2RlOiBcIlVTXCIsXG5cdFx0ICAgICAgICAgICAgICB0b3RhbDoge1xuXHRcdCAgICAgICAgICAgICAgICAgIGxhYmVsOiBcInt7IE1FUkNIQU5UIE5BTUUgfX1cIixcblx0XHQgICAgICAgICAgICAgICAgICBhbW91bnQ6IFwie3tUT1RBTCBBTU9VTlR9fVwiLFxuXHRcdCAgICAgICAgICAgICAgICAgIHBlbmRpbmc6IGZhbHNlLFxuXHRcdCAgICAgICAgICAgICAgfSxcblx0XHQgICAgICAgICAgICAgIGxpbmVJdGVtczogW1xuXHRcdCAgICAgICAgICAgICAgICAgIHtcblx0XHQgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6IFwiU3VidG90YWxcIixcblx0XHQgICAgICAgICAgICAgICAgICAgICAgYW1vdW50OiBcInt7U1VCVE9UQUwgQU1PVU5UfX1cIixcblx0XHQgICAgICAgICAgICAgICAgICAgICAgcGVuZGluZzogZmFsc2UsXG5cdFx0ICAgICAgICAgICAgICAgICAgfSxcblx0XHQgICAgICAgICAgICAgICAgICB7XG5cdFx0ICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiBcIlNoaXBwaW5nXCIsXG5cdFx0ICAgICAgICAgICAgICAgICAgICAgIGFtb3VudDogXCJ7e1NISVBQSU5HIEFNT1VOVH19XCIsXG5cdFx0ICAgICAgICAgICAgICAgICAgICAgIHBlbmRpbmc6IHRydWUsXG5cdFx0ICAgICAgICAgICAgICAgICAgfSxcblx0XHQgICAgICAgICAgICAgICAgICB7XG5cdFx0ICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiBcIlRheFwiLFxuXHRcdCAgICAgICAgICAgICAgICAgICAgICBhbW91bnQ6IFwie3tUQVggQU1PVU5UfX1cIixcblx0XHQgICAgICAgICAgICAgICAgICAgICAgcGVuZGluZzogZmFsc2UsXG5cdFx0ICAgICAgICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgICAgICAgXVxuXHRcdCAgICAgICAgICB9O1xuXHRcdCAgICAgIH0sXG5cblx0XHQgICAgICAvLyBVc2VkIGZvciBjcmVkaXQgY2FyZCBwYXltZW50cy4gQ2FsbGVkIHdoZW4gdGhlIFNxUGF5bWVudEZvcm1cblx0XHQgICAgICAvLyBjb21wbGV0ZXMgYSByZXF1ZXN0IHRvIGdlbmVyYXRlIGEgY2FyZCBub25jZSwgZXZlbiBpZiB0aGUgcmVxdWVzdFxuXHRcdCAgICAgIC8vIGZhaWxlZCBiZWNhdXNlIG9mIGFuIGVycm9yLlxuXHRcdCAgICAgIGNhcmROb25jZVJlc3BvbnNlUmVjZWl2ZWQ6IGZ1bmN0aW9uKGVycm9ycywgbm9uY2UsIGNhcmREYXRhKSB7XG5cdFx0ICAgICAgICBpZiAoZXJyb3JzKSB7XG5cdFx0ICAgICAgICAgIGNvbnNvbGUubG9nKFwiRW5jb3VudGVyZWQgZXJyb3JzOlwiKTtcblxuXHRcdCAgICAgICAgICAvLyBUaGlzIGxvZ3MgYWxsIGVycm9ycyBlbmNvdW50ZXJlZCBkdXJpbmcgbm9uY2UgZ2VuZXJhdGlvbiB0byB0aGVcblx0XHQgICAgICAgICAgLy8gSmF2YXNjcmlwdCBjb25zb2xlLlxuXHRcdCAgICAgICAgICBlcnJvcnMuZm9yRWFjaChmdW5jdGlvbihlcnJvcikge1xuXHRcdCAgICAgICAgICAgIGNvbnNvbGUubG9nKCcgICcgKyBlcnJvci5tZXNzYWdlKTtcblx0XHQgICAgICAgICAgfSk7XG5cblx0XHQgICAgICAgICAgcmV0dXJuO1xuXHRcdCAgICAgICAgfSBlbHNlIHtcblxuXHRcdCAgICAgICAgICAvLyBZb3UgY2FuIGRlbGV0ZSB0aGlzIGxpbmUsIGl0J3MgcHJvdmlkZWQgZm9yIHRlc3RpbmcgcHVycG9zZXNcblx0XHQgICAgICAgICAgLy9hbGVydCgnTm9uY2UgcmVjZWl2ZWQ6ICcgKyBub25jZSk7XG5cblxuXHRcdCAgICAgICAgICAvLyBBc3NpZ24gdGhlIG5vbmNlIHZhbHVlIHRvIHRoZSBoaWRkZW4gZm9ybSBmaWVsZFxuXHRcdCAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2FyZC1ub25jZScpLnZhbHVlID0gbm9uY2U7XG5cdFx0ICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdub25jZS1mb3JtJykuc3VibWl0KCk7XG5cblx0XHQgICAgICAgICAgLy8gTGV0IHRoZSBmb3JtIGNvbnRpbnVlIHRvIHRoZSBwYXltZW50IHByb2Nlc3NpbmcgcGFnZVxuXHRcdCAgICAgICAgICAvL3N1Ym1pdFBheW1lbnQobm9uY2UpO1xuXHRcdCAgICAgICAgICB2bS5kYXRhLnBvc3QoJy9wcm9jZXNzLWNhcmQnLCB7IG5vbmNlOiBub25jZX0pO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgIH0sXG5cblx0XHQgICAgICB1bnN1cHBvcnRlZEJyb3dzZXJEZXRlY3RlZDogZnVuY3Rpb24oKSB7XG5cdFx0ICAgICAgICAvLyBGaWxsIGluIHRoaXMgY2FsbGJhY2sgdG8gYWxlcnQgYnV5ZXJzIHdoZW4gdGhlaXIgYnJvd3NlciBpcyBub3Qgc3VwcG9ydGVkLlxuXHRcdCAgICAgIH0sXG5cblx0XHQgICAgICAvLyBGaWxsIGluIHRoZXNlIGNhc2VzIHRvIHJlc3BvbmQgdG8gdmFyaW91cyBldmVudHMgdGhhdCBjYW4gb2NjdXIgd2hpbGUgYVxuXHRcdCAgICAgIC8vIGJ1eWVyIGlzIHVzaW5nIHRoZSBwYXltZW50IGZvcm0uXG5cdFx0ICAgICAgaW5wdXRFdmVudFJlY2VpdmVkOiBmdW5jdGlvbihpbnB1dEV2ZW50KSB7XG5cdFx0ICAgICAgICBzd2l0Y2ggKGlucHV0RXZlbnQuZXZlbnRUeXBlKSB7XG5cdFx0ICAgICAgICAgIGNhc2UgJ2ZvY3VzQ2xhc3NBZGRlZCc6XG5cdFx0ICAgICAgICAgICAgLy8gSGFuZGxlIGFzIGRlc2lyZWRcblx0XHQgICAgICAgICAgICBicmVhaztcblx0XHQgICAgICAgICAgY2FzZSAnZm9jdXNDbGFzc1JlbW92ZWQnOlxuXHRcdCAgICAgICAgICAgIC8vIEhhbmRsZSBhcyBkZXNpcmVkXG5cdFx0ICAgICAgICAgICAgYnJlYWs7XG5cdFx0ICAgICAgICAgIGNhc2UgJ2Vycm9yQ2xhc3NBZGRlZCc6XG5cdFx0ICAgICAgICAgICAgLy8gSGFuZGxlIGFzIGRlc2lyZWRcblx0XHQgICAgICAgICAgICBicmVhaztcblx0XHQgICAgICAgICAgY2FzZSAnZXJyb3JDbGFzc1JlbW92ZWQnOlxuXHRcdCAgICAgICAgICAgIC8vIEhhbmRsZSBhcyBkZXNpcmVkXG5cdFx0ICAgICAgICAgICAgYnJlYWs7XG5cdFx0ICAgICAgICAgIGNhc2UgJ2NhcmRCcmFuZENoYW5nZWQnOlxuXHRcdCAgICAgICAgICAgIC8vIEhhbmRsZSBhcyBkZXNpcmVkXG5cdFx0ICAgICAgICAgICAgYnJlYWs7XG5cdFx0ICAgICAgICAgIGNhc2UgJ3Bvc3RhbENvZGVDaGFuZ2VkJzpcblx0XHQgICAgICAgICAgICAvLyBIYW5kbGUgYXMgZGVzaXJlZFxuXHRcdCAgICAgICAgICAgIGJyZWFrO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgIH0sXG5cblx0XHQgICAgICBwYXltZW50Rm9ybUxvYWRlZDogZnVuY3Rpb24oKSB7XG5cdFx0ICAgICAgICAvLyBGaWxsIGluIHRoaXMgY2FsbGJhY2sgdG8gcGVyZm9ybSBhY3Rpb25zIGFmdGVyIHRoZSBwYXltZW50IGZvcm0gaXNcblx0XHQgICAgICAgIC8vIGRvbmUgbG9hZGluZyAoc3VjaCBhcyBzZXR0aW5nIHRoZSBwb3N0YWwgY29kZSBmaWVsZCBwcm9ncmFtbWF0aWNhbGx5KS5cblx0XHQgICAgICAgIC8vIHBheW1lbnRGb3JtLnNldFBvc3RhbENvZGUoJzk0MTAzJyk7XG5cdFx0ICAgICAgfVxuXHRcdCAgICB9XG5cdFx0ICB9KTtcblxuXHRcdC8vIFRoaXMgZnVuY3Rpb24gaXMgY2FsbGVkIHdoZW4gYSBidXllciBjbGlja3MgdGhlIFN1Ym1pdCBidXR0b24gb24gdGhlIHdlYnBhZ2Vcblx0XHQvLyB0byBjaGFyZ2UgdGhlaXIgY2FyZC5cblx0XHR2bS5yZXF1ZXN0Q2FyZE5vbmNlID0gZnVuY3Rpb24oZXZlbnQpIHtcblxuXHRcdFx0Y29uc29sZS5sb2coJ3JlcXVlc3Rpb24gY2FyZCBOb25jZScpO1xuXG5cdFx0ICAvLyBUaGlzIHByZXZlbnRzIHRoZSBTdWJtaXQgYnV0dG9uIGZyb20gc3VibWl0dGluZyBpdHMgYXNzb2NpYXRlZCBmb3JtLlxuXHRcdCAgLy8gSW5zdGVhZCwgY2xpY2tpbmcgdGhlIFN1Ym1pdCBidXR0b24gc2hvdWxkIHRlbGwgdGhlIFNxUGF5bWVudEZvcm0gdG8gZ2VuZXJhdGVcblx0XHQgIC8vIGEgY2FyZCBub25jZSwgd2hpY2ggdGhlIG5leHQgbGluZSBkb2VzLlxuXHRcdCAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuXHRcdCAgcGF5bWVudEZvcm0ucmVxdWVzdENhcmROb25jZSgpO1xuXHRcdH1cblxuXHRcdC8vYnVpbGQgcGF5bWVudCBmb3JtIGFmdGVyIGNvbnRyb2xsZXIgbG9hZHNcblx0XHRwYXltZW50Rm9ybS5idWlsZCgpO1xuXG5cdH1cblxuXHRyZXR1cm4gIGRpcmVjdGl2ZTtcbn0iLCIvKiBjb3Vwb25TdWJtaXNzaW9uLmRpcmVjdGl2ZS5qcyAqL1xuXG4vKipcbiogQGRlc2MgdG9vbGJhciBkaXJlY3RpdmUgdGhhdCBpcyB1c2VkIG9uIHRoZSBtYWluIHBhZ2UgYWNyb3NzIHRoZSBlbnRpcmUgYXBwLlxuKiBAZXhhbXBsZSA8ZGl2IGNvdXBvbi1zdWJtaXNzaW9uPjwvZGl2PlxuKi9cblxuYW5ndWxhclxuXHQubW9kdWxlKCdhaE51dHMnKVxuXHQuZGlyZWN0aXZlKCdjb3Vwb25TdWJtaXNzaW9uJywgY291cG9uU3VibWlzc2lvbik7XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gY291cG9uU3VibWlzc2lvbigpIHtcblx0dmFyIGRpcmVjdGl2ZSA9IHtcblx0XHRyZXN0cmljdDogJ0FFQ00nLFxuXHRcdHRlbXBsYXRlVXJsOiAndmlld3MvZGlyZWN0aXZlcy9jb3Vwb25TdWJtaXNzaW9uLmRpcmVjdGl2ZS5odG0nLFxuXHRcdHJlcGxhY2U6IHRydWUsXG5cdFx0c2NvcGU6IHt9LFxuXHRcdGxpbms6IGxpbmtGdW5jLFxuXHRcdGNvbnRyb2xsZXI6IGNvdXBvblN1Ym1pc3Npb25Db250cm9sbGVyLFxuXHRcdGNvbnRyb2xsZXJBczogJ3ZtJyxcblx0XHRiaW5kVG9Db250cm9sbGVyOiB0cnVlXG5cdH1cblxuXHQvKiBAbmdJbmplY3QgKi9cblx0ZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsLCBhdHRyLCBjdHJsKSB7XG4gICAgfVxuXG4gICAgY291cG9uU3VibWlzc2lvbkNvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyRsb2cnXTtcbiAgICAvKiBAbmdJbmplY3QgKi9cbiAgICBmdW5jdGlvbiBjb3Vwb25TdWJtaXNzaW9uQ29udHJvbGxlcigkc2NvcGUsICRsb2cpIHtcblx0ICAgIHZhciB2bSA9IHRoaXM7XG5cblx0ICAgICRsb2cuaW5mbygnaW4gdGhlIGNvdXBvbi1zdWJtaXNzaW9uIGRpcmVjdGl2ZScpO1xuXG5cdH1cblxuXHRyZXR1cm4gIGRpcmVjdGl2ZTtcbn0iLCIvKiBjcmVhdGVOZXdBY2NvdW50LmRpcmVjdGl2ZS5qcyAqL1xuXG4vKipcbiogQGRlc2MgdG9vbGJhciBkaXJlY3RpdmUgdGhhdCBpcyB1c2VkIG9uIHRoZSBtYWluIHBhZ2UgYWNyb3NzIHRoZSBlbnRpcmUgYXBwLlxuKiBAZXhhbXBsZSA8ZGl2IGNyZWF0ZS1uZXctYWNjb3VudD48L2Rpdj5cbiovXG5cbmFuZ3VsYXJcblx0Lm1vZHVsZSgnYWhOdXRzJylcblx0LmRpcmVjdGl2ZSgnY3JlYXRlTmV3QWNjb3VudCcsIGNyZWF0ZU5ld0FjY291bnQpO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIGNyZWF0ZU5ld0FjY291bnQoKSB7XG5cdHZhciBkaXJlY3RpdmUgPSB7XG5cdFx0cmVzdHJpY3Q6ICdBRUNNJyxcblx0XHR0ZW1wbGF0ZVVybDogJ3ZpZXdzL2RpcmVjdGl2ZXMvY3JlYXRlTmV3QWNjb3VudC5kaXJlY3RpdmUuaHRtJyxcblx0XHRyZXBsYWNlOiB0cnVlLFxuXHRcdHNjb3BlOiB7fSxcblx0XHRsaW5rOiBsaW5rRnVuYyxcblx0XHRjb250cm9sbGVyOiBjcmVhdGVOZXdBY2NvdW50Q29udHJvbGxlcixcblx0XHRjb250cm9sbGVyQXM6ICd2bScsXG5cdFx0YmluZFRvQ29udHJvbGxlcjogdHJ1ZVxuXHR9XG5cblx0LyogQG5nSW5qZWN0ICovXG5cdGZ1bmN0aW9uIGxpbmtGdW5jKHNjb3BlLCBlbCwgYXR0ciwgY3RybCkge1xuICAgIH1cblxuICAgIGNyZWF0ZU5ld0FjY291bnRDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsICckbG9nJywgJyRsb2NhdGlvbiddO1xuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZU5ld0FjY291bnRDb250cm9sbGVyKCRzY29wZSwgJGxvZywgJGxvY2F0aW9uKSB7XG5cdCAgICB2YXIgdm0gPSB0aGlzO1xuXG5cdCAgICAkbG9nLmluZm8oJ2luIHRoZSBjcmVhdGUgbmV3IGFjY291bnQgZGlyZWN0aXZlJyk7XG5cblx0ICAgIC8vZGVmaW5lIHZpZXdtb2RlbCBmdW5jdGlvbnNcblxuXHR9XG5cblx0cmV0dXJuICBkaXJlY3RpdmU7XG59IiwiLyogZmVhdHVyZWRQcm9kdWN0cy5kaXJlY3RpdmUuanMgKi9cblxuLyoqXG4qIEBkZXNjIHRvb2xiYXIgZGlyZWN0aXZlIHRoYXQgaXMgdXNlZCBvbiB0aGUgbWFpbiBwYWdlIGFjcm9zcyB0aGUgZW50aXJlIGFwcC5cbiogQGV4YW1wbGUgPGRpdiBmZWF0dXJlZC1wcm9kdWN0cz48L2Rpdj5cbiovXG5cbmFuZ3VsYXJcblx0Lm1vZHVsZSgnYWhOdXRzJylcblx0LmRpcmVjdGl2ZSgnZmVhdHVyZWRQcm9kdWN0cycsIGZlYXR1cmVkUHJvZHVjdHMpO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIGZlYXR1cmVkUHJvZHVjdHMoKSB7XG5cdHZhciBkaXJlY3RpdmUgPSB7XG5cdFx0cmVzdHJpY3Q6ICdBRUNNJyxcblx0XHR0ZW1wbGF0ZVVybDogJ3ZpZXdzL2RpcmVjdGl2ZXMvZmVhdHVyZWRQcm9kdWN0cy5kaXJlY3RpdmUuaHRtJyxcblx0XHRyZXBsYWNlOiB0cnVlLFxuXHRcdHNjb3BlOiB7fSxcblx0XHRsaW5rOiBsaW5rRnVuYyxcblx0XHRjb250cm9sbGVyOiBmZWF0dXJlZFByb2R1Y3RzQ29udHJvbGxlcixcblx0XHRjb250cm9sbGVyQXM6ICd2bScsXG5cdFx0YmluZFRvQ29udHJvbGxlcjogdHJ1ZVxuXHR9XG5cblx0LyogQG5nSW5qZWN0ICovXG5cdGZ1bmN0aW9uIGxpbmtGdW5jKHNjb3BlLCBlbCwgYXR0ciwgY3RybCkge1xuICAgIH1cblxuICAgIGZlYXR1cmVkUHJvZHVjdHNDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsICckbG9nJywgJyRsb2NhdGlvbiddO1xuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIGZlYXR1cmVkUHJvZHVjdHNDb250cm9sbGVyKCRzY29wZSwgJGxvZywgJGxvY2F0aW9uKSB7XG5cdCAgICB2YXIgdm0gPSB0aGlzO1xuXG5cdCAgICAvLyRsb2cuaW5mbygnaW4gdGhlIGZlYXR1cmVkUHJvZHVjdHNDb250cm9sbGVyIGRpcmVjdGl2ZScpO1xuXG5cdCAgICAvL2RlZmluZSB2aWV3bW9kZWwgZnVuY3Rpb25zXG5cdCAgICB2bS5tclByZGN0c0J0biA9IGZ1bmN0aW9uKCkge1xuXHQgICAgXHQkbG9jYXRpb24ucGF0aCgnL2FsbC1wcm9kdWN0cycpO1xuXHQgICAgfVxuXG5cdCAgICB2bS5wcm9kdWN0U2VsZWN0aW9uQnRuID0gZnVuY3Rpb24ocHJvZHVjdE5hbWUpIHtcblx0ICAgIFx0Ly8kbG9nLmluZm8oJ2hpdCB0aGUgcHJvZHVjdCBzZWxlY3Rpb24gYnV0dG9uJyk7XG5cdCAgICBcdCRsb2NhdGlvbi5wYXRoKCcvYWxsLXByb2R1Y3RzJykuc2VhcmNoKCdmaWx0ZXInLHByb2R1Y3ROYW1lKTtcblx0ICAgIH1cblxuXHR9XG5cblx0cmV0dXJuICBkaXJlY3RpdmU7XG59IiwiLyogZmVkZXhPcHRpb25zLmRpcmVjdGl2ZS5qcyAqL1xuXG4vKipcbiogQGRlc2MgdG9vbGJhciBkaXJlY3RpdmUgdGhhdCBpcyB1c2VkIG9uIHRoZSBtYWluIHBhZ2UgYWNyb3NzIHRoZSBlbnRpcmUgYXBwLlxuKiBAZXhhbXBsZSA8ZGl2IGZlZGV4LW9wdGlvbnM+PC9kaXY+XG4qL1xuXG5hbmd1bGFyXG5cdC5tb2R1bGUoJ2FoTnV0cycpXG5cdC5kaXJlY3RpdmUoJ2ZlZGV4T3B0aW9ucycsIGZlZGV4T3B0aW9ucyk7XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gZmVkZXhPcHRpb25zKCkge1xuXHR2YXIgZGlyZWN0aXZlID0ge1xuXHRcdHJlc3RyaWN0OiAnQUVDTScsXG5cdFx0dGVtcGxhdGVVcmw6ICd2aWV3cy9kaXJlY3RpdmVzL2ZlZGV4T3B0aW9ucy5kaXJlY3RpdmUuaHRtJyxcblx0XHRyZXBsYWNlOiB0cnVlLFxuXHRcdHNjb3BlOiB7fSxcblx0XHRsaW5rOiBsaW5rRnVuYyxcblx0XHRjb250cm9sbGVyOiBmZWRleE9wdGlvbnNDb250cm9sbGVyLFxuXHRcdGNvbnRyb2xsZXJBczogJ3ZtJyxcblx0XHRiaW5kVG9Db250cm9sbGVyOiB0cnVlXG5cdH1cblxuXHQvKiBAbmdJbmplY3QgKi9cblx0ZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsLCBhdHRyLCBjdHJsKSB7XG4gICAgfVxuXG4gICAgZmVkZXhPcHRpb25zQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGxvZyddO1xuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIGZlZGV4T3B0aW9uc0NvbnRyb2xsZXIoJHNjb3BlLCAkbG9nKSB7XG5cdCAgICB2YXIgdm0gPSB0aGlzO1xuXG5cdCAgICAvLyRsb2cuaW5mbygnaW4gdGhlIGhlYWRlciBkaXJlY3RpdmUnKTtcblxuXHR9XG5cblx0cmV0dXJuICBkaXJlY3RpdmU7XG59IiwiLyogZnVsbFByb2R1Y3RQcm9maWxlLmRpcmVjdGl2ZS5qcyAqL1xuXG4vKipcbiogQGRlc2MgdG9vbGJhciBkaXJlY3RpdmUgdGhhdCBpcyB1c2VkIG9uIHRoZSBtYWluIHBhZ2UgYWNyb3NzIHRoZSBlbnRpcmUgYXBwLlxuKiBAZXhhbXBsZSA8ZGl2IGZ1bGwtcHJvZHVjdC1wcm9maWxlPjwvZGl2PlxuKi9cblxuYW5ndWxhclxuXHQubW9kdWxlKCdhaE51dHMnKVxuXHQuZGlyZWN0aXZlKCdmdWxsUHJvZHVjdFByb2ZpbGUnLCBmdWxsUHJvZHVjdFByb2ZpbGUpO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIGZ1bGxQcm9kdWN0UHJvZmlsZSgpIHtcblx0dmFyIGRpcmVjdGl2ZSA9IHtcblx0XHRyZXN0cmljdDogJ0FFQ00nLFxuXHRcdHRlbXBsYXRlVXJsOiAndmlld3MvZGlyZWN0aXZlcy9mdWxsUHJvZHVjdFByb2ZpbGUuZGlyZWN0aXZlLmh0bScsXG5cdFx0cmVwbGFjZTogdHJ1ZSxcblx0XHRzY29wZToge1xuXHRcdFx0cHJvZHVjdDogJz0nXG5cdFx0fSxcblx0XHRsaW5rOiBsaW5rRnVuYyxcblx0XHRjb250cm9sbGVyOiBmdWxsUHJvZHVjdFByb2ZpbGVDb250cm9sbGVyLFxuXHRcdGNvbnRyb2xsZXJBczogJ3ZtJyxcblx0XHRiaW5kVG9Db250cm9sbGVyOiB0cnVlXG5cdH1cblxuXHQvKiBAbmdJbmplY3QgKi9cblx0ZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsLCBhdHRyLCBjdHJsKSB7XG4gICAgfVxuXG4gICAgZnVsbFByb2R1Y3RQcm9maWxlQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGxvZycsICckbG9jYXRpb24nLCAnc2hvcHBpbmdDYXJ0J107XG4gICAgLyogQG5nSW5qZWN0ICovXG4gICAgZnVuY3Rpb24gZnVsbFByb2R1Y3RQcm9maWxlQ29udHJvbGxlcigkc2NvcGUsICRsb2csICRsb2NhdGlvbiwgc2hvcHBpbmdDYXJ0KSB7XG5cdCAgICB2YXIgdm0gPSB0aGlzO1xuXHQgICAgdm0uY2FydCA9IHNob3BwaW5nQ2FydDtcblx0ICAgIHZtLml0ZW1TZWxlY3Rpb25zID0gdm0ucHJvZHVjdC5zaXplcztcblxuXHQgICAgLy9hZGQgc2VsZWN0ZWQgaXRlbXMgdG8gY2FydFxuXHQgICAgdm0uYWRkVG9DYXJ0ID0gZnVuY3Rpb24oaXRlbVNlbGVjdGlvbnMpIHtcblxuXHQgICAgXHRjb25zb2xlLmxvZygndm0uaXRlbVNlbGVjdGlvbnMnLCB2bS5pdGVtU2VsZWN0aW9ucyk7XG5cblx0ICAgIFx0Ly9pdGVyYXRlIHRocm91Z2ggZWFjaCBvZiB0aGUgc2l6ZXMsIGlmIHRoZSBxdHkgaXMgZ3JlYXRlciB0aGFuIDAsIGFkZCBpdFxuXHQgICAgXHR2bS5pdGVtU2VsZWN0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uKHNpemUpIHtcblxuXHQgICAgXHRcdGlmKHNpemUucXR5ID4gMCkgdm0uY2FydC5hZGRJdGVtKHNpemUpO1xuXHQgICAgXHR9KTtcblxuXHQgICAgXHQvL3RoZW4gcmVkaXJlY3Rcblx0ICAgIFx0JGxvY2F0aW9uLnBhdGgoJy9nZXR0aW5nLXRoZS1wcm9kdWN0LycgKyAnMTAnKTtcblx0ICAgIH07XG5cblx0fVxuXG5cdHJldHVybiAgZGlyZWN0aXZlO1xufSIsIi8qIGhlcm9CYW5uZXIuZGlyZWN0aXZlLmpzICovXG5cbi8qKlxuKiBAZGVzYyB0b29sYmFyIGRpcmVjdGl2ZSB0aGF0IGlzIHVzZWQgb24gdGhlIG1haW4gcGFnZSBhY3Jvc3MgdGhlIGVudGlyZSBhcHAuXG4qIEBleGFtcGxlIDxkaXYgaGVyby1iYW5uZXI+PC9kaXY+XG4qL1xuXG5hbmd1bGFyXG5cdC5tb2R1bGUoJ2FoTnV0cycpXG5cdC5kaXJlY3RpdmUoJ2hlcm9CYW5uZXInLCBoZXJvQmFubmVyKTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBoZXJvQmFubmVyKCkge1xuXHR2YXIgZGlyZWN0aXZlID0ge1xuXHRcdHJlc3RyaWN0OiAnQUVDTScsXG5cdFx0dGVtcGxhdGVVcmw6ICd2aWV3cy9kaXJlY3RpdmVzL2hlcm9CYW5uZXIuZGlyZWN0aXZlLmh0bScsXG5cdFx0cmVwbGFjZTogdHJ1ZSxcblx0XHRzY29wZToge30sXG5cdFx0bGluazogbGlua0Z1bmMsXG5cdFx0Y29udHJvbGxlcjogaGVyb0Jhbm5lckNvbnRyb2xsZXIsXG5cdFx0Y29udHJvbGxlckFzOiAndm0nLFxuXHRcdGJpbmRUb0NvbnRyb2xsZXI6IHRydWVcblx0fVxuXG5cdC8qIEBuZ0luamVjdCAqL1xuXHRmdW5jdGlvbiBsaW5rRnVuYyhzY29wZSwgZWwsIGF0dHIsIGN0cmwpIHtcbiAgICB9XG5cbiAgICBoZXJvQmFubmVyQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGxvZyddO1xuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIGhlcm9CYW5uZXJDb250cm9sbGVyKCRzY29wZSwgJGxvZykge1xuXHQgICAgdmFyIHZtID0gdGhpcztcblxuXHQgICAgLy8kbG9nLmluZm8oJ2luIHRoZSBoZXJvIGJhbm5lciBkaXJlY3RpdmUnKTtcblxuXHR9XG5cblx0cmV0dXJuICBkaXJlY3RpdmU7XG59IiwiLyogcGFzc3dvcmRSZXNldC5kaXJlY3RpdmUuanMgKi9cblxuLyoqXG4qIEBkZXNjIHRvb2xiYXIgZGlyZWN0aXZlIHRoYXQgaXMgdXNlZCBvbiB0aGUgbWFpbiBwYWdlIGFjcm9zcyB0aGUgZW50aXJlIGFwcC5cbiogQGV4YW1wbGUgPGRpdiBwYXNzd29yZC1yZXNldD48L2Rpdj5cbiovXG5cbmFuZ3VsYXJcblx0Lm1vZHVsZSgnYWhOdXRzJylcblx0LmRpcmVjdGl2ZSgncGFzc3dvcmRSZXNldCcsIHBhc3N3b3JkUmVzZXQpO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIHBhc3N3b3JkUmVzZXQoKSB7XG5cdHZhciBkaXJlY3RpdmUgPSB7XG5cdFx0cmVzdHJpY3Q6ICdBRUNNJyxcblx0XHR0ZW1wbGF0ZVVybDogJ3ZpZXdzL2RpcmVjdGl2ZXMvcGFzc3dvcmRSZXNldC5kaXJlY3RpdmUuaHRtJyxcblx0XHRyZXBsYWNlOiB0cnVlLFxuXHRcdHNjb3BlOiB7fSxcblx0XHRsaW5rOiBsaW5rRnVuYyxcblx0XHRjb250cm9sbGVyOiBwYXNzd29yZFJlc2V0Q29udHJvbGxlcixcblx0XHRjb250cm9sbGVyQXM6ICd2bScsXG5cdFx0YmluZFRvQ29udHJvbGxlcjogdHJ1ZVxuXHR9XG5cblx0LyogQG5nSW5qZWN0ICovXG5cdGZ1bmN0aW9uIGxpbmtGdW5jKHNjb3BlLCBlbCwgYXR0ciwgY3RybCkge1xuICAgIH1cblxuICAgIHBhc3N3b3JkUmVzZXRDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsICckbG9nJywgJyRsb2NhdGlvbiddO1xuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIHBhc3N3b3JkUmVzZXRDb250cm9sbGVyKCRzY29wZSwgJGxvZywgJGxvY2F0aW9uKSB7XG5cdCAgICB2YXIgdm0gPSB0aGlzO1xuXG5cdCAgICAkbG9nLmluZm8oJ2luIHRoZSBwYXNzd29yZFJlc2V0IGRpcmVjdGl2ZScpO1xuXG5cdCAgICAvL2RlZmluZSB2aWV3bW9kZWwgZnVuY3Rpb25zXG5cdCAgICB2bS5lbWFpbCA9ICcnO1xuXG5cdCAgICAvL2RlZmluZSBsb2NhbCBmdW5jdGlvbnNcblx0ICAgIHZtLmJhY2sgPSBmdW5jdGlvbigpIHtcblx0ICAgIFx0JGxvY2F0aW9uLnBhdGgoJy9sb2dpbicpO1xuXHQgICAgfTtcblxuXHQgICAgdm0uc3VibWl0ID0gZnVuY3Rpb24oKSB7XG5cdCAgICBcdCRsb2cuaW5mbygnc3VibWl0dGluZyBlbWFpbCcsIHZtLmVtYWlsKTtcblx0ICAgIH1cblx0fVxuXG5cdHJldHVybiAgZGlyZWN0aXZlO1xufSIsIi8qIHBpY2t1cE9yRGVsaXZlcnkuZGlyZWN0aXZlLmpzICovXG5cbi8qKlxuKiBAZGVzYyB0b29sYmFyIGRpcmVjdGl2ZSB0aGF0IGlzIHVzZWQgb24gdGhlIG1haW4gcGFnZSBhY3Jvc3MgdGhlIGVudGlyZSBhcHAuXG4qIEBleGFtcGxlIDxkaXYgcGlja3VwLW9yLWRlbGl2ZXJ5PjwvZGl2PlxuKi9cblxuYW5ndWxhclxuXHQubW9kdWxlKCdhaE51dHMnKVxuXHQuZGlyZWN0aXZlKCdwaWNrdXBPckRlbGl2ZXJ5JywgcGlja3VwT3JEZWxpdmVyeSk7XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gcGlja3VwT3JEZWxpdmVyeSgpIHtcblx0dmFyIGRpcmVjdGl2ZSA9IHtcblx0XHRyZXN0cmljdDogJ0FFQ00nLFxuXHRcdHRlbXBsYXRlVXJsOiAndmlld3MvZGlyZWN0aXZlcy9waWNrdXBPckRlbGl2ZXJ5LmRpcmVjdGl2ZS5odG0nLFxuXHRcdHJlcGxhY2U6IHRydWUsXG5cdFx0c2NvcGU6IHtcblx0XHRcdG1ldGhvZDogXCI9XCIsXG5cdFx0XHRkZXRhaWxzOiBcIj1cIlxuXHRcdH0sXG5cdFx0bGluazogbGlua0Z1bmMsXG5cdFx0Y29udHJvbGxlcjogcGlja3VwT3JEZWxpdmVyeUNvbnRyb2xsZXIsXG5cdFx0Y29udHJvbGxlckFzOiAndm0nLFxuXHRcdGJpbmRUb0NvbnRyb2xsZXI6IHRydWVcblx0fVxuXG5cdC8qIEBuZ0luamVjdCAqL1xuXHRmdW5jdGlvbiBsaW5rRnVuYyhzY29wZSwgZWwsIGF0dHIsIGN0cmwpIHtcbiAgICB9XG5cbiAgICBwaWNrdXBPckRlbGl2ZXJ5Q29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGxvZyddO1xuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIHBpY2t1cE9yRGVsaXZlcnlDb250cm9sbGVyKCRzY29wZSwgJGxvZykge1xuXHQgICAgdmFyIHZtID0gdGhpcztcblxuXHQgICAgJGxvZy5pbmZvKCdpbiB0aGUgcGlja3VwLW9yLWRlbGl2ZXJ5IGRpcmVjdGl2ZScsIHZtLm1ldGhvZCwgdm0uZGV0YWlscyk7XG5cblx0fVxuXG5cdHJldHVybiAgZGlyZWN0aXZlO1xufSIsIi8qIHByaW1hcnlDb250ZW50LmRpcmVjdGl2ZS5qcyAqL1xuXG4vKipcbiogQGRlc2MgdG9vbGJhciBkaXJlY3RpdmUgdGhhdCBpcyB1c2VkIG9uIHRoZSBtYWluIHBhZ2UgYWNyb3NzIHRoZSBlbnRpcmUgYXBwLlxuKiBAZXhhbXBsZSA8ZGl2IHByaW1hcnktY29udGVudD48L2Rpdj5cbiovXG5cbmFuZ3VsYXJcblx0Lm1vZHVsZSgnYWhOdXRzJylcblx0LmRpcmVjdGl2ZSgncHJpbWFyeUNvbnRlbnQnLCBwcmltYXJ5Q29udGVudCk7XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gcHJpbWFyeUNvbnRlbnQoKSB7XG5cdHZhciBkaXJlY3RpdmUgPSB7XG5cdFx0cmVzdHJpY3Q6ICdBRUNNJyxcblx0XHR0ZW1wbGF0ZVVybDogJ3ZpZXdzL2RpcmVjdGl2ZXMvcHJpbWFyeUNvbnRlbnQuZGlyZWN0aXZlLmh0bScsXG5cdFx0cmVwbGFjZTogdHJ1ZSxcblx0XHRzY29wZToge30sXG5cdFx0bGluazogbGlua0Z1bmMsXG5cdFx0Y29udHJvbGxlcjogcHJpbWFyeUNvbnRlbnRDb250cm9sbGVyLFxuXHRcdGNvbnRyb2xsZXJBczogJ3ZtJyxcblx0XHRiaW5kVG9Db250cm9sbGVyOiB0cnVlXG5cdH1cblxuXHQvKiBAbmdJbmplY3QgKi9cblx0ZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsLCBhdHRyLCBjdHJsKSB7XG4gICAgfVxuXG4gICAgcHJpbWFyeUNvbnRlbnRDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsICckbG9nJ107XG4gICAgLyogQG5nSW5qZWN0ICovXG4gICAgZnVuY3Rpb24gcHJpbWFyeUNvbnRlbnRDb250cm9sbGVyKCRzY29wZSwgJGxvZykge1xuXHQgICAgdmFyIHZtID0gdGhpcztcblxuXHQgICAgJGxvZy5pbmZvKCdpbiB0aGUgaGVhZGVyIGRpcmVjdGl2ZScpO1xuXG5cdH1cblxuXHRyZXR1cm4gIGRpcmVjdGl2ZTtcbn0iLCIvKiBwcm9kdWN0U2l6ZVBpY2tlci5kaXJlY3RpdmUuanMgKi9cblxuLyoqXG4qIEBkZXNjIHRvb2xiYXIgZGlyZWN0aXZlIHRoYXQgaXMgdXNlZCBvbiB0aGUgbWFpbiBwYWdlIGFjcm9zcyB0aGUgZW50aXJlIGFwcC5cbiogQGV4YW1wbGUgPHByb2R1Y3Qtc2l6ZS1waWNrZXI+PC9kaXY+XG4qL1xuXG5hbmd1bGFyXG5cdC5tb2R1bGUoJ2FoTnV0cycpXG5cdC5kaXJlY3RpdmUoJ3Byb2R1Y3RTaXplUGlja2VyJywgcHJvZHVjdFNpemVQaWNrZXIpO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIHByb2R1Y3RTaXplUGlja2VyKCkge1xuXHR2YXIgZGlyZWN0aXZlID0ge1xuXHRcdHJlc3RyaWN0OiAnQUVDTScsXG5cdFx0dGVtcGxhdGVVcmw6ICd2aWV3cy9kaXJlY3RpdmVzL3Byb2R1Y3RTaXplUGlja2VyLmRpcmVjdGl2ZS5odG0nLFxuXHRcdHJlcGxhY2U6IHRydWUsXG5cdFx0c2NvcGU6IHtcblx0XHRcdHNpemVzOiAnPSdcblx0XHR9LFxuXHRcdGxpbms6IGxpbmtGdW5jLFxuXHRcdGNvbnRyb2xsZXI6IHByb2R1Y3RTaXplUGlja2VyQ29udHJvbGxlcixcblx0XHRjb250cm9sbGVyQXM6ICd2bScsXG5cdFx0YmluZFRvQ29udHJvbGxlcjogdHJ1ZVxuXHR9XG5cblx0LyogQG5nSW5qZWN0ICovXG5cdGZ1bmN0aW9uIGxpbmtGdW5jKHNjb3BlLCBlbCwgYXR0ciwgY3RybCkge1xuICAgIH1cblxuICAgIHByb2R1Y3RTaXplUGlja2VyQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGxvZyddO1xuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIHByb2R1Y3RTaXplUGlja2VyQ29udHJvbGxlcigkc2NvcGUsICRsb2cpIHtcblx0ICAgIHZhciB2bSA9IHRoaXM7XG5cblx0ICAgIC8vJGxvZy5pbmZvKCdpbiB0aGUgaGVhZGVyIGRpcmVjdGl2ZScpO1xuXG5cdH1cblxuXHRyZXR1cm4gIGRpcmVjdGl2ZTtcbn0iLCIvKiBwcm9kdWN0VGh1bWJuYWlscy5kaXJlY3RpdmUuanMgKi9cblxuLyoqXG4qIEBkZXNjIHRvb2xiYXIgZGlyZWN0aXZlIHRoYXQgaXMgdXNlZCBvbiB0aGUgbWFpbiBwYWdlIGFjcm9zcyB0aGUgZW50aXJlIGFwcC5cbiogQGV4YW1wbGUgPGRpdiBwcmRjdC10aG1ibmFpbD48L2Rpdj5cbiovXG5cbmFuZ3VsYXJcblx0Lm1vZHVsZSgnYWhOdXRzJylcblx0LmRpcmVjdGl2ZSgncHJkY3RUaG1ibmwnLCBwcmRjdFRobWJubCk7XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gcHJkY3RUaG1ibmwoKSB7XG5cdHZhciBkaXJlY3RpdmUgPSB7XG5cdFx0cmVzdHJpY3Q6ICdBRUNNJyxcblx0XHR0ZW1wbGF0ZVVybDogJ3ZpZXdzL2RpcmVjdGl2ZXMvcHJkY3RUaG1ibmwuZGlyZWN0aXZlLmh0bScsXG5cdFx0cmVwbGFjZTogdHJ1ZSxcblx0XHRzY29wZToge1xuXHRcdFx0cHJvZHVjdDogJz0nXG5cdFx0fSxcblx0XHRsaW5rOiBsaW5rRnVuYyxcblx0XHRjb250cm9sbGVyOiBwcmRjdFRobWJubENvbnRyb2xsZXIsXG5cdFx0Y29udHJvbGxlckFzOiAndm0nLFxuXHRcdGJpbmRUb0NvbnRyb2xsZXI6IHRydWVcblx0fVxuXG5cdC8qIEBuZ0luamVjdCAqL1xuXHRmdW5jdGlvbiBsaW5rRnVuYyhzY29wZSwgZWwsIGF0dHIsIGN0cmwpIHtcbiAgICB9XG5cbiAgICBwcmRjdFRobWJubENvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyRsb2cnXTtcbiAgICAvKiBAbmdJbmplY3QgKi9cbiAgICBmdW5jdGlvbiBwcmRjdFRobWJubENvbnRyb2xsZXIoJHNjb3BlLCAkbG9nKSB7XG5cdCAgICB2YXIgdm0gPSB0aGlzO1xuXG5cdCAgICAvLyRsb2cuaW5mbygnaW4gdGhlIHByZGN0VGhtYm5sIGRpcmVjdGl2ZScpO1xuXG5cdH1cblxuXHRyZXR1cm4gIGRpcmVjdGl2ZTtcbn0iLCIvKiBzZWxlY3REZWxpdmVyeU1ldGhvZC5kaXJlY3RpdmUuanMgKi9cblxuLyoqXG4qIEBkZXNjIHRvb2xiYXIgZGlyZWN0aXZlIHRoYXQgaXMgdXNlZCBvbiB0aGUgbWFpbiBwYWdlIGFjcm9zcyB0aGUgZW50aXJlIGFwcC5cbiogQGV4YW1wbGUgPGRpdiBzZWxlY3QtZGVsaXZlcnktbWV0aG9kPjwvZGl2PlxuKi9cblxuYW5ndWxhclxuXHQubW9kdWxlKCdhaE51dHMnKVxuXHQuZGlyZWN0aXZlKCdzZWxlY3REZWxpdmVyeU1ldGhvZCcsIHNlbGVjdERlbGl2ZXJ5TWV0aG9kKTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBzZWxlY3REZWxpdmVyeU1ldGhvZCgpIHtcblx0dmFyIGRpcmVjdGl2ZSA9IHtcblx0XHRyZXN0cmljdDogJ0FFQ00nLFxuXHRcdHRlbXBsYXRlVXJsOiAndmlld3MvZGlyZWN0aXZlcy9zZWxlY3REZWxpdmVyeU1ldGhvZC5kaXJlY3RpdmUuaHRtJyxcblx0XHRyZXBsYWNlOiB0cnVlLFxuXHRcdHNjb3BlOiB7fSxcblx0XHRsaW5rOiBsaW5rRnVuYyxcblx0XHRjb250cm9sbGVyOiBzZWxlY3REZWxpdmVyeU1ldGhvZENvbnRyb2xsZXIsXG5cdFx0Y29udHJvbGxlckFzOiAndm0nLFxuXHRcdGJpbmRUb0NvbnRyb2xsZXI6IHRydWVcblx0fVxuXG5cdC8qIEBuZ0luamVjdCAqL1xuXHRmdW5jdGlvbiBsaW5rRnVuYyhzY29wZSwgZWwsIGF0dHIsIGN0cmwpIHtcbiAgICB9XG5cbiAgICBzZWxlY3REZWxpdmVyeU1ldGhvZENvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyRsb2cnXTtcbiAgICAvKiBAbmdJbmplY3QgKi9cbiAgICBmdW5jdGlvbiBzZWxlY3REZWxpdmVyeU1ldGhvZENvbnRyb2xsZXIoJHNjb3BlLCAkbG9nKSB7XG5cdCAgICB2YXIgdm0gPSB0aGlzO1xuXG5cdCAgICAvLyRsb2cuaW5mbygnaW4gdGhlIGhlYWRlciBkaXJlY3RpdmUnKTtcblxuXHR9XG5cblx0cmV0dXJuICBkaXJlY3RpdmU7XG59IiwiLyogc2VsZWN0UE9yRC5kaXJlY3RpdmUuanMgKi9cblxuLyoqXG4qIEBkZXNjIHRvb2xiYXIgZGlyZWN0aXZlIHRoYXQgaXMgdXNlZCBvbiB0aGUgbWFpbiBwYWdlIGFjcm9zcyB0aGUgZW50aXJlIGFwcC5cbiogQGV4YW1wbGUgPGRpdiBzZWxlY3QtcC1vci1kPjwvZGl2PlxuKi9cblxuYW5ndWxhclxuXHQubW9kdWxlKCdhaE51dHMnKVxuXHQuZGlyZWN0aXZlKCdzZWxlY3RQT3JEJywgc2VsZWN0UE9yRCk7XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gc2VsZWN0UE9yRCgpIHtcblx0dmFyIGRpcmVjdGl2ZSA9IHtcblx0XHRyZXN0cmljdDogJ0FFQ00nLFxuXHRcdHRlbXBsYXRlVXJsOiAndmlld3MvZGlyZWN0aXZlcy9zZWxlY3RQT3JELmRpcmVjdGl2ZS5odG0nLFxuXHRcdHJlcGxhY2U6IHRydWUsXG5cdFx0c2NvcGU6IHt9LFxuXHRcdGxpbms6IGxpbmtGdW5jLFxuXHRcdGNvbnRyb2xsZXI6IHNlbGVjdFBPckRDb250cm9sbGVyLFxuXHRcdGNvbnRyb2xsZXJBczogJ3ZtJyxcblx0XHRiaW5kVG9Db250cm9sbGVyOiB0cnVlXG5cdH1cblxuXHQvKiBAbmdJbmplY3QgKi9cblx0ZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsLCBhdHRyLCBjdHJsKSB7XG4gICAgfVxuXG4gICAgc2VsZWN0UE9yRENvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyRsb2cnXTtcbiAgICAvKiBAbmdJbmplY3QgKi9cbiAgICBmdW5jdGlvbiBzZWxlY3RQT3JEQ29udHJvbGxlcigkc2NvcGUsICRsb2cpIHtcblx0ICAgIHZhciB2bSA9IHRoaXM7XG5cblx0ICAgIC8vJGxvZy5pbmZvKCdpbiB0aGUgaGVhZGVyIGRpcmVjdGl2ZScpO1xuXG5cdH1cblxuXHRyZXR1cm4gIGRpcmVjdGl2ZTtcbn0iLCIvKiBzZWxlY3RQaWNrdXBMb2NhdGlvbi5kaXJlY3RpdmUuanMgKi9cblxuLyoqXG4qIEBkZXNjIHRvb2xiYXIgZGlyZWN0aXZlIHRoYXQgaXMgdXNlZCBvbiB0aGUgbWFpbiBwYWdlIGFjcm9zcyB0aGUgZW50aXJlIGFwcC5cbiogQGV4YW1wbGUgPGRpdiBzZWxlY3QtcGlja3VwLWxvY2F0aW9uPjwvZGl2PlxuKi9cblxuYW5ndWxhclxuXHQubW9kdWxlKCdhaE51dHMnKVxuXHQuZGlyZWN0aXZlKCdzZWxlY3RQaWNrdXBMb2NhdGlvbicsIHNlbGVjdFBpY2t1cExvY2F0aW9uKTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBzZWxlY3RQaWNrdXBMb2NhdGlvbigpIHtcblx0dmFyIGRpcmVjdGl2ZSA9IHtcblx0XHRyZXN0cmljdDogJ0FFQ00nLFxuXHRcdHRlbXBsYXRlVXJsOiAndmlld3MvZGlyZWN0aXZlcy9zZWxlY3RQaWNrdXBMb2NhdGlvbi5kaXJlY3RpdmUuaHRtJyxcblx0XHRyZXBsYWNlOiB0cnVlLFxuXHRcdHNjb3BlOiB7fSxcblx0XHRsaW5rOiBsaW5rRnVuYyxcblx0XHRjb250cm9sbGVyOiBzZWxlY3RQaWNrdXBMb2NhdGlvbkNvbnRyb2xsZXIsXG5cdFx0Y29udHJvbGxlckFzOiAndm0nLFxuXHRcdGJpbmRUb0NvbnRyb2xsZXI6IHRydWVcblx0fVxuXG5cdC8qIEBuZ0luamVjdCAqL1xuXHRmdW5jdGlvbiBsaW5rRnVuYyhzY29wZSwgZWwsIGF0dHIsIGN0cmwpIHtcbiAgICB9XG5cbiAgICBzZWxlY3RQaWNrdXBMb2NhdGlvbkNvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyRsb2cnXTtcbiAgICAvKiBAbmdJbmplY3QgKi9cbiAgICBmdW5jdGlvbiBzZWxlY3RQaWNrdXBMb2NhdGlvbkNvbnRyb2xsZXIoJHNjb3BlLCAkbG9nKSB7XG5cdCAgICB2YXIgdm0gPSB0aGlzO1xuXG5cdCAgICAvLyRsb2cuaW5mbygnaW4gdGhlIGhlYWRlciBkaXJlY3RpdmUnKTtcblxuXHR9XG5cblx0cmV0dXJuICBkaXJlY3RpdmU7XG59IiwiLyogc2l6ZVF0eVNlbGVjdG9yLmRpcmVjdGl2ZS5qcyAqL1xuXG4vKipcbiogQGRlc2MgdG9vbGJhciBkaXJlY3RpdmUgdGhhdCBpcyB1c2VkIG9uIHRoZSBtYWluIHBhZ2UgYWNyb3NzIHRoZSBlbnRpcmUgYXBwLlxuKiBAZXhhbXBsZSA8ZGl2IHNpemUtcXR5LXNlbGVjdG9yPjwvZGl2PlxuKi9cblxuYW5ndWxhclxuXHQubW9kdWxlKCdhaE51dHMnKVxuXHQuZGlyZWN0aXZlKCdzaXplUXR5U2VsZWN0b3InLCBzaXplUXR5U2VsZWN0b3IpO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIHNpemVRdHlTZWxlY3RvcigpIHtcblx0dmFyIGRpcmVjdGl2ZSA9IHtcblx0XHRyZXN0cmljdDogJ0FFQ00nLFxuXHRcdHRlbXBsYXRlVXJsOiAndmlld3MvZGlyZWN0aXZlcy9zaXplUXR5U2VsZWN0b3IuZGlyZWN0aXZlLmh0bScsXG5cdFx0cmVwbGFjZTogdHJ1ZSxcblx0XHRzY29wZToge1xuXHRcdFx0c2l6ZTogXCI9XCJcblx0XHR9LFxuXHRcdGxpbms6IGxpbmtGdW5jLFxuXHRcdGNvbnRyb2xsZXI6IHNpemVRdHlTZWxlY3RvckNvbnRyb2xsZXIsXG5cdFx0Y29udHJvbGxlckFzOiAndm0nLFxuXHRcdGJpbmRUb0NvbnRyb2xsZXI6IHRydWVcblx0fVxuXG5cdC8qIEBuZ0luamVjdCAqL1xuXHRmdW5jdGlvbiBsaW5rRnVuYyhzY29wZSwgZWwsIGF0dHIsIGN0cmwpIHtcbiAgICB9XG5cbiAgICBzaXplUXR5U2VsZWN0b3JDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsICckbG9nJ107XG4gICAgLyogQG5nSW5qZWN0ICovXG4gICAgZnVuY3Rpb24gc2l6ZVF0eVNlbGVjdG9yQ29udHJvbGxlcigkc2NvcGUsICRsb2cpIHtcblx0ICAgIHZhciB2bSA9IHRoaXM7XG5cblx0ICAgIC8vJGxvZy5pbmZvKCdpbiB0aGUgaGVhZGVyIGRpcmVjdGl2ZScpO1xuXHQgICAgdm0uaW5jcmltZW50ID0gZnVuY3Rpb24oKSB7IHZtLnNpemUucXR5Kys7IH1cblxuXHQgICAgdm0uZGVjcmltZW50ID0gZnVuY3Rpb24oKSB7XG5cdCAgICBcdGlmKHZtLnNpemUucXR5ID49IDEpIHZtLnNpemUucXR5LS07XG5cdCAgICB9XG5cdH1cblxuXHRyZXR1cm4gIGRpcmVjdGl2ZTtcbn0iLCIvKiB0b1ppcE9uRGF0ZS5kaXJlY3RpdmUuanMgKi9cblxuLyoqXG4qIEBkZXNjIHRvb2xiYXIgZGlyZWN0aXZlIHRoYXQgaXMgdXNlZCBvbiB0aGUgbWFpbiBwYWdlIGFjcm9zcyB0aGUgZW50aXJlIGFwcC5cbiogQGV4YW1wbGUgPGRpdiB0by16aXAtb24tZGF0ZT48L2Rpdj5cbiovXG5cbmFuZ3VsYXJcblx0Lm1vZHVsZSgnYWhOdXRzJylcblx0LmRpcmVjdGl2ZSgndG9aaXBPbkRhdGUnLCB0b1ppcE9uRGF0ZSk7XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gdG9aaXBPbkRhdGUoKSB7XG5cdHZhciBkaXJlY3RpdmUgPSB7XG5cdFx0cmVzdHJpY3Q6ICdBRUNNJyxcblx0XHR0ZW1wbGF0ZVVybDogJ3ZpZXdzL2RpcmVjdGl2ZXMvdG9aaXBPbkRhdGUuZGlyZWN0aXZlLmh0bScsXG5cdFx0cmVwbGFjZTogdHJ1ZSxcblx0XHRzY29wZToge30sXG5cdFx0bGluazogbGlua0Z1bmMsXG5cdFx0Y29udHJvbGxlcjogdG9aaXBPbkRhdGVDb250cm9sbGVyLFxuXHRcdGNvbnRyb2xsZXJBczogJ3ZtJyxcblx0XHRiaW5kVG9Db250cm9sbGVyOiB0cnVlXG5cdH1cblxuXHQvKiBAbmdJbmplY3QgKi9cblx0ZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsLCBhdHRyLCBjdHJsKSB7XG4gICAgfVxuXG4gICAgdG9aaXBPbkRhdGVDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsICckbG9nJ107XG4gICAgLyogQG5nSW5qZWN0ICovXG4gICAgZnVuY3Rpb24gdG9aaXBPbkRhdGVDb250cm9sbGVyKCRzY29wZSwgJGxvZykge1xuXHQgICAgdmFyIHZtID0gdGhpcztcblxuXHQgICAgLy8kbG9nLmluZm8oJ2luIHRoZSBoZWFkZXIgZGlyZWN0aXZlJyk7XG5cblx0fVxuXG5cdHJldHVybiAgZGlyZWN0aXZlO1xufSIsIi8qIHVwc09wdGlvbnMuZGlyZWN0aXZlLmpzICovXG5cbi8qKlxuKiBAZGVzYyB0b29sYmFyIGRpcmVjdGl2ZSB0aGF0IGlzIHVzZWQgb24gdGhlIG1haW4gcGFnZSBhY3Jvc3MgdGhlIGVudGlyZSBhcHAuXG4qIEBleGFtcGxlIDxkaXYgdXBzLW9wdGlvbnM+PC9kaXY+XG4qL1xuXG5hbmd1bGFyXG5cdC5tb2R1bGUoJ2FoTnV0cycpXG5cdC5kaXJlY3RpdmUoJ3Vwc09wdGlvbnMnLCB1cHNPcHRpb25zKTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiB1cHNPcHRpb25zKCkge1xuXHR2YXIgZGlyZWN0aXZlID0ge1xuXHRcdHJlc3RyaWN0OiAnQUVDTScsXG5cdFx0dGVtcGxhdGVVcmw6ICd2aWV3cy9kaXJlY3RpdmVzL3Vwc09wdGlvbnMuZGlyZWN0aXZlLmh0bScsXG5cdFx0cmVwbGFjZTogdHJ1ZSxcblx0XHRzY29wZToge30sXG5cdFx0bGluazogbGlua0Z1bmMsXG5cdFx0Y29udHJvbGxlcjogdXBzT3B0aW9uc0NvbnRyb2xsZXIsXG5cdFx0Y29udHJvbGxlckFzOiAndm0nLFxuXHRcdGJpbmRUb0NvbnRyb2xsZXI6IHRydWVcblx0fVxuXG5cdC8qIEBuZ0luamVjdCAqL1xuXHRmdW5jdGlvbiBsaW5rRnVuYyhzY29wZSwgZWwsIGF0dHIsIGN0cmwpIHtcbiAgICB9XG5cbiAgICB1cHNPcHRpb25zQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGxvZyddO1xuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIHVwc09wdGlvbnNDb250cm9sbGVyKCRzY29wZSwgJGxvZykge1xuXHQgICAgdmFyIHZtID0gdGhpcztcblxuXHQgICAgLy8kbG9nLmluZm8oJ2luIHRoZSBoZWFkZXIgZGlyZWN0aXZlJyk7XG5cblx0fVxuXG5cdHJldHVybiAgZGlyZWN0aXZlO1xufSIsIi8qIHVzZXJEYXNoYm9hcmQuZGlyZWN0aXZlLmpzICovXG5cbi8qKlxuKiBAZGVzYyB0b29sYmFyIGRpcmVjdGl2ZSB0aGF0IGlzIHVzZWQgb24gdGhlIG1haW4gcGFnZSBhY3Jvc3MgdGhlIGVudGlyZSBhcHAuXG4qIEBleGFtcGxlIDxkaXYgdXNlci1kYXNoYm9hcmQ+PC9kaXY+XG4qL1xuXG5hbmd1bGFyXG5cdC5tb2R1bGUoJ2FoTnV0cycpXG5cdC5kaXJlY3RpdmUoJ3VzZXJEYXNoYm9hcmQnLCB1c2VyRGFzaGJvYXJkKTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiB1c2VyRGFzaGJvYXJkKCkge1xuXHR2YXIgZGlyZWN0aXZlID0ge1xuXHRcdHJlc3RyaWN0OiAnQUVDTScsXG5cdFx0dGVtcGxhdGVVcmw6ICd2aWV3cy9kaXJlY3RpdmVzL3VzZXJEYXNoYm9hcmQuZGlyZWN0aXZlLmh0bScsXG5cdFx0cmVwbGFjZTogdHJ1ZSxcblx0XHRzY29wZToge30sXG5cdFx0bGluazogbGlua0Z1bmMsXG5cdFx0Y29udHJvbGxlcjogdXNlckRhc2hib2FyZENvbnRyb2xsZXIsXG5cdFx0Y29udHJvbGxlckFzOiAndm0nLFxuXHRcdGJpbmRUb0NvbnRyb2xsZXI6IHRydWVcblx0fVxuXG5cdC8qIEBuZ0luamVjdCAqL1xuXHRmdW5jdGlvbiBsaW5rRnVuYyhzY29wZSwgZWwsIGF0dHIsIGN0cmwpIHtcbiAgICB9XG5cbiAgICB1c2VyRGFzaGJvYXJkQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGxvZycsICckbG9jYXRpb24nXTtcbiAgICAvKiBAbmdJbmplY3QgKi9cbiAgICBmdW5jdGlvbiB1c2VyRGFzaGJvYXJkQ29udHJvbGxlcigkc2NvcGUsICRsb2csICRsb2NhdGlvbikge1xuXHQgICAgdmFyIHZtID0gdGhpcztcblxuXHQgICAgJGxvZy5pbmZvKCdpbiB0aGUgdXNlckRhc2hib2FyZCBkaXJlY3RpdmUnKTtcblxuXHQgICAgLy9kZWZpbmUgdmlld21vZGVsIGZ1bmN0aW9uc1xuXG5cdH1cblxuXHRyZXR1cm4gIGRpcmVjdGl2ZTtcbn0iLCIvKiB1c3BzT3B0aW9ucy5kaXJlY3RpdmUuanMgKi9cblxuLyoqXG4qIEBkZXNjIHRvb2xiYXIgZGlyZWN0aXZlIHRoYXQgaXMgdXNlZCBvbiB0aGUgbWFpbiBwYWdlIGFjcm9zcyB0aGUgZW50aXJlIGFwcC5cbiogQGV4YW1wbGUgPGRpdiB1c3BzLW9wdGlvbnM+PC9kaXY+XG4qL1xuXG5hbmd1bGFyXG5cdC5tb2R1bGUoJ2FoTnV0cycpXG5cdC5kaXJlY3RpdmUoJ3VzcHNPcHRpb25zJywgdXNwc09wdGlvbnMpO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIHVzcHNPcHRpb25zKCkge1xuXHR2YXIgZGlyZWN0aXZlID0ge1xuXHRcdHJlc3RyaWN0OiAnQUVDTScsXG5cdFx0dGVtcGxhdGVVcmw6ICd2aWV3cy9kaXJlY3RpdmVzL3VzcHNPcHRpb25zLmRpcmVjdGl2ZS5odG0nLFxuXHRcdHJlcGxhY2U6IHRydWUsXG5cdFx0c2NvcGU6IHt9LFxuXHRcdGxpbms6IGxpbmtGdW5jLFxuXHRcdGNvbnRyb2xsZXI6IHVzcHNPcHRpb25zQ29udHJvbGxlcixcblx0XHRjb250cm9sbGVyQXM6ICd2bScsXG5cdFx0YmluZFRvQ29udHJvbGxlcjogdHJ1ZVxuXHR9XG5cblx0LyogQG5nSW5qZWN0ICovXG5cdGZ1bmN0aW9uIGxpbmtGdW5jKHNjb3BlLCBlbCwgYXR0ciwgY3RybCkge1xuICAgIH1cblxuICAgIHVzcHNPcHRpb25zQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGxvZyddO1xuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIHVzcHNPcHRpb25zQ29udHJvbGxlcigkc2NvcGUsICRsb2cpIHtcblx0ICAgIHZhciB2bSA9IHRoaXM7XG5cblx0ICAgIC8vJGxvZy5pbmZvKCdpbiB0aGUgaGVhZGVyIGRpcmVjdGl2ZScpO1xuXG5cdH1cblxuXHRyZXR1cm4gIGRpcmVjdGl2ZTtcbn0iLCJhbmd1bGFyXG4gICAgLm1vZHVsZSgnYWhOdXRzJylcbiAgICAuZmFjdG9yeSgnZGF0YVNlcnZpY2VzJywgZGF0YVNlcnZpY2VzKTtcblxuZGF0YVNlcnZpY2VzLiRpbmplY3QgPSBbJyRsb2cnLCAnJGh0dHAnXTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBkYXRhU2VydmljZXMoJGxvZywgJGh0dHApIHtcblxuXHR2YXIgZGF0YVNlcnZpY2VzT2JqZWN0ID0ge1xuXHRcdGdldDogZ2V0LFxuXHRcdHBvc3Q6IHBvc3Rcblx0fTtcblxuXHQvL2RlZmluZSBhbGwgbWV0aG9kc1xuXHRmdW5jdGlvbiBnZXQodXJsLCBjb25maWcpIHtcblxuXHRcdC8vcmV0dXJuIGEgcHJvbWlzZSBmb3IgYXN5bmMgd29ya1xuXHRcdHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblx0XHRcdFxuXHRcdFx0JGh0dHAuZ2V0KHVybCwgY29uZmlnKVxuXHRcdFx0LnRoZW4oZnVuY3Rpb24gc3VjY2VzcyhzKSB7XG5cblx0XHRcdFx0cmVzb2x2ZShzLmRhdGEpO1xuXG5cdFx0XHR9LCBmdW5jdGlvbiBlcnJvcihlKSB7XG5cblx0XHRcdFx0cmVqZWN0KGUpO1xuXHRcdFx0fSk7XG5cblx0XHR9KTtcblxuXHR9O1xuXG5cdGZ1bmN0aW9uIHBvc3QodXJsLCBkYXRhLCBjb25maWcpIHtcblxuXHRcdC8vcmV0dXJuIGEgcHJvbWlzZSBmb3IgYXN5bmMgd29ya1xuXHRcdHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblx0XHRcdFxuXHRcdFx0JGh0dHAucG9zdCh1cmwsIGRhdGEsIGNvbmZpZylcblx0XHRcdC50aGVuKGZ1bmN0aW9uIHN1Y2Nlc3MocmVzcG9uc2UpIHtcblxuXHRcdFx0XHRyZXNvbHZlKHJlc3BvbnNlLmRhdGEpO1xuXG5cdFx0XHR9LCBmdW5jdGlvbiBlcnJvcihlKSB7XG5cblx0XHRcdFx0cmVqZWN0KGUpO1xuXHRcdFx0fSk7XG5cblx0XHR9KTtcblxuXHR9O1xuXG5cdHJldHVybiBkYXRhU2VydmljZXNPYmplY3Q7XG59IiwiYW5ndWxhclxuICAgIC5tb2R1bGUoJ2FoTnV0cycpXG4gICAgLmZhY3RvcnkoJ3Nob3BwaW5nQ2FydCcsIHNob3BwaW5nQ2FydCk7XG5cbnNob3BwaW5nQ2FydC4kaW5qZWN0ID0gWyckbG9nJywgJyRodHRwJywgJyR3aW5kb3cnXTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBzaG9wcGluZ0NhcnQoJGxvZywgJGh0dHAsICR3aW5kb3cpIHtcblxuXHR2YXIgc2hvcHBpbmdDYXJ0T2JqZWN0ID0ge1xuXHRcdGlzRW1wdHk6IHRydWUsXG5cdFx0b3JkZXJOdW1iZXI6IHVuZGVmaW5lZCxcblx0XHRhcXVpc2l0aW9uTWV0aG9kOiB1bmRlZmluZWQsXG5cdFx0bm9PZkl0ZW1zOiAwLFxuXHRcdHN1YnRvdGFsOiAwLFxuXHRcdHNoaXBwaW5nUHJpY2U6IDAsXG5cdFx0ZGlzY291bnRzOiAwLFxuXHRcdHRvdGFsQ29zdDogMCxcblx0XHRhcXVpc2l0aW9uRGV0YWlsczoge30sXG5cdFx0aXRlbXM6IHt9LFxuXHRcdF9zYXZlVG9Ccm93c2VyOiBfc2F2ZVRvQnJvd3Nlcixcblx0XHRfZ2V0Q2FydDogX2dldENhcnQsIFxuXHRcdF9yZW1vdmVDYXJ0OiBfcmVtb3ZlQ2FydCxcblx0XHRfYWRkTmV3SXRlbTogX2FkZE5ld0l0ZW0sXG5cdFx0X2NvdW50Tm9JdGVtczogX2NvdW50Tm9JdGVtcyxcblx0XHRfY2FsY1N1YnRvdGFsOiBfY2FsY1N1YnRvdGFsLFxuXHRcdGluaXQ6IGluaXQsXG5cdFx0YWRkSXRlbTogYWRkSXRlbSxcblx0XHRyZW1vdmVJdGVtOiByZW1vdmVJdGVtLFxuXHRcdHVwZGF0ZUFxdWlzaXRpb25NZXRob2Q6IHVwZGF0ZUFxdWlzaXRpb25NZXRob2Rcblx0fTtcblxuXHRmdW5jdGlvbiBpbml0KCkge1xuXHRcdC8vVE9ETzogQ0xFQU4gVEhJUyBVUCBMQVRFUiwgTUFZQkUgQUREIEFTIFNFUEVSQVRFIFNFUlZJQ0Vcblx0XHR2YXIgc2VsZiA9IHRoaXM7XG5cblx0XHQvL1xuXHRcdGlmKCR3aW5kb3cuc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbSgnYWgtbnV0cy1jYXJ0JykgIT0gbnVsbCkge1xuXHRcdFx0dmFyIHNhdmVkQ2FydCA9IEpTT04ucGFyc2UoJHdpbmRvdy5zZXNzaW9uU3RvcmFnZS5nZXRJdGVtKCdhaC1udXRzLWNhcnQnKSk7XG5cblx0XHRcdHNlbGYuaXNFbXB0eSA9IHNhdmVkQ2FydC5pc0VtcHR5O1xuXHRcdFx0c2VsZi5vcmRlck51bWJlciA9IHNhdmVkQ2FydC5vcmRlck51bWJlcjtcblx0XHRcdHNlbGYuYXF1aXNpdGlvbk1ldGhvZCA9IHNhdmVkQ2FydC5hcXVpc2l0aW9uTWV0aG9kO1xuXHRcdFx0c2VsZi5ub09mSXRlbXMgPSBzYXZlZENhcnQubm9PZkl0ZW1zO1xuXHRcdFx0c2VsZi5zdWJ0b3RhbCA9IHNhdmVkQ2FydC5zdWJ0b3RhbDtcblx0XHRcdHNlbGYuc2hpcHBpbmdQcmljZSA9IHNhdmVkQ2FydC5zaGlwcGluZ1ByaWNlO1xuXHRcdFx0c2VsZi5kaXNjb3VudHMgPSBzYXZlZENhcnQuZGlzY291bnRzO1xuXHRcdFx0c2VsZi50b3RhbENvc3QgPSBzYXZlZENhcnQudG90YWxDb3N0O1xuXHRcdFx0c2VsZi5hcXVpc2l0aW9uRGV0YWlscyA9IHNhdmVkQ2FydC5hcXVpc2l0aW9uRGV0YWlscztcblx0XHR9XG5cblx0XHRjb25zb2xlLmxvZyhzZWxmKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gX3NhdmVUb0Jyb3dzZXIoY2FydCkge1xuXHRcdCR3aW5kb3cuc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbSgnYWgtbnV0cy1jYXJ0JywgSlNPTi5zdHJpbmdpZnkoY2FydCkpO1xuXHR9O1xuXG5cdGZ1bmN0aW9uIF9nZXRDYXJ0KCkge1xuXHRcdHJldHVybiAkd2luZG93LnNlc3Npb25TdG9yYWdlWydhaC1udXRzLWNhcnQnXTtcblx0fTtcblxuXHRmdW5jdGlvbiBfcmVtb3ZlQ2FydCgpIHtcblx0XHQkd2luZG93LnNlc3Npb25TdG9yYWdlLnJlbW92ZUl0ZW0oJ2FoLW51dHMtY2FydCcpO1xuXHR9O1xuXG5cdGZ1bmN0aW9uIF9hZGROZXdJdGVtKG5ld0l0ZW0pIHtcblx0XHQvL2RlZmluZSBsb2NhbCB2YXJpYWJsZXNcblx0XHR2YXIgcmV0dXJuT2JqZWN0ID0ge307XG5cblx0XHQvL2l0cmF0ZSB0aHJvdWdoIGFsbCB0aGUgb2JqZWN0cywgYW5kIGFkZCB0aGVtLlxuXHRcdE9iamVjdC5rZXlzKG5ld0l0ZW0pLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG5cdFx0XHRyZXR1cm5PYmplY3Rba2V5XSA9IG5ld0l0ZW1ba2V5XTtcblx0XHR9KTtcblxuXHRcdHJldHVybiByZXR1cm5PYmplY3Q7XG5cdH07XG5cblx0ZnVuY3Rpb24gX2NvdW50Tm9JdGVtcyhhbGxJdGVtcykge1xuXHRcdC8vZGVmaW5lIGxvY2FsIHZhcmlhYmxlc1xuXHRcdHZhciBuZXdUb3RhbCA9IDA7XG5cblx0XHQvL2l0ZXJhdGUgdGhyb3VnaCB0aGUgaXRlbXMgbGlzdFxuXHRcdE9iamVjdC5rZXlzKGFsbEl0ZW1zKS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuXHRcdFx0Ly9jb25zb2xlLmxvZyhrZXksIGFsbEl0ZW1zW2tleV0pXG5cdFx0XHRuZXdUb3RhbCArPSBhbGxJdGVtc1trZXldLnF0eTtcblx0XHR9KTtcblxuXHRcdC8vY29uc29sZS5sb2coJ19jb3VudE5vSXRlbXMnLCBuZXdUb3RhbCk7XG5cblx0XHRyZXR1cm4gbmV3VG90YWw7XG5cdH07XG5cblx0ZnVuY3Rpb24gX2NhbGNTdWJ0b3RhbChhbGxJdGVtcykge1xuXHRcdC8vZGVmaW5lIGxvY2FsIHZhcmlhYmxlc1xuXHRcdHZhciBuZXdUb3RhbCA9IDA7XG5cblx0XHQvL2l0ZXJhdGUgdGhyb3VnaCB0aGUgaXRlbXMgbGlzdFxuXHRcdE9iamVjdC5rZXlzKGFsbEl0ZW1zKS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuXHRcdFx0bmV3VG90YWwgKz0gKGFsbEl0ZW1zW2tleV0ucXR5ICogYWxsSXRlbXNba2V5XS5wcmljZSk7XG5cdFx0fSk7XG5cblx0XHQvL2NvbnNvbGUubG9nKCdfY2FsY1N1YnRvdGFsJywgbmV3VG90YWwpO1xuXG5cdFx0cmV0dXJuIG5ld1RvdGFsO1xuXHR9O1xuXG5cdGZ1bmN0aW9uIGFkZEl0ZW0obmV3SXRlbSkge1xuXHRcdC8vZGVmaW5lIGxvY2FsIHZhcmlhYmxlc1xuXHRcdHZhciBzZWxmID0gdGhpcztcblx0XHR2YXIgaXRtQ29kZSA9IG5ld0l0ZW0uY29kZTtcblxuXHRcdC8vVE9ETzogVEFLRSBUSElTIE9VVCBMQVRFUlxuXHRcdC8vY29uc29sZS5sb2coJ2dvdCB0aGVzZSBJdGVtcycsIG5ld0l0ZW0sIHNlbGYpO1xuXG5cdFx0Ly9pZiB3ZSdyZSBhZGRpbmcgc29tZXRoaW5nIHRoZW4gdGhlIGNhcnQgY2FuJ3QgYmUgZW1wdHlcblx0XHRzZWxmLmlzRW1wdHkgPSBmYWxzZTtcblxuXHRcdC8vZmlyc3QsIGFyZSB3ZSBhZGRpbmcgcXR5IG9yIG5ldyBwcm9kdWN0IGNvZGVzXG5cdFx0aWYoc2VsZi5pdGVtc1tpdG1Db2RlXSA9PSB1bmRlZmluZWQpIHtcblx0XHRcdC8vIHRoaXMgaXMgYW4gaXRlbSBjb2RlIHRoYXQgaGFzIG5ldmVyIGJlZW4gYWRkZWRcblx0XHRcdC8vaW50aWFsaXplIHRoZSBvYmplY3QgaW4gaXRlbXMgbGlzdFxuXHRcdFx0c2VsZi5pdGVtc1tpdG1Db2RlXSA9IF9hZGROZXdJdGVtKG5ld0l0ZW0pO1xuXG5cdFx0XHQvL3VwZGF0ZSBub09mSXRlbXNcblx0XHRcdHNlbGYubm9PZkl0ZW1zID0gX2NvdW50Tm9JdGVtcyhzZWxmLml0ZW1zKTtcblxuXHRcdFx0Ly91cGRhdGUgc3ViVG90YWxcblx0XHRcdHNlbGYuc3VidG90YWwgPSBfY2FsY1N1YnRvdGFsKHNlbGYuaXRlbXMpO1xuXG5cdFx0fSAgZWxzZSB7XG5cdFx0XHQvLyB0aGlzIGl0ZW0gY29kZSBoYXMgYmVlbiBhZGRlZCBiZWZvcmUsIGp1c3QgdXBkYXRlIHRoZSBxdHlcblx0XHR9XG5cblx0XHQvL3VwZGF0ZSB0aGUgY29zdCBzdWJ0b3RhbFxuXHRcdC8vc2VsZi5zdWJ0b3RhbCA9IG5ld0l0ZW1zLnByaWNlICogbmV3SXRlbXMucXR5O1xuXG5cdFx0Ly91cGRhdGUgdGhlIGl0ZW0gY291bnRlclxuXHRcdC8vc2VsZi5ub09mSXRlbXMgKz0gbmV3SXRlbXMucXR5O1xuXHRcdFxuXHRcdC8vYWRkIHRoZSBpdGVtIHRvIHRoZSBjYXJ0XG5cdFx0Ly9zZWxmLml0ZW1zLnB1c2gobmV3SXRlbXMpO1xuXG5cdFx0c2VsZi5fc2F2ZVRvQnJvd3Nlcih7XG5cdFx0XHRpc0VtcHR5OiBzZWxmLmlzRW1wdHksXG5cdFx0XHRvcmRlck51bWJlcjogc2VsZi5vcmRlck51bWJlcixcblx0XHRcdGFxdWlzaXRpb25NZXRob2Q6IHNlbGYuYXF1aXNpdGlvbk1ldGhvZCxcblx0XHRcdG5vT2ZJdGVtczogc2VsZi5ub09mSXRlbXMsXG5cdFx0XHRzdWJ0b3RhbDogc2VsZi5zdWJ0b3RhbCxcblx0XHRcdHNoaXBwaW5nUHJpY2U6IHNlbGYuc2hpcHBpbmdQcmljZSxcblx0XHRcdGRpc2NvdW50czogc2VsZi5kaXNjb3VudHMsXG5cdFx0XHR0b3RhbENvc3Q6IHNlbGYudG90YWxDb3N0LFxuXHRcdFx0YXF1aXNpdGlvbkRldGFpbHM6IHNlbGYuYXF1aXNpdGlvbkRldGFpbHMsXG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fTtcblxuXHRmdW5jdGlvbiByZW1vdmVJdGVtKCkge31cblx0ZnVuY3Rpb24gdXBkYXRlQXF1aXNpdGlvbk1ldGhvZCgpIHt9XG5cblx0cmV0dXJuIHNob3BwaW5nQ2FydE9iamVjdDtcbn1cbiIsImFuZ3VsYXJcbiAgICAubW9kdWxlKCdhaE51dHMnKVxuICAgIC5mYWN0b3J5KCd0ZXN0T2JqZWN0JywgdGVzdE9iamVjdCk7XG5cbnRlc3RPYmplY3QuJGluamVjdCA9IFsnJGxvZyddO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIHRlc3RPYmplY3QoJGxvZykge1xuXG5cdHZhciB0ZXN0T2JqZWN0T2JqZWN0ID0ge1xuXHRcdGltYWdlOiB1bmRlZmluZWQsXG5cdFx0Y29kZTogMTIwMyxcblx0XHRyYXRpbmc6IHVuZGVmaW5lZCxcblx0XHRuYW1lOiBcIlNwZWNpYWx0eSBDb25lc1wiLFxuXHRcdHNpemVzOiBbXG5cdFx0XHR7IGNvZGU6IDEyMDMwMDEsIHRpdGxlOiBcIkltcHJlc3NpdmVcIiwgb3o6IDE2LCBwcmljZTogMTgwMCB9LFxuXHRcdFx0eyBjb2RlOiAxMjAzMDAyLCB0aXRsZTogXCJBdmVyYWdlXCIsIG96OiA4LCBwcmljZTogMTMwMCB9LFxuXHRcdFx0eyBjb2RlOiAxMjAzMDAzLCB0aXRsZTogXCJTbWFsbFwiLCBvejogNCwgcHJpY2U6IDcwMCB9XG5cdFx0XSxcblx0XHRkZXNjcmlwdGlvbjogXCJUaGUgbW9zdCBhbWF6aW5nIHBlY2FucyB5b3UndmUgZXZlciB0YXN0ZVwiLFxuXHRcdGluZ3JlZGllbnRzOiBbJ1BlY2FucycsICdTdWdhcicsICdWYW5pbGxhJywgJ1NhbHQnXVxuXHR9O1xuXG5cblx0cmV0dXJuIHRlc3RPYmplY3RPYmplY3Q7XG59XG4iLCJhbmd1bGFyXG4gICAgLm1vZHVsZSgnYWhOdXRzJylcbiAgICAuc2VydmljZSgndXNlckF1dGhlbnRpY2F0aW9uJywgdXNlckF1dGhlbnRpY2F0aW9uKTtcblxudXNlckF1dGhlbnRpY2F0aW9uLiRpbmplY3QgPSBbJyRodHRwJywgJyR3aW5kb3cnXTtcblxuZnVuY3Rpb24gdXNlckF1dGhlbnRpY2F0aW9uICgkaHR0cCwgJHdpbmRvdykge1xuXG5cdHZhciB1c2VyQXV0aCA9IHtcblx0XHRzYXZlVG9rZW46IHNhdmVUb2tlbixcblx0XHRnZXRUb2tlbjogZ2V0VG9rZW4sXG5cdFx0bG9nT3V0OiBsb2dPdXQsXG5cdFx0aXNMb2dnZWRJbjogaXNMb2dnZWRJbixcblx0XHRjdXJyZW50VXNlcjogY3VycmVudFVzZXJcblx0fTtcblxuXG5cdGZ1bmN0aW9uIHNhdmVUb2tlbih0b2tlbikge1xuXHRcdCR3aW5kb3cubG9jYWxTdG9yYWdlWydhaC1udXRzLXRva2VuJ10gPSB0b2tlbjtcblx0fVxuXG5cdGZ1bmN0aW9uIGdldFRva2VuKCkge1xuXHRcdHJldHVybiAkd2luZG93LmxvY2FsU3RvcmFnZVsnYWgtbnV0cy10b2tlbiddO1xuXHR9XG5cblx0ZnVuY3Rpb24gbG9nT3V0KCkge1xuXHRcdCR3aW5kb3cubG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oJ2FoLW51dHMtdG9rZW4nKTtcblx0fVxuXG5cdGZ1bmN0aW9uIGlzTG9nZ2VkSW4oKSB7XG5cdFx0dmFyIHRva2VuID0gZ2V0VG9rZW4oKTtcblx0XHR2YXIgcGF5bG9hZDtcblxuXHRcdGlmKHRva2VuKSB7XG5cdFx0XHRwYXlsb2FkID0gdG9rZW4uc3BsaXQoJy4nKVsxXTtcblx0XHRcdHBheWxvYWQgPSAkd2luZG93LmF0b3AocGF5bG9hZCk7XG5cdFx0XHRwYXlsb2FkID0gSlNPTi5wYXJzZShwYXlsb2FkKTtcblxuXHRcdFx0cmV0dXJuIHBheWxvYWQuZXhwID4gRGF0ZS5ub3coKSAvIDEwMDA7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdH1cblxuXHRmdW5jdGlvbiBjdXJyZW50VXNlcigpIHtcblx0XHRpZihpc0xvZ2dlZEluKCkpIHtcblx0XHRcdHZhciB0b2tlbiA9IGdldFRva2VuKCk7XG5cdFx0XHR2YXIgcGF5bG9hZCA9IHRva2VuLnNwbGl0KCcuJylbMV07XG5cdFx0XHRwYXlsb2FkID0gJHdpbmRvdy5hdG9wKHBheWxvYWQpO1xuXHRcdFx0cGF5bG9hZCA9IEpTT04ucGFyc2UocGF5bG9hZCk7XG5cdFx0XHRyZXR1cm4gcGF5bG9hZDtcblx0XHR9XG5cdH1cbn0iLCJhbmd1bGFyXG4gICAgLm1vZHVsZSgnYWhOdXRzJylcbiAgICAuY29uZmlnKGNvbmZpZyk7XG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIGNvbmZpZygkcm91dGVQcm92aWRlcikge1xuXHQkcm91dGVQcm92aWRlclxuXHQvL2RlZmluZSB0aGUgbGFuZGluZyByb3V0ZVxuXHQud2hlbignLycsIHtcbiAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9sYW5kaW5nUGFnZS5odG0nLCAgICAgIC8vJ3ZpZXdzL21haW5QYWdlLmh0bSdcbiAgICAgICAgY29udHJvbGxlcjogJ2xhbmRpbmdDb250cm9sbGVyJywgICAgICAgICAgIC8vJ21haW5Db250cm9sbGVyJ1xuICAgICAgICBjb250cm9sbGVyQXM6ICd2bSdcbiAgICB9KVxuICAgIC8vZGVmaW5lIHRoZSBhbGwgcHJvZHVjdHMgcm91dGVcbiAgICAud2hlbignL2FsbC1wcm9kdWN0cycsIHtcbiAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9hbGxQcm9kdWN0c1BhZ2UuaHRtJyxcbiAgICAgICAgY29udHJvbGxlcjogJ2FsbFByb2R1Y3RzQ29udHJvbGxlcicsXG4gICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJyxcbiAgICAgICAgcmVzb2x2ZTogeyAvKiBAbmdJbmplY3QgKi9cbiAgICAgICAgICAgIHByb2R1Y3RMaXN0OiBwcm9kdWN0TGlzdFxuICAgICAgICB9XG4gICAgfSlcbiAgICAvL2RlZmluZSB0aGUgc2luZ2xlIHByb2R1Y3Qgcm91dGVcbiAgICAud2hlbignL3Byb2R1Y3QvOnByZGN0SWQnLCB7XG4gICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvYVByb2R1Y3RQYWdlLmh0bScsXG4gICAgICAgIGNvbnRyb2xsZXI6ICdhUHJvZHVjdENvbnRyb2xsZXInLFxuICAgICAgICBjb250cm9sbGVyQXM6ICd2bScsXG4gICAgICAgIHJlc29sdmU6IHsgLyogQG5nSW5qZWN0ICovXG4gICAgICAgICAgICBhUHJvZHVjdDogYVByb2R1Y3RcbiAgICAgICAgfVxuICAgIH0pXG4gICAgLy9kZWZpbmUgdGhlIGRlbGl2ZXJ5IHNwZWNpZmljYXRpb25zIHJvdXRlXG4gICAgLndoZW4oJy9nZXR0aW5nLXRoZS1wcm9kdWN0LzppdGVtSWQnLCB7XG4gICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvcHJvZHVjdEdldHRpbmdQYWdlLmh0bScsXG4gICAgICAgIGNvbnRyb2xsZXI6ICdwcm9kdWN0R2V0dGluZ0NvbnRyb2xsZXInLFxuICAgICAgICBjb250cm9sbGVyQXM6ICd2bSdcbiAgICB9KVxuICAgIC8vZGVmaW5lIHRoZSBsb2NhdGlvbnMgcm91dGVcbiAgICAud2hlbignL2xvY2F0aW9ucycsIHtcbiAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9sb2NhdGlvbnNQYWdlLmh0bScsXG4gICAgICAgIGNvbnRyb2xsZXI6ICdsb2NhdGlvbnNDb250cm9sbGVyJyxcbiAgICAgICAgY29udHJvbGxlckFzOiAndm0nXG4gICAgfSlcbiAgICAvL2RlZmluZSB0aGUgbG9naW4gcm91dGVcbiAgICAud2hlbignL2xvZ2luJywge1xuICAgICAgICB0ZW1wbGF0ZVVybDogJ3ZpZXdzL2xvZ2luUGFnZS5odG0nLFxuICAgICAgICBjb250cm9sbGVyOiAnbG9naW5Db250cm9sbGVyJyxcbiAgICAgICAgY29udHJvbGxlckFzOiAndm0nXG4gICAgfSlcbiAgICAvL2RlZmluZSB0aGUgc2hvcHBpbmcgY2FydCByb3V0ZVxuICAgIC53aGVuKCcvY2FydCcsIHtcbiAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9jYXJ0UGFnZS5odG0nLFxuICAgICAgICBjb250cm9sbGVyOiAnY2FydENvbnRyb2xsZXInLFxuICAgICAgICBjb250cm9sbGVyQXM6ICd2bSdcbiAgICB9KVxuICAgIC8vZGVmaW5lIHRoZSBjaGVja291dCByb3V0ZVxuICAgIC53aGVuKCcvY2hlY2tvdXQnLCB7XG4gICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvY2hlY2tvdXRQYWdlLmh0bScsXG4gICAgICAgIGNvbnRyb2xsZXI6ICdjaGVja291dENvbnRyb2xsZXInLFxuICAgICAgICBjb250cm9sbGVyQXM6ICd2bScsXG4gICAgICAgIHJlc29sdmU6IHsgLyogQG5nSW5qZWN0ICovXG4gICAgICAgICAgICBzcXVhcmVDcmVkczogc3F1YXJlQ3JlZHNcbiAgICAgICAgfVxuICAgIH0pXG4gICAgLy9kZWZpbmUgdGhlIGNoZWNrb3V0IHJvdXRlXG4gICAgLndoZW4oJy9vcmRlci1jb25maXJtYXRpb24vOmNvbmZJZCcsIHtcbiAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9vcmRlckNvbmZpcm1hdGlvblBhZ2UuaHRtJyxcbiAgICAgICAgY29udHJvbGxlcjogJ29yZGVyQ29uZmlybWF0aW9uQ29udHJvbGxlcicsXG4gICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJ1xuICAgIH0pXG4gICAgLy9kZWZpbmUgdGhlIG15QWNjb3VudCByb3V0ZSBmb3IgY3VzdG9tZXJzXG4gICAgLndoZW4oJy9yZWdpc3RlclVzZXInLCB7XG4gICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvcmVnaXN0cmF0aW9uUGFnZS5odG0nLFxuICAgICAgICBjb250cm9sbGVyOiAncmVnaXN0ZXJBY2N0Q29udHJvbGxlcicsXG4gICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJ1xuICAgIH0pXG4gICAgLy9kZWZpbmUgdGhlIG15QWNjb3VudCByb3V0ZSBmb3IgY3VzdG9tZXJzXG4gICAgLndoZW4oJy9NeUFjY291bnQvOnBhcmFtJywge1xuICAgICAgICB0ZW1wbGF0ZVVybDogJ3ZpZXdzL2FjY291bnRzUGFnZS5odG0nLFxuICAgICAgICBjb250cm9sbGVyOiAnYWNjb3VudHNDb250cm9sbGVyJyxcbiAgICAgICAgY29udHJvbGxlckFzOiAndm0nXG4gICAgfSlcbiAgICAvL2RlZmluZSB0aGUgdGVhbU1lbWJlciByb3V0ZVxuXHQud2hlbignL3RlYW1NZW1iZXIvOnBhcmFtJywge1xuICAgICAgICB0ZW1wbGF0ZVVybDogJ3ZpZXdzL2ludGVybmFsQWN0dHNQYWdlLmh0bScsXG4gICAgICAgIGNvbnRyb2xsZXI6ICdpbnRlcm5hbEFjdHRzQ29udHJvbGxlcicsXG4gICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJyxcbiAgICAgICAgcmVzb2x2ZTogeyAvKiBAbmdJbmplY3QgKi9cbiAgICAgICAgICAgIGF1dGhlbnRpY2F0aW9uOiBhdXRoZW50aWNhdGlvblxuICAgICAgICB9XG4gICAgLy99KS5vdGhlcndpc2Uoe1xuICAgIC8vICAgIHJlZGlyZWN0VG86ICcvJ1xuICAgIH0pO1xufVxuXG4vL1JlcXVpcmVkIGZ1bmN0aW9uc1xuZnVuY3Rpb24gYXV0aGVudGljYXRpb24oKSB7XG5cbiAgICBjb25zb2xlLmxvZygnYXV0aGVudGljYXRpbmcnKTtcdC8vVE9ETzogVEFLRSBUSElTIE9VVCBMQVRFUlxufTtcblxuZnVuY3Rpb24gc3F1YXJlQ3JlZHMoZGF0YVNlcnZpY2VzKSB7XG4gICAgLy9kZWZpbmUgbG9jYWwgdmFyaWFibGVzXG4gICAgdmFyIGRhdGEgPSBkYXRhU2VydmljZXM7XG5cbiAgICBjb25zb2xlLmxvZygnZ2V0dGluZyBzcXVhcmUgY3JlZHMnKTsgICAgLy9UT0RPOiBUQUtFIFRISVMgT1VUIExBVEVSXG5cbiAgICBcbiAgICAvL1RPRE86IFdIWSBET0VTIFRISVMgUkVTT0xWRSBTT01FVElNRVMgQU5EIE5PVCBPVEhFUlNcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG5cbiAgICAgICAgLy9yZWFjaCBvdXQgdG8gZW5kcG9pbnRcbiAgICAgICAgZGF0YS5wb3N0KCcvYXBpL3NxdWFyZS1jcmVkcycsIHsga2V5Oidvd2luZTkxbi1zbiNic2lud2kjayd9IClcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24gc3VjY2VzcyhzKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnZ290IHRoaXMnLCBzKTtcbiAgICAgICAgICAgIHJlc29sdmUocyk7XG4gICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIGVycm9yKGUpIHtcbiAgICAgICAgICAgIHJlc29sdmUoZSk7XG4gICAgICAgIH0pO1xuXG4gICAgfSk7XG5cbn07XG5cbi8qXG4qICAgUFJPRFVDVCBMSVNUXG4qXG4qICAgVGhpcyBmdW5jdGlvbiBsb2FkcyBhIGxpc3Qgb2YgcHJvZHVjdHNcbiovXG5mdW5jdGlvbiBwcm9kdWN0TGlzdChkYXRhU2VydmljZXMsICRyb3V0ZSkge1xuXG4gICAgLy9kZWZpbmUgbG9jYWwgdmFyaWFibGVzXG4gICAgdmFyIGRhdGEgPSBkYXRhU2VydmljZXM7XG4gICAgdmFyIHBhdGggPSAnL2FwaS9wcm9kdWN0bGlzdCc7XG5cbiAgICBpZigkcm91dGUuY3VycmVudC5wYXJhbXMgIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHBhdGggKz0gJz9maWx0ZXI9JyArICRyb3V0ZS5jdXJyZW50LnBhcmFtcy5maWx0ZXI7XG4gICAgfTtcblxuICAgIC8vYWxlcnQoJyRyb3V0ZS5jdXJyZW50LnBhcmFtcycsICRyb3V0ZS5jdXJyZW50LnBhcmFtcyk7XG5cbiAgICAvL3JldHVybiB0aGUgcHJvbWlzZSBvZiBhc3luYyB3b3JrXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXG4gICAgICAgIC8vcmVhY2ggb3V0IHRvIHRoZSBlbmRwb2ludFxuICAgICAgICBkYXRhLmdldChwYXRoKVxuICAgICAgICAudGhlbihmdW5jdGlvbiBzdWNjZXNzKHMpIHtcbiAgICAgICAgICAgIHJlc29sdmUocyk7XG4gICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIGVycm9yKGUpIHtcbiAgICAgICAgICAgIHJlamVjdChlKTtcbiAgICAgICAgfSk7XG5cbiAgICB9KTtcbn07XG5cbi8qXG4qICAgQSBQUk9EVUNUXG4qXG4qICAgVGhpcyBmdW5jdGlvbiBsb2FkcyBhIHNpbmdsZSBwcm9kdWN0XG4qL1xuZnVuY3Rpb24gYVByb2R1Y3QoZGF0YVNlcnZpY2VzLCAkcm91dGUpIHtcblxuICAgIC8vZGVmaW5lIGxvY2FsIHZhcmlhYmxlc1xuICAgIHZhciBkYXRhID0gZGF0YVNlcnZpY2VzO1xuICAgIHZhciBwYXRoID0gJy9hcGkvcHJvZHVjdGxpc3Q/c2VsZWN0PScgKyAkcm91dGUuY3VycmVudC5wYXJhbXMucHJkY3RJZDtcblxuICAgIGNvbnNvbGUubG9nKCdwYXRoJywgcGF0aCk7XG5cblxuICAgIC8vYWxlcnQoJyRyb3V0ZS5jdXJyZW50LnBhcmFtcycsICRyb3V0ZS5jdXJyZW50LnBhcmFtcyk7XG5cbiAgICAvL3JldHVybiB0aGUgcHJvbWlzZSBvZiBhc3luYyB3b3JrXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXG4gICAgICAgIC8vcmVhY2ggb3V0IHRvIHRoZSBlbmRwb2ludFxuICAgICAgICBkYXRhLmdldChwYXRoKVxuICAgICAgICAudGhlbihmdW5jdGlvbiBzdWNjZXNzKHMpIHtcbiAgICAgICAgICAgIC8vY29uc29sZS5sb2coJ2dvdCB0aGlzIHByb2R1Y3QnLCBzKTtcbiAgICAgICAgICAgIHJlc29sdmUocyk7XG4gICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIGVycm9yKGUpIHtcbiAgICAgICAgICAgIHJlamVjdChlKTtcbiAgICAgICAgfSk7XG5cbiAgICB9KTtcblxufTtcbiIsIi8vIE1PRFVMRVxudmFyIGFoTnV0cyA9IGFuZ3VsYXIubW9kdWxlKCdhaE51dHMnLCBbJ25nUm91dGUnXSk7XG4iLCJhbmd1bGFyXG4gICAgLm1vZHVsZSgnYWhOdXRzJylcbiAgICAucnVuKFsnc2hvcHBpbmdDYXJ0JywgZnVuY3Rpb24oc2hvcHBpbmdDYXJ0KSB7XG5cdFx0c2hvcHBpbmdDYXJ0LmluaXQoKTtcblx0fV0pOyJdfQ==
